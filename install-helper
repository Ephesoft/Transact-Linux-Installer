#!/bin/bash


echo `date "+%Y-%m-%d %H:%M:%S"`
home_directory_path="$PWD"
installation_log_file="$home_directory_path/installation.log"
status_variable=installation_status
success_variable=success
failure_varable=failure
error_deleting_installation_log_file="Error deleting $installation_log_file file."
#Reading file for reading params of Product name and company name file contains properties like caption_EphesoftTransact,caption_ephesoft,caption_transact 
source "$home_directory_path/Response-Files/product_captions/captions.properties"
if [ $caption_ephesoft == "@@Ephesoft@@" ]
then
	caption_ephesoft="Ephesoft"
fi
if [ $caption_EphesoftTransact == "@@EphesoftTransact@@" ]
then
	caption_EphesoftTransact="Ephesoft Transact"
fi
if [ $caption_transact == "@@Transact@@" ]
then
	caption_transact="Transact"
fi


default_tar_file_name=$caption_ephesoft"_@@VERSION@@.tar.gz"

if [[ $2 == "-product" ]] && [[ $3 != "" ]]
then
  is_generic_installer=1
  product_name=$3
  if [[ $4 != "" ]]
  then
    service_name=$4
    #As service name can be of on word. So omitting extra words.
    service_name=${service_name%% *}
  else
    service_name=${product_name%% *}
  fi
  if [[ $5 != "" ]]
  then
      tar_file_name=$5
  else
      tar_file_name=$default_tar_file_name
  fi
  installationDirectory_folder_name=$product_name
  product_name_message=$product_name
else
  is_generic_installer=0
  product_name=${caption_ephesoft,,}
  service_name=$product_name
  tar_file_name=$default_tar_file_name
  installationDirectory_folder_name=`echo "${product_name^}"`
  product_name_message=`echo "${product_name^}"`
fi

#Defining the log file name.
ephesoft_log_file_name=/var/log/install-ephesoft.log

#Linux machine type 
operating_system=redhat
ubuntu=ubuntu
redhat=redhat
centos=centos
amazon_linux=amazon_linux
is_centos=0
is_amazon_linux=0

#Defining properties and path variables.
#Value of patch_installer can be y or n. Y if you want to install as a patch and n if you want to install as a fresh/upgrade.
patch_installer=n
is_patch_version_check_pass=""
is_upgrade_version_check_pass=""
show_software_installation_message=y
installationDirectory=/opt
ephesoft_config_directory_path=/etc/Ephesoft
ephesoft_configuration_file_name=ephesoft.conf
ephesoft_configuration_file=$ephesoft_config_directory_path/$ephesoft_configuration_file_name
response_file="Response-Files/config.properties"
dependencies_file_path=$installationDirectory/Dependencies/dependencies
user_local_bin_path="/usr/local/bin"
shared_library_path="/usr/local/lib/"
user_share_path="/usr/share/"
user_java_path=/etc/.java
libreoffice_link=/usr/bin/soffice
libreoffice_installation_directory=/opt/libreoffice6.3
libreoffice_java_path=/etc/profile.d/ephesoft_jdk.sh
user_java_system_prefs_path=$user_java_path/.systemPrefs
patch_enable=true
workflow_deploy=true
ephesoft_installation_file=$tar_file_name
tomcat_port_number=8080
http_tomcat_port_number=8080
report_db_archive="_archive"
# Default database type setting to mariadb
databasetype=mariadb
mariadb_upgrade_script_failure=0
learn_files=files_to_learn
customPluginJars=customPluginJars

#Defining disk space required for Ephesoft
disk_space_installation_dir=5
disk_space_root_dir=12

default_heap_size=2048
default_perm_size=1024

xmx_max_heap_size=-Xmx${default_heap_size}m
xmx_min_heap_size=-Xms${default_heap_size}m
xmx_maxperm_size="-XX:MaxPermSize=${default_perm_size}m"
xmx_minperm_size="-XX:PermSize=${default_perm_size}m"
openoffice_port_number=8100
is_existing_shared_folder="n"
random_number=11
autotable_backup=0
nuance_folder=22.0
nuance_sub_folder=omnipage-csdk-22.0-22456.2100
nuance_public_key=gpg-pubkey-nuance-lnx1.asc
ephesoft_version=@@VERSION@@
system_name=$(hostname)
server_alias_name=$(hostname)
os_version=""
database_port_number=3306
is_pv_installed="n"
is_upgrade="n"
checkinstall_tar_file=checkinstall.tar.gz
libreoffice_tar_file=LibreOffice.tar.gz
ephesoft_upgrade_configuration_file_name=upgrade.conf
ephesoft_user_registration_information_file_name=user.conf
tomcat_xml_file_name=tomcat-users.xml
upgrade_configuration_file=$ephesoft_config_directory_path/$ephesoft_upgrade_configuration_file_name
ephesoft_user_registration_information_file=$ephesoft_config_directory_path/$ephesoft_user_registration_information_file_name
ephesoft_update_conf_file_params=( license_file_backup lib_backup properties_backup webxml_backup serverxml_backup logrotateconf_backup setenv_backup log4jxml_backup applicationcontext_backup applicationcontextsecurity_backup dependencies_backup sharedfolders_backup application_rename application_backup ephesoftreports_rename documents_rename version_rename readme_rename dependencies_rename javaappserver_rename licenses_rename old_application_delete upgrade_successful application_copied merge_application upgrade_database certs_rename certs_backup application_extract certs_imported applicationcontext_merge webxml_merge applicationcontextsecurity_merge)
ephesoft_conf_file_params=( imagemagick graphicsmagick database_type oracle mysql mariadb tesseract leptonica libreoffice wkhtmltopdf ephesoft_application ephesoft_shared_folders ephesoft_installed omnipage poco notofonts tomcat_port_number database_port_number dev_tools checkinstall os_name application_user application_user_group temp_directory authentication_mode connector_protocol server_name)
ephesoft_user_conf_file_params=( user_registration_name user_registration_company user_registration_department user_registration_street user_registration_city user_registration_state user_registration_country)
silent_installer_params_fresh=( input_installation_directory input_offline_install_mode input_run_application_as_non_root_user input_use_existing_user input_application_user input_application_user_password_required input_application_user_password input_application_user_group input_change_shared_folder_path input_changed_shared_folder_path input_tomcat_port_number input_change_server_name input_changed_server_name input_database_type input_new_database_instance input_new_database_schema input_database_port_number input_database_password input_admin_database_username input_admin_database_password input_application_database_name input_report_database_name input_report_archive_database_name input_oracle_database_username input_oracle_database_password input_oracle_database_server_name input_oracle_database_port_number input_oracle_database_connection_mode input_oracle_database_service_name input_oracle_database_sid input_oracle_database_application_db_schema input_oracle_database_application_db_password input_oracle_database_report_db_schema input_oracle_database_report_db_password input_oracle_database_report_archive_db_schema input_oracle_database_report_archive_db_password input_authentication_mode input_application_communication_protocol input_form_https_keystore_cert_path input_form_https_keystore_cert_password input_pki_server_cert_path input_pki_server_cert_password input_pki_ca_cert_path input_pki_ca_cert_password input_pki_alias_name input_pki_connector_port_number input_pki_connector_ssl_protocol input_pki_connector_ssl_enabled_protocol input_pki_connector_chipper_text input_pki_username_retriever input_connectivity_user_connection input_realm_super_admin_group_name input_realm_connection_url input_realm_connection_name input_realm_user_password input_realm_user_base input_realm_user_search input_realm_user_sub_tree input_realm_role_base input_realm_role_name input_realm_role_sub_tree input_realm_role_search input_msactivedirectory_group_search_filter input_install_tesseract input_existing_shared_folder input_existing_shared_folder_path input_database_patch_enable input_install_multiserver input_system_ip_name input_upgrade_application input_database_username input_mounted_sharedfolder_path input_forcefully_stop_running_server input_user_registration_name input_user_registration_city input_user_registration_company input_user_registration_country input_user_registration_department input_user_registration_state input_user_registration_street input_disable_firewall input_disable_os_warning)

pki_conf_file_params=( input_pki_server_cert_path input_pki_ca_cert_path input_pki_alias_name input_pki_connector_port_number input_pki_connector_ssl_protocol input_pki_connector_ssl_enabled_protocol input_pki_connector_chipper_text input_pki_username_retriever input input_connectivity_user_connection input_realm_connection_url input_realm_connection_name input_realm_user_base input_realm_user_search input_realm_user_sub_tree input_realm_role_base input_realm_role_name input_realm_role_sub_tree input_realm_role_search input_msactivedirectory_group_search_filter)

silent_installer_params_upgrade=( input_database_patch_enable)

#Defining the MariaDB installation directory and configuration file.
mariadb_version_min=10.3.00
mariadb_version_max=10.6.99
mariadb_version_recommend=10.6.8
current_mariadb_version=0
is_valid_mariadb_version=n
mariadb_upgrade_required=0

#Defining the Ephesoft service file
ephesoft_service_link=/etc/init.d/$service_name

#Dependencies version
dependencies_file_ubuntu="dependencies_ubuntu"
dependencies_file_redhat="dependencies_redhat"
libreoffice_deb_version="6.3"
libreoffice_redhat_version="LibreOffice_6.3.1.2_Linux_x86-64_rpm"
libreoffice_ubuntu_version="LibreOffice_6.3.1.2_Linux_x86-64_deb"
wkhtmltopdf_folder_name="wkhtmltopdf"
wkhtmltopdf_redhat_version="0.12.4"
wkhtmltopdf_ubuntu_version="0.12.4"

#Defining the iptables file name.
iptables_file=iptables
iptables_file_name=/etc/sysconfig/$iptables_file

sources_folder=/opt/sources/
python_folder=python
python_tar=python.tar.gz

temp_ephesoft_folder=/tmp/Ephesoft

default_application_db_name="$product_name"
default_report_db_name="report"
default_report_archive_db_name="report_archive"
default_database_port="3306"

#Error message to be displayed in case of unsupported version of mariadb is being used
error_unsupported_version_of_mariadb="The Install Wizard has detected that your MariaDB database is not a supported version. Ephesoft recommends MariaDB version $mariadb_version_recommend, but should function with all stable versions of the 10.6 series. Please install a supported version of MariaDB before continuing the installation."
#Warning message to be shown when a higher version of mariadb is detected
info_higher_version_of_mariadb="The Install Wizard has detected that your MariaDB database is newer than the versions officially supported. Ephesoft recommends MariaDB version $mariadb_version_recommend, but should function with all stable versions of the 10.6 series. We highly recommend that you only install Transact with supported versions. You may proceed with the installation, but Ephesoft Transact may not work correctly."
#Messages to be displayed while doing Ephesoft Installation.
info_installing_as_silent_installer="Installing $caption_EphesoftTransact using silent installer, please wait..."
info_installing_patch_as_silent_installer="Installing $caption_EphesoftTransact using silent installer, please wait..."
info_silent_installer_message="Do you want to install $caption_EphesoftTransact as silent installer? Please enter a valid option(y/n)."
info_start_installation="========== Starting $caption_EphesoftTransact installation =========="
success_ephesoft_install="============ $caption_EphesoftTransact installed successfully ============="
info_installer_os="Operating system has been detected by installer. Do you want to change the detected operating system(y/n)?"
info_installer_select_os="Please select the appropriate Operating System(A=Amazon Linux/C=CentOS/R=Red Hat/U=Ubuntu)"
invalid_option_os="Please enter a valid option (A/C/R/U)."
invalid_option_database="Please enter a valid option (1/2)."
invalid_option_three="Please enter a valid option (1/2/3)."
error_response_file_not_found="Response file not found."
error_replacing_ephesoft_config_file_params="Error occurred while replacing parameter in $ephesoft_configuration_file_name. Parameter not replaced is "
error_replacing_upgrade_config_file_params="Error occurred while replacing parameter in $ephesoft_upgrade_configuration_file_name. Parameter not replaced is "
error_replacing_user_config_file_params="Error occurred while replacing parameter in $ephesoft_user_registration_information_file_name. Parameter not replaced is "
error_replacing_temp_user_config_file_params="Error occurred while replacing parameter in $temp_directory/conf.properties. Parameter not replaced is "
error_insufficint_disk_space="Insufficient disk space, To complete the installation"


#Message to be displayed while updating the packages from repositories.
update_packages_repositories="Updating the package list from the repository, please wait..."
error_building_dependency_tree="Error occurred while building dependency tree."
error_update_package_repositories="Error occurred while updating packages from repositories."


#Messages to be displayed while creating configuration directory and file.
info_creating_configuration_directory="Creating configuration directory for $caption_EphesoftTransact."
error_creating_configuration_directory="Error occurred while creating configuration directory."
info_creating_configuration_file="Creating $caption_EphesoftTransact configuration file."
error_creating_configuration_file="Error occurred while creating $caption_EphesoftTransact configuration file."
info_creating_user_configuration_file="Creating $caption_EphesoftTransact user configuration file."
error_creating_user_configuration_file="Error occurred while creating $caption_EphesoftTransact user configuration file."


error_cannot_upgrade="Installer has detected that either $caption_EphesoftTransact is not installed on this machine or installed $caption_EphesoftTransact's version mismatches with $caption_EphesoftTransact patch version. Please contact your $caption_EphesoftTransact administrator for appropriate version."
error_already_installed_upgrade="$caption_EphesoftTransact version $ephesoft_version is already installed on this system."
error_creating_sources_folder="Error occurred while creating sources folder for $caption_EphesoftTransact dependencies."
info_creating_upgrade_configuration_file="Creating $caption_EphesoftTransact upgrade configuration file."
error_creating_upgrade_configuration_file="Error occurred while creating $caption_EphesoftTransact upgrade configuration file."
error_replacing_ephesoft_config_file="Error occurred while replacing value in configuration file for "
error_replacing_policy_xml_file="Error occurred while replacing policy.xml file for ImageMagick."
info_server_already_running="$caption_EphesoftTransact server is already running. Do you want to forcefully stop the server? Please enter a valid option(y/n)."
info_ephesoft_upgrade_detected="Set up has detected that $caption_EphesoftTransact version "
info_ephesoft_upgrade_installed=" is already installed on this system. Set up will upgrade previous installation. Do you want to upgrade it to $caption_EphesoftTransact version $ephesoft_version (y/n)?"
info_upgrade_patch_installed_successful="Thank you for installing $caption_EphesoftTransact version $ephesoft_version."
info_upgrade_patch_note="Note - Back-up of Web.xml, log4j.xml, server.xml, applicationContext-security.xml and applicationContext.xml of earlier installation has been created in Application-backup-"
info_upgrade_patch_note_2=" directory. Please update newly installed Web.xml, log4j.xml, applicationContext-security.xml and applicationContext.xml files from back-up as newly installed files do not contain customized changes."
info_upgrade_patch_note_3=" directory. Please update newly installed log4j.xml file from back-up as newly installed file does not contain customized changes."

#Messages to be displayed while checking whether ephesoft is already installed or not.
error_ephesoft_already_installed="$caption_EphesoftTransact is already installed on this system."

#Messages to be displayed while checking internet connection.
info_checking_internet_connection="Checking for Internet connection. Please wait..."
error_connecting_internet="Unable to connect to the Internet."
error_installing_dependency="Error occurred while installing"
info_installing_development_tools="Installing libraries for development tools. Please wait..."
success_install_dev_tools="Development tools installed successfully on this system."
error_installing_development_tools="Error occurred while installing libraries for development tools."
warning_no_internet="Warning: System can not connect to internet, please make sure that offline repository is enabled/created before proceeding with installation in offline mode."
do_you_want_to_continue="Do you want to continue(y/n)?"

#Messages to be displayed while installing net-tools in case of Operating System is RedHat 8
info_installing_net_tools="Installing/Updating \"net-tools\" for Ephesoft Transact."
check_if_net_tools_is_installed="Checking if package net-tools is already installed."
success_installing_net_tools_package="Package \"net-tools\" installed successfully."
error_installing_net_tools="Error occurred while installing net-tools package."
net_tools_package_is_already_installed="Package net-tools is already installed."

#Messages to be displayed while upgrading the Ephesoft.
info_application_backup_folder_exists="Application-backup folder already exists. Do you want to override it(y/n)?"
error_creating_application_backup_folder="Error occurred while creating the application backup folder."
error_creating_cloud_client_backup_folder="Error occurred while creating the backup folder for application.properties of cloud-client."
error_creating_license_backup="Error occurred while creating backup for ephesoft.lic."
error_creating_lib_backup="Error occurred while creating backup for lib folder."
error_creating_application_backup="Error occurred while creating backup for Application folder."
error_creating_properties_backup="Error occurred while creating backup for META-INF folder."
error_creating_web_xml_backup="Error occurred while creating backup for web.xml."
error_creating_web_xml="Error occurred while creating web.xml."
error_creating_server_xml_backup="Error occurred while creating backup for server.xml."
error_creating_cloud_client_application_property_backup="Error occurred while creating backup of application.properties of cloud-client."
error_creating_server_cert_backup="Error occurred while creating backup for server cert jks file."
error_creating_https_cert_backup="Error occurred while creating backup for HTTPS connector cert file."
error_creating_ca_cert_backup="Error occurred while creating backup for ca cert jks file."
error_creating_certs_backup="Error occurred while creating backup for certs folder."
error_creating_logrotate_conf_backup="Error occurred while creating backup for logrotate.conf."
error_creating_setenv_sh_backup="Error occurred while creating backup for setenv.sh."
error_creating_log4j_xml_backup="Error occurred while creating backup for log4j.xml."
error_creating_applicationcontext_backup="Error occurred while creating backup for applicationContext.xml."
error_creating_applicationcontextsecurity_backup="Error occurred while creating backup for applicationContext-security.xml."
error_creating_autotable_backup="Error occurred while creating backup for autoTable."
error_creating_dependencies_file_backup="Error occurred while creating backup for dependencies file."
error_deleting_dependency_file="Error occurred while deleting dependencies file."
error_deleting_batch_class_ser_files="Error occurred while deleting Batch Class ser files. Please remove BC*.ser files present in all batch classes manually after the installation finished."
error_deleting_batch_class_zip="Error occurred while deleting Batch Class zip file."
error_deleting_existing_jar_file="Error occurred while deleting existing UpgradeEphesoft.jar file."
error_renaming_application="Error occurred while renaming the old Application folder."
error_renaming_dependencies="Error occurred while renaming the Dependencies folder."
error_renaming_ephesoftreports="Error occurred while renaming the EphesoftReports folder."
error_renaming_licenses="Error occurred while renaming the Licenses folder."
error_renaming_documents="Error occurred while taking backup of Documents folder."
error_renaming_version="Error occurred while taking backup of Version folder."
error_renaming_javaappserver="Error occurred while taking backup of JavaAppServer folder."
error_renaming_certs="Error occurred while taking backup of certs folder."
error_renaming_readme="Error occurred while taking backup of ReadMe.txt file."
info_application_merge_in_progress="Merging $caption_EphesoftTransact old application with new one. Please wait..."
error_application_merge="Error occurred while merging the $caption_EphesoftTransact application."
error_renaming_update_conf_file="Error occurred while renaming the update configuration file."
info_execute_database_patch="Do you want to execute the database patch(y/n)? (Required for single server installation)"
success_ephesoft_upgrade="============ $caption_EphesoftTransact upgraded successfully ============"
error_stopping_server="Error occurred while stopping $caption_EphesoftTransact server."
info_ephesoft_final_message_upgrade="If $caption_EphesoftTransact installation has used remote MariaDB server then please make sure that '{$product_name_message-install-dir}/Dependencies/MariaDBSetup/mariadb_db_config.sql, mariadb_user_creation.sql' has to be executed manually over $product_name_message Reporting database."
info_ephesoft_final_message="If $caption_EphesoftTransact installation has used remote MariaDB server then please make sure that '{$product_name_message-install-dir}/Dependencies/MariaDBSetup/mariadb_db_config.sql, mariadb_user_creation.sql' has to be executed manually over $product_name_message Reporting database."
error_preserving_old_mariadb_data="Error occoured in copying the old mariadb data while upgrading."
error_executing_database_patch="Error occurred while running '{$product_name_message-install-dir}/Dependencies/MariaDBSetup/mariadb_db_config.sql' file. Please make sure to execute SQL file manually over database."
error_executing_database_patch_oracle="Error occurred while running '{$product_name_message-install-dir}/Dependencies/OracleSetup/oracle_application.sql, oracle_report.sql, oracle_reportarchive.sql' file. Please make sure to execute SQL files manually over database."

#DB credentails message
DB_Username="Enter $product_name_message admin Username."
DB_Password="Enter $product_name_message admin Password."
re_enter_db_details="Can not connect to the database. Please re-enter database details."
error_connecting_database="Can not connect to the database "
error_connecting_database_2=". Please re-enter database details."
error_connecting_db_execute_query="Can not connect to the database using provided credentials. Do you want to re-enter database details (y) or  '{$product_name_message-install-dir}/Dependencies/MariaDBSetup/mariadb_db_config.sql, mariadb_user_creation.sql' file needs to be executed manually (n)?"
info_provide_root_user_1="Please provide database admin credentials of server "
info_provide_root_user_2=" to create database "

admin_new_password="Please enter Admin password."
connection_successful="Connection Successful."
connection_error="Unable to connect to database by given credentials. Please re-enter database details."
connection_error_database="Unable to connect to database by given credentials. Please re-enter database details of "
connection_error_root="Unable to connect to database by given credentials. Please re-enter database details of database admin."

# Files not copied during Upgrade from 2019.1 to 2022.1.00
check_Config_properties="Checking if config.properties exists in SharedFolders during upgrade."
copying_Config_properties="Copying the config.properties in SharedFolders."
error_copy_Config_properties="Error while copying the config.properties file."
file_Config_properties_success_copied="config.properties file copied successfully."
file_Config_properties_exists="config.properties file already exists in SharedFolders."

#Success and error messages while installing dependencies
info_install_start="========== Installing "
info_upgrade_start="========== Upgrading "
info_hiphens=" ========== "
info_build_creation="Creating build for "
success_build_creation="Build successfully created for "
error_build_creation="Error occurred while creating build for  ."
info_build_make_file="Building the Make file for "
success_make_file_build="Make file built successfully for "
error_make_file_build="Error occurred while building the Make file for "
info_building_library="Building the library and shared library for "
success_building_library="Libraries built successfully for "
error_building_library="Error occurred while building the libraries for "
info_install_library="Installing the libraries for "
success_install_library="Libraries installed successfully for "
error_install_library="Error occurred while installing the libraries for "
info_configure_run_time_bindings="Configuring run time bindings for "
success_configure_run_time_bindings="Bindings configured successfully for "
error_configure_run_time_bindings="Error occurred while configuring the bindings for "
error_creating_m4_folder="Error occurred while creating m4 folder for "
info_extracting="Extracting the tar file for "
error_extracting_tar="Error occurred while extracting the tar file for "
error_copying_cpp_file="Error occurred while copying svutil.cpp file."
error_cpp_file="svutil.cpp file doesn't exist. Hence tesseract can't be installed."
error_folder=" folder doesn't exist. Hence "
error_deleting_folder="Error occurred while deleting folder "
info_already_installed=" is already installed on the system."
info_please_wait=". Please wait..."
info_installed_successfully=" installed successfully =========="
info_upgraded_successfully=" upgraded successfully =========="

#Info, success and error message while installing OmniPage
info_importing_nuance_key="Importing the OmniPage public key. Please wait..."
error_importing_nuance_key="Error occurred while importing the public key."
success_importing_nuance_key="OmniPage public key imported successfully."
info_verifying_debian_package="Verifying the OmniPage Debian package. Please wait..."
error_verifying_debian_package="Error occurred verifying the OmniPage Debian package."
success_verifying_debian_package="OmniPage Debian package verified successfully."
info_install_binaries_nuance="Installing binaries for OmniPage. Please wait..."
error_install_binaries_nuance="Error occurred while installing binaries for OmniPage."
success_install_binaries_nuance="Binaries successfully installed for OmniPage."
info_install_dev_files_nuance="Installing the development files for OmniPage. Please wait..."
error_install_dev_files_nuance="Error occurred while installing development files for OmniPage."
success_install_dev_files_nuance="Development files successfully installed for OmniPage."

#Info, success and error message while installing Noto Font
info_install_noto_fonts_mono="Installing Noto Font (mono). Please wait..."
error_install_font_files_mono="Error occurred while installing Noto Font (mono)."
success_install_font_files_mono="Noto Font (mono) successfully installed."
info_install_noto_fonts_sans="Installing Noto Font (sans). Please wait..."
error_install_font_files_sans="Error occurred while installing Noto Font (sans)."
success_install_font_files_sans="Noto Font (sans) successfully installed."
info_install_noto_fonts_serif="Installing Noto Font (serif). Please wait..."
error_install_font_files_serif="Error occurred while installing Noto Font (serif)."
success_install_font_files_serif="Noto Font (serif) successfully installed."

#Success and error messages while installing Checkinstall.
info_install_checkinstall="========== Installing Checkinstall =========="
info_extracting_tar_checkinstall="Extracting the tar file for Checkinstall. Please wait..."
error_extracting_tar_checkinstall="Error occurred while extracting the tar file for Checkinstall."
error_checkinstall_folder="Checkinstall folder doesn't exist. Hence Checkinstall installation failed."
error_checkinstall_tar_not_exist="Checkinstall.tar.gz doesn't exist. Hence Checkinstall installation failed."
info_building_library_checkinstall="Building the library and shared library versions for Checkinstall. Please wait..."
success_building_library_checkinstall="Libraries built successfully for Checkinstall."
error_building_library_checkinstall="Error occurred while building the libraries for Checkinstall."
info_package_creation_checkinstall="Tracking installation of local software and creating a binary package management software for Checkinstall."
info_package_creation="Tracking installation of local software and creating a binary package management software for "
success_package_creation_checkinstall="Package successfully created for Checkinstall."
success_package_creation="Package successfully created for "
error_package_creation_checkinstall="Error occurred while creating the packages for Checkinstall."
error_package_creation="Error occurred while creating the packages for "
info_configure_run_time_bindings_checkinstall="Configuring run time bindings for Checkinstall."
success_configure_run_time_bindings_checkinstall="Bindings configured successfully for Checkinstall."
error_configure_run_time_bindings_checkinstall="Error occurred while configuring bindings for Checkinstall."
error_deleting_checkinstall_folder="Error occurred while deleting Checkinstall folder."
info_checkinstall_already_installed="Checkinstall is already installed on the system."
error_creating_checkinstall_sources_folder="Error occurred while creating /root/rpmbuild/SOURCES folder."
error_creating_link_checkinstall="Error occurred while creating link for Checkinstall."
checkinstall_installed_successfully="========== Checkinstall installed successfully ======="

#Success and error messages while installing LibreOffice.
info_install_libreoffice="========== Installing LibreOffice =========="
info_upgrade_libreoffice="========== Upgrading LibreOffice =========="
info_extracting_tar_libreoffice="Extracting the tar file for LibreOffice. Please wait..."
error_extracting_tar_libreoffice="Error occurred while extracting the tar file for LibreOffice."
error_libreoffice_folder="LibreOffice folder doesn't exist. Hence LibreOffice installation failed."
error_libreoffice_tar_not_exist="LibreOffice.tar.gz doesn't exist. Hence LibreOffice installation failed."
error_deleting_libreoffice_folder="Error occurred while deleting LibreOffice folder."
info_libreoffice_already_installed="LibreOffice is already installed on the system."
info_install_binaries_libreoffice="Installing binaries for LibreOffice. Please wait..."
error_install_binaries_libreoffice="Error occurred while installing binaries for LibreOffice."
success_install_binaries_libreoffice="Binaries successfully installed for LibreOffice."
error_creating_link_libreoffice="Error occurred while creating link for LibreOffice."
libreoffice_installed_successfully="========== LibreOffice installed successfully =========="
libreoffice_upgraded_successfully="========== LibreOffice upgraded successfully =========="

#Success and error messages while installing Wkhtmltopdf.
info_install_wkhtmltopdf="========== Installing Wkhtmltopdf =========="
info_upgrade_wkhtmltopdf="========== Upgrading Wkhtmltopdf =========="
info_wkhtmltopdf_already_installed="Wkhtmltopdf is already installed on the system."
info_install_binaries_wkhtmltopdf="Installing binaries for Wkhtmltopdf. Please wait..."
error_install_binaries_wkhtmltopdf="Error occurred while installing binaries for Wkhtmltopdf."
success_install_binaries_wkhtmltopdf="Binaries successfully installed for Wkhtmltopdf."
error_creating_link_wkhtmltopdf="Error occurred while creating link for Wkhtmltopdf."
wkhtmltopdf_installed_successfully="========== Wkhtmltopdf installed successfully =========="
wkhtmltopdf_upgraded_successfully="========== Wkhtmltopdf upgraded successfully =========="

#Messages to be displayed while installing Ephesoft application.
error_ephesoft_installation_file_not_exist="$caption_EphesoftTransact installation file doesn't exist in current working directory. Please make sure that $ephesoft_installation_file file exists."
info_enter_application_path="Enter absolute installation path for $caption_EphesoftTransact installation."
error_invalid_path="Please enter valid absolute path."
error_invalid_file_path="Please enter valid file path."
error_creating_ephesoft_directory="Could not create directory at specified path. Please make sure user has permission to create a folder at specified path."
info_ephesoft_folder_already_exists="File or Directory having name $caption_EphesoftTransact already exists. Do you want to overwrite(y/n)?"
info_overwriting_ephesoft_folder="Overwriting the existing folder."
info_overwriting_application_backup_folder="Overwriting the application backup folder."
info_assigning_permission_folder="Assigning read, write and execute permissions to folder. Please wait..."
error_assigning_permission_installation_directory="Error in assigning permission to installation directory."
info_extracting_ephesoft_tar="Extracting the $caption_EphesoftTransact tar file. Please wait..."
error_extracting_ephesoft_tar="Error occurred while extracting tar file."
info_use_existing_shared_folders="Do you want to use existing SharedFolders(y/n)? Selecting y will not install SharedFolders. Please make sure that SharedFolders is already present on your/remote system."
info_shared_folder_installed="SharedFolders will be installed at "
info_change_shared_folder_path=". Do you want to change the SharedFolders path (y/n)?"
error_copying_shared_folders="Error occurred while copying $caption_EphesoftTransact SharedFolders."
info_enter_mounted_shared_folder_path="Please enter the existing SharedFolders path."
info_directory_not_exist="Given directory doesn't exist at specified path. Hence creating directory at the required path."
error_creating_directory_at_path="Could not create directory at specified path. Please make sure user has permission to create a folder at specified path."
success_creating_directory="Directory successfully created at specified path."
info_path_already_exist="Path already exists."
info_enter_path_shared_folders="Please enter the path for the SharedFolders."
info_assigning_shared_folder_permission="Assigning read, write and execute permissions to SharedFolders. Please wait..."
info_copying_shared_folders_to_path="Copying SharedFolders to the required path."
error_copying_shared_folders_to_path="Unable to copy the SharedFolders to the desired path."
error_removing_shared_folders="Error occurred while removing SharedFolders from extracted $caption_EphesoftTransact folder."
enter_tomcat_server_port_number="Please enter the port number on which you want to run the tomcat server."
info_file_already_exists="File having the same name already exists. Do you want to overwrite(y/n)?"
info_replacing_properties_file_path="Updating paths in properties file. Please wait..."
error_deleting_shared_folders="Error occurred while deleting SharedFolders."
ephesoft_already_exists="$caption_EphesoftTransact application already exists at "
shared_folders_already_exists="SharedFolders already exists at "
error_enabling_tomcat_port="Error occurred while enabling the tomcat port."
error_enabling_database_port="Error occurred while enabling the database port."
error_assigning_permission_shared_folders="Error occurred while assigning read, write and execute permissions to $caption_EphesoftTransact SharedFolders. Please assign permissions manually."
info_hostname="Setting server name as $system_name in property files. Do you want to change it(y/n)?"
enter_hostname="Enter the hostname/IP:"
enter_oracle_hostname="Enter the oracle hostname/IP:"
error_creating_ephesoft_directory="Error occurred while creating $caption_EphesoftTransact directory."
error_creating_saveddashboard_directory="Error occurred while creating SavedDashboards directory."
error_creating_files_to_learn_directory="Error occurred while creating files_to_learn directory."
error_creating_customPluginJars_directory="Error occurred while creating customPluginJars directory."
error_occurred_while_deleting_saveddashboard="Error occurred while deleting SavedDashboards directory."
info_copying_ephesoft_folder="Copying the $caption_EphesoftTransact folder inside installation directory. Please wait..."
error_copying_application_folder="Error occurred while copying $caption_EphesoftTransact Application folder inside $caption_EphesoftTransact installation directory."
info_extracting_python="Extracting python tar file. Please wait..."
error_extracting_python_folder="Error occurred while extracting $python_folder tar file."
error_copying_reports_folder="Error occurred while copying EphesoftReports folder inside $product_name_message installation directory."
error_copying_dependencies_file_redhat="Error occurred while copying $caption_EphesoftTransact Red Hat dependencies file inside $product_name_message installation directory."
error_copying_dependencies_file_ubuntu="Error occurred while copying $caption_EphesoftTransact Ubuntu dependencies file inside $product_name_message installation directory."
error_copying_dependencies_upgrade_ephesoft_jar="Error occurred while copying UpgradeEphesoft.jar file inside $product_name_message installation directory."
error_copying_dependencies_folder="Error occurred while copying $caption_EphesoftTransact Dependencies folder inside $product_name_message installation directory."
error_copying_licenses_folder="Error occurred while copying $caption_EphesoftTransact Licenses folder inside $product_name_message installation directory."
error_copying_version_folder="Error occurred while copying $caption_EphesoftTransact Version folder inside $product_name_message installation directory."
error_copying_javaappserver_folder="Error occurred while copying $caption_EphesoftTransact JavaAppServer folder inside $product_name_message installation directory."
error_copying_utility_folder="Error occurred while copying $caption_EphesoftTransact Utility folder inside $product_name_message installation directory."
error_copying_certs_folder="Error occurred while copying $caption_EphesoftTransact Certs folder inside $product_name_message installation directory."
error_copying_readme_file="Error occurred while copying $caption_EphesoftTransact ReadMe.txt file inside $product_name_message installation directory."
error_copying_nuance_ocr_file="Error occurred while copying OmniPageOCR file."
error_copying_nuance_compression_file="Error occurred while copying OmniPagePdfCompression file."
error_copying_nuance_pdf_to_tif_file="Error occurred while copying OmniPagePDFToTIF file."
error_deleting_ephesoft_from_extracted_dir="Error occurred while deleting $product_name_message folder from extracted directory."
error_generating_license_info_file="Error occurred while generating details.properties file."
info_install_tesseract_required="Do you want to install Tesseract? Please enter a valid option(y/n)."
error_tar_not_exist=" file doesn't exist. Hence "
error_installation_failed=" installation failed."
error_deleting_shared_folders_in_application_backup="Error occurred in deleting shared folders from application backup folder."
error_deleting_tmp_directory="Error occurred while deleting tmp directory in Dependencies folder."
error_deleting_temp_directory="Error occurred while deleting temp directory in Dependencies folder."
error_occurred_while_deleting_jtidy="Error occurred while deleting jtidy jar file."
error_occurred_while_deleting_aspectjrt="Error occurred while deleting aspectjrt-1.6.0.jar file."
error_occurred_while_deleting_aspectjweaver="Error occurred while deleting aspectjweaver-1.6.2.jar file."
error_occurred_while_deleting_im4java="Error occurred while deleting im4java-1.2.0.jar file."
error_occurred_while_deleting_ehcache_core="Error occurred while deleting ehcache-core-2.1.0.jar file."
error_occurred_while_deleting_ehcache_explicitlocking="Error occurred while deleting ehcache-explicitlocking-0.2.jar file."
error_occurred_while_deleting_ehcache_spring="Error occurred while deleting ehcache-spring-annotations-1.1.2.jar file."
error_occurred_while_deleting_dozer="Error occurred while deleting dozer-5.5.1.jar file."
error_occurred_while_deleting_jackson_annotations="Error occurred while deleting jackson-annotations-2.2.3.jar file."
error_occurred_while_deleting_jackson_core="Error occurred while deleting jackson-core-2.2.3.jar file."
error_occurred_while_deleting_jackson_databind="Error occurred while deleting jackson-databind-2.2.3.jar file."
error_occurred_while_deleting_javassist="Error occurred while deleting javassist-3.12.0.GA.jar file."
error_occurred_while_deleting_poi="Error occurred while deleting poi-3.15.jar file."
error_occurred_while_deleting_poi_contrib="Error occurred while deleting poi-contrib-3.5-FINAL.jar file."
error_occurred_while_deleting_mysql_connector="Error occurred while mysql-connector-java-5.1.31-bin.jar file."
error_occurred_while_deleting_jai_imageio="Error occurred while deleting jai_imageio-1.1.jar file."
error_occurred_while_deleting_vtd_xml="Error occurred while deleting vtd-xml-2.11.jar file. "
error_occurred_while_deleting_weka_stable_xml="Error occurred while deleting weka-stable-3.6.7.jar file. "
error_libreoffice_folders="Error occurred while installing LibreOffice. LibreOffice folder does not exists."
error_wkhtmltopdf_folders="Error occurred while installing Wkhtmltopdf. Wkhtmltopdf folder does not exists."
error_wkhtmltopdf_binary="Error occurred while installing Wkhtmltopdf. Wkhtmltopdf binary does not exists."
error_occurred_while_creating_temp_directory="Error occurred while creating temp directory."
error_occurred_while_deleting_temp_directory="Error occurred while deleting temp directory."
error_mariadb_copy_reporting="Error copying dcma-reporting files for MariaDB."
error_mariadb_copy_data_access_files="Error copying dcma-data-access files for MariaDB."

#Exit from script message
exiting_script="Exiting from script..."

#MariaDB installation
#Mysql database is not supported by application anymore.Previously both mysql and mariadb was supported thats why variables contain name mysql
fresh_installation_message_oracle="Do you want to create Oracle database schema(y/n)? Press y to create new Oracle database schema or n to use existing Oracle schema."
invalid_option="Please enter a valid option(y/n)."
invalid_input_mysql="Please enter a valid input. Database user name can contain only alphanumeric characters and underscores. Length must be from 1 to 16."
invalid_input_mysql_policy="Database user name does not follow the recommended user name policies. Database user name can contain only alphanumeric characters and underscores. Length must be from 1 to 16. Please enter y to continue and n to re-enter."
invalid_input_mysql_password="Please enter a valid input. Database password can contain alphanumeric and _!@#$%^&*?><- characters. Length must be from 1 to 12."
invalid_input_mysql_password_policy="Password does not follow the recommended password policies. Database password can contain alphanumeric and _!@#$%^&*?><- characters. Length must be from 1 to 12. Please enter y to continue and n to re-enter."
invalid_input_mysql_database="Please enter a valid input. Database name contains alphanumeric and underscore. The maximum length is of 64 characters."
new_db_port="Enter the database port number:"
port_in_use="Port number is already in use. Enter the new port number."
old_username="Enter the database username:"
old_db="Enter the application database name:"
old_port="Enter the database port number:"
old_password="Enter the database password:"
old_ip="Enter system IP/Name on which MariaDB is installed:"
old_report_db="Enter the report database name:" 
old_report_archive_db="Enter the report archive database name:" 
new_password="Enter the password for the root user:"
new_dbname="Enter the application database name:"
new_port="Enter the database port number:"
new_report_db="Enter the report database name:"
new_report_archive_db="Enter the report archive database name:"
invalid_port_number="Please enter valid port number. Port number should be an integer greater than 1024 and smaller than 65535."
read_password_again="Please re-enter the password:"
mismatch_password="Password don't match. Please enter the correct password."
back_up_sql_file="Taking the backup of my.cnf file for MariaDB."
mysql_already_installed="MariaDB is already installed on the system."
confirm_entered_details="Press y if you want to change the details, press n to continue."
info_replacing_path_properties_file="Updating paths in properties file. Please wait..."
error_creating_database="Error occurred while creating application and report database."
error_creating_reportdb_view="Error occurred while creating report database views."
error_creating_archivedb_view="Error occurred while creating archive database views."
error_running_cleanup="Error occurred while running $caption_EphesoftTransact cleanup."
error_running_report_cleanup="Error occurred while running Report cleanup."
error_creating_application_user="Error occurred while creating application user."
error_running_purge_procedure="Error occurred while creating purge procedure."
error_running_dashboard_procedure="Error occurred while creating dashboard procedure."

#Oracle installation messages
oracle_already_installed="Oracle is already installed on the system."
error_oracle_copy_server_xml="Error copying server.xml for Oracle."
error_oracle_copy_reporting="Error copying dcma-reporting files for Oracle."
error_oracle_copy_data_access_files="Error copying dcma-data-access files for Oracle."
error_oracle_copy_data_workflows_files="Error copying dcma-workflows files for Oracle."
error_oracle_copy_ephesoftreports_files="Error copying EphesoftReports files for Oracle."

#Error in case if script is not run as super user.
error_not_root_user="Please run $caption_EphesoftTransact installation script with super user permissions."

#Message for allowing firewall settings for tomcat port and database port.
firewall_enable_tomcat_port="Enabling access for tomcat port"
firewall_enable_database_port="Enabling access for database port"

#Message to be displayed for preview version message
ephesoft_preview_version=""

info_installing_updating="Installing/Updating "
info_for_ephesoft=" for $caption_EphesoftTransact."
error_occurred_replacing_property_file_values="Error occurred while replacing values for "
error_occurred_moving="Error occurred while copying "
error_installing="Error in installing "
info_creating_rpm_file="Creating RPM file for "
success_creation_rpm_file="RPM file created successfully for "
error_creation_rpm_file="Error occurred while creating RPM file for "

info_creating_deb_file="Creating DEB file for "
success_creation_deb_file="DEB file created successfully for "
error_creation_deb_file="Error occurred while creating DEB file for "
info_firewall_ufw_is_inactive="Firewall ufw is inactive."
info_firewall_cmd_is_inactive="firewall-cmd is inactive."
info_firewall_cmd_is_active="firewall-cmd is active."
error_occurred_enabling_ufw="Error occurred while enabling firewall ufw."
error_occurred_restarting_ufw="Error occurred while restarting firewall ufw."
error_occurred_reloading_firewall_cmd="Error occurred while reloading firewall-cmd."
installing="Installing"
error_copying_libreoffice_folder="Error occurred while copying LibreOffice folder."
info_selecting="Selecting "
info_selecting_cause_issue=" operating system may cause problems during installation as installer detected "
info_selecting_want_to_continue=" as installed operating system. Do you want to continue(y/n)?"

#Ephesoft service messages
info_copying_service_file="Copying service file."
error_deleting_existing_service="Error occurred while deleting existing $product_name_message service."
error_adding_ephesoft_service="Error occurred while adding $product_name_message service."
success_creating_ephesoft_service="$product_name_message service created successfully."
error_in_removing="Error in removing"
error_in_removing_dependency_conf_file="from configuration file in Ubuntu operating system."

error_config_file="Error in user configuration file in "
#License Messages
new_line=""
registration_information="Registration Information"
print_name="Name : "
print_company="Company : "
print_department="Department : "
print_street="Street : "
print_city="City : "
print_country="Country : "
print_state="State : "
change_registration_info="Do you want to change the entered user registration information?(y/n)"

#Permissions error

error_assigning_persmission="Error occurred while assigning read, write and execute permissions to $product_name_message "

#Uninstallation messages
info_uninstalling_imagemagick="Do you want to uninstall Imagemagick? Please enter a valid option(y/n)."
info_uninstalling_graphicsmagick="Do you want to uninstall Graphicsmagick? Please enter a valid option(y/n)."
info_uninstall_libreoffice="Do you want to uninstall LibreOffice? Please enter a valid option(y/n)."
info_uninstall_wkhtmltopdf="Do you want to uninstall Wkhtmltopdf? Please enter a valid option(y/n)."
info_uninstall_tesseract="Do you want to uninstall Tesseract? Please enter a valid option(y/n)."
info_uninstall_nuance="Do you want to uninstall OmniPage? Please enter a valid option(y/n)."
info_uninstall_leptonica="Uninstalling Leptonica. Please wait..."
info_uninstall_imagemagick_wait="Uninstalling Imagemagick. Please wait..."
info_uninstall_graphicsmagick_wait="Uninstalling Graphicsmagick. Please wait..."
info_uninstall_libreoffice_wait="Uninstalling LibreOffice. Please wait..."
info_uninstall_wkhtmltopdf_wait="Uninstalling Wkhtmltopdf. Please wait..."
info_uninstall_tesseract_wait="Uninstalling Tesseract. Please wait..."
info_uninstall_nuance_wait="Uninstalling OmniPage. Please wait..."
info_uninstall_poco="Uninstalling POCO. Please wait..."

success_uninstall_imagemagick="Imagemagick uninstalled successfully."
success_uninstall_graphicsmagick="Graphicsmagick uninstalled successfully."
success_uninstall_libreoffice="LibreOffice uninstalled successfully."
success_uninstall_wkhtmltopdf="Wkhtmltopdf uninstalled successfully."
success_uninstall_leptonica="Leptonica uninstalled successfully."
success_uninstall_tesseract="Tesseract uninstalled successfully."
success_uninstall_poco="POCO uninstalled successfully."
success_uninstall_nuance="OmniPage uninstalled successfully."
successful_uninstall="uninstalled successfully."

error_uninstall_imagemagick="Error occurred while uninstalling Imagemagick."
error_uninstall_graphicsmagick="Error occurred while uninstalling Graphicsmagick."
error_uninstall_libreoffice="Error occurred while uninstalling LibreOffice."
error_uninstall_wkhtmltopdf="Error occurred while uninstalling Wkhtmltopdf."
error_uninstall_leptonica="Error occurred while uninstalling Leptonica."
error_uninstall_tesseract="Error occurred while uninstalling Tesseract."
error_uninstall_poco="Error occurred while uninstalling POCO."
error_uninstall_nuance="Error occurred while uninstalling OmniPage."
error_deleting="Error occurred while deleting"
error_uninstall="Error occurred while uninstalling"
error_deleting_libreoffice_link="Error occurred while deleting link for LibreOffice."
error_deleting_mergexml_jar="Error occurred while deleting XMLMerger.jar. It can be safely deleted manually."

# Non root user messages
info_use_existing_user="Do you want to use existing user?"
info_existing_user_name="Enter exisiting user name :"
info_new_user_name="Enter new user name :"
info_existing_user_not_found=" not found. Please try again."
info_existing_user_already_exists=" already exists. Please try again."
info_existing_user_creation_error="An error occurred while creating user. Please try again."
info_existing_user_set_password="Do you want to set password for "
info_existing_user_enter_password="Enter password for "
info_existing_user_set_password_error="An error occurred while setting password. Please try again."
info_existing_user_set_group="Please enter the primary group. If group not exist, it will be created :"

install_software=( imagemagick graphicsmagick leptonica tesseract omnipage poco notofonts)

error_invalid_option_selected="Please enter a valid option(y/n)."
error_not_exists="does not exists at given path."
error_creating_java_path="Error occurred while creating java path ($user_java_path). Please create it manually before installing license."
error_creating_java_system_prefs_path="Error occurred while creating java system prefs path ($user_java_system_prefs_path). Please create it manually before installing license."
error_occurred_while_moving_systemPrefs_file="Error occurred while moving system prefs license file from JRE to ($user_java_system_prefs_path). Please install license again."

error_deleting_convert_backup_file="Error occurred while deleting convert_backup file."

# PKI Messages
certs_folder_name=Certs
info_import_pki_configuration_from_property="Do you want to import PKI configuration from properties file?(y/n)"
error_copying_server_cert="Error occurred while copying server certificate file."
error_copying_keystore_cert="Error occurred while copying keystore certificate file."
error_copying_ca_cert="Error occurred while copying ca certificate file."
info_authentication_started="========== Authentication Configuration =========="
info_authentication_completed_successfully="========== Authentication Configuration completed successfully =========="
info_authentication_completed="Authentication Configuration completed."

invalid_role_base="Please enter a valid role base."

# FORM messages
error_copying_form_https_cert="Error occurred while copying HTTPS keystore certificate file."
# Default Values
pki_connector_ssl_protocol=TLS
pki_connector_ssl_enabled_protocol="TLSv1.2+TLSv1.3"
pki_connector_chipper_text="TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA"

connector_protocol="http"

# This Property defines which type of connectivity is used,please enter
# 0 = LDAP
# 1 = MS Active Directory
# 2 = Tomcat
user_connection=2
realm_super_admin_group_name=admin
realm_connection_url=ldap://localhost:389
realm_connection_name=cn=Manager,dc=ephesoft,dc=com
realm_user_base=ou=people,dc=ephesoft,dc=com
realm_user_search=cn={0}
realm_user_sub_tree=true
realm_role_base=ou=groups,dc=ephesoft,dc=com
realm_role_name=cn
realm_role_sub_tree=true
realm_role_search=uniqueMember={0}

#Default Values for user-connectivity.properties and application.properties
user_super_admin_group_name=admin
update_super_admin_group=true
connectivity_url=ldap://localhost:389
connectivity_domain_component_name=ephesoft
connectivity_domain_component_organization=com
connectivity_username=cn=Manager,dc=ephesoft,dc=com
connectivity_password=secret
connectivity_groupSearchAttributeFilter=cn
connectivity_userSearchAttributeFilter=cn
ldap_user_base=ou=people
ldap_group_base=ou=groups
msactivedirectory_context_path=cn=Users
msactivedirectory_group_search_filter=""

#For finding the current version of operating system
current_os_version="NA"
os_supported="Lower"
compatible_os_file="Response-Files/compatible-os.properties"
source $compatible_os_file

#Variable used to replace @@UPGRADE_FLAG@@ in application_db_config.sql
is_upgrade_flag=0
#XML Merging
error_creating_backup_applicationcontext_xml="Error occurred while creating applicationContext.xml backup."
error_creating_backup_applicationcontextsecurity_xml="Error occurred while creating applicationContext-security.xml backup."
error_creating_backup_web_xml="Error occurred while creating web.xml backup."

# Sources message
info_upgrading_sources="Upgrading sources..."
success_upgrading_sources="Sources upgraded successfully."


#message for os version compatability check
warning_upper_version_of_os="Your operating system version is newer than the versions officially supported by $caption_EphesoftTransact. You may proceed with the installation, but $caption_EphesoftTransact may not work correctly. We highly recommend that you only install $caption_EphesoftTransact on supported operating system versions"
error_lower_version_of_os="Your operating system is not supported by $caption_EphesoftTransact"

# This array stores the software to be installed in the loop below. These software nearly installed from the same method.
software_to_be_installed=( imagemagick graphicsmagick leptonica tesseract omnipage poco notofonts)

# This array stores the software list whose installed version is to be checked in the system.
software_already_installed=( libreoffice wkhtmltopdf imagemagick graphicsmagick leptonica tesseract omnipage poco mariadb)

# This array corresponds with software_to_be_installed. This is the name which is to be shown in the console.
name_of_software=( Imagemagick Graphicsmagick Leptonica Tesseract OmniPage Poco Notofonts)

hput () {
  eval hash"$1"='$2'
}

hget() {
  eval echo '${hash'"$1"'#hash}'
}

hgetTarValue() {  
  eval echo "$1"".tar.gz"
}

hgetUpgradeRequired() {
  eval echo "$1"_upgrade_required
}

put_version() {
    hput imagemagick ImageMagick-7.0.11-7
	hput graphicsmagick GraphicsMagick-1.3.33
    hput leptonica leptonica-1.76.0
    hput tesseract tesseract-3.04.00
    hput omnipage OmniPage
    hput poco poco-1.11.1
}

hput_installed () {
  eval hash"$1"='$2'
}

hget_installed() {
  eval echo '${hash'"$1"'#hash}'
}

imagemagick_upgrade_required=0
graphicsmagick_upgrade_required=0
leptonica_upgrade_required=0
tesseract_upgrade_required=0
nuance_upgrade_required=1
poco_upgrade_required=1
omnipage_upgrade_required=1

installed_version4502=4.5.0.2
installed_version4501=4.5.0.1

nuance_version=22.0
# New rpm software version to be installed through script.
imagemagick_rpm_package=ImageMagick-7.0.11-7-1.x86_64
graphicsmagick_rpm_package=GraphicsMagick-1.3.33-1.x86_64
tesseract_rpm_package=tesseract-3.04.00-1.x86_64
leptonica_rpm_package=leptonica-1.76.0-1.x86_64
poco_rpm_package=poco-1.4.6p3-1.x86_64
nuance_devel_rpm_package=omnipage-csdk-devel-22.0-22456.2100.x86_64
nuance_lib64_rpm_package=omnipage-csdk-lib64-22.0-22456.2100.x86_64
noto_fonts_mono=NotoSans
noto_fonts_serif=NotoSerif
noto_fonts_sans=NotoMono

nuance_lib64_library_folder_name=omnipage-csdk-lib64-22.0
nuance_shared_library_path=$shared_library_path$nuance_lib64_library_folder_name

# New debian software version to be installed through script.
imagemagick_deb_version=7.0.11
graphicsmagick_deb_version=1.3.33
tesseract_deb_version=3.04.00
leptonica_deb_version=1.76.0
poco_deb_version=1.4.6p3
nuance_devel_deb_version=22.0-22456.2100
nuance_devel_deb_package=omnipage-csdk-devel_22.0-*_amd64.deb
nuance_lib64_deb_version=22.0-22456.2100
nuance_lib64_deb_package=omnipage-csdk-lib64_22.0-*_amd64.deb
python_version=Python-3.6.6

#Path to config file of version alias
version_alias="Response-Files/version-alias.properties"

#Function to check weather a alias is present in config file or not
check_if_alias_present()
{

        alias_installed_version=$(cat $version_alias | grep "$ephesoft_installed"|head -1|cut -d'=' -f2)
        alias_current_version=$(cat $version_alias | grep "$ephesoft_version"|head -1|cut -d'=' -f2)

        if [ -z "$alias_installed_version" ]
        then
                echo "Current Version $temp_ephesoft_installed" >> $ephesoft_log_file_name  2>&1
        else
				echo "Current Version $temp_ephesoft_installed with using alias as $alias_installed_version" >> $ephesoft_log_file_name  2>&1
                temp_ephesoft_installed=$alias_installed_version
        fi

        if [ -z "$alias_current_version" ]
        then
                echo "New Version $temp_ephesoft_version" >> $ephesoft_log_file_name  2>&1
        else
				echo "New Version $temp_ephesoft_version with using alias as $alias_current_version" >> $ephesoft_log_file_name  2>&1
                temp_ephesoft_version=$alias_current_version
        fi
}
#Function to check to current version of operating system
check_current_os_version()
{
        if [ -f /etc/redhat-release ]
        then
	        current_os_version=$(cat /etc/redhat-release|sed -e 's/ //g'|sed -e 's/[^0-9.]//g'|cut -f1,2 -d'.')
		elif [ -f /etc/os-release ]
        then
	        current_os_version=$(cat /etc/os-release |grep VERSION_ID= |head -1|cut -d'=' -f2|sed -e 's/^"//' -e 's/"$//')
        else
        echo "Undefined OS"
        fi
}
#Function to check weather the operating system lies in our min max range or not.
check_is_valid_os_version()
{
        if [ 1 -eq "$(echo "${current_os_version} >= ${1} && ${current_os_version}<=${2}" | bc)" ]
        then
                os_supported="Valid"
        elif [ 1 -eq "$(echo "${current_os_version} < ${1}" | bc)" ]
        then
                os_supported="Lower"
        else
                os_supported="Upper"
        fi

}
check_if_database_is_mysql()
{
	database_type=$(cat $installationDirectory/Dependencies/tmp/database.properties |grep "database="|cut -d'=' -f2)
	if [[ $database_type == "mysql" ]]
	then
		show_error_message_and_exit "The Install Wizard has detected that your environment contains a MySQL database. $caption_EphesoftTransact no longer supports MySQL. Please refer to the upgrade procedures for information on replacing MySQL with MariaDB and migration procedures. Ephesoft recommends MariaDB version $mariadb_version_recommend, but should function with all stable versions of the 10.6 series."
	fi
}
#Function to find the current version of mariadb
check_current_mariadb_version()
{
	check_if_database_is_mysql
	current_mariadb_version=$(cat $installationDirectory/Dependencies/tmp/database.properties |grep "version="|cut -d'-' -f1|sed 's/[^0-9.]*//g')
	if [ -z "$current_mariadb_version" ]
	then
		current_mariadb_version=0
	fi
}
#Function to check wheather provided mariadb is valid or not
check_is_valid_mariadb_version()
{
	check_current_mariadb_version
	if [[ $use_silent_installer = "no" ]]
	then
		if version_gt $current_mariadb_version $mariadb_version_max; then
			echo $info_higher_version_of_mariadb
			echo "Do you want to continue [y/n]"
			while :
			do
                read -e -i "n" overwrite_character
				echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
                if [ $? != 0 ]
                then
                	echo $invalid_option
                	continue
                fi
                if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
                then
                	break;
                else
                	exit
                fi
        	done
		fi
	fi
	if version_gt $mariadb_version_min $current_mariadb_version; then
		show_error_message_and_exit "$error_unsupported_version_of_mariadb"
	fi
	is_valid_mariadb_version=y
}
#Function to Compare version with multiple dots(.)
#Given 2 args as input
#Returns true if first argument is greater then second, else false
function version_gt() { 
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; 
}
#Function to Restore files of shared folder
replace_old_files_of_shared_folder()
{
	current_date=`date +"%Y-%m-%d"`
	source "$home_directory_path/Response-Files/upgrade/replace_new_files.properties"
	for path_to_replace in $(echo $shared_folder_paths_to_replace | sed "s/,/ /g")
	do
		backup_command="mv $2/$path_to_replace $2/$path_to_replace-${current_date}"
		copy_command="cp -a $1/Application-backup/SharedFolders/$path_to_replace $2/$path_to_replace"
		echo $backup_command >> $ephesoft_log_file_name  2>&1
		${backup_command} >> $ephesoft_log_file_name  2>&1
		echo $copy_command >> $ephesoft_log_file_name  2>&1
		${copy_command}  >> $ephesoft_log_file_name  2>&1
	done
}
#Takes the input from the user
readinput() {
     while [ 0 ]
     do
     	read input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
        if [ "$input" != '' ] 
        then
          break
        fi
     done
}

readinput_with_default_value() {
     while [ 0 ]
     do
		read -e -i "$2" input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
        if [ "$input" != '' ] 
        then
          break
        fi
     done
}

# Comparing the version for patch installer. First argument is new_version. Second argument is old_version. This function returns is_patch_version_check_pass=yes if it satisfies version check else no.
vercomp_patch () {
    if [[ $1 == $2 ]]
    then
	is_patch_version_check_pass=no
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done

    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
    done
    
    if ((10#${ver1[0]} == 10#${ver2[0]})) 
    then
      
      if ((10#${ver1[1]} > 10#${ver2[1]}))
      then
	is_patch_version_check_pass=no
      elif ((10#${ver1[1]} == 10#${ver2[1]}))
      then
	if ((10#${ver1[2]} > 10#${ver2[2]}))
	then
	  is_patch_version_check_pass=no
	elif ((10#${ver1[2]} == 10#${ver2[2]}))
	    then
		    if ((10#${ver1[3]} > 10#${ver2[3]}))
		    then
		      is_patch_version_check_pass=yes
		    else
		      is_patch_version_check_pass=no
		    fi
	else
	  is_patch_version_check_pass=no
	fi
      
      else
	is_patch_version_check_pass=no
      fi
    
    else
      is_patch_version_check_pass=no
    fi
}

# Comparing the version for upgrading. First argument is new_version. Second argument is old_version. This function returns is_upgrade_version_check_pass=yes if it satisfies version check else no.
vercomp_upgrade () {
    if [[ $1 == $2 ]]
    then
# 	is_upgrade_version_check_pass=no
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done

    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
    done
    
    if ((10#${ver1[0]} > 10#${ver2[0]})) 
    then
	is_upgrade_version_check_pass=yes
	elif ((10#${ver1[0]} == 10#${ver2[0]})) 
	then
	  
	  if ((10#${ver1[1]} > 10#${ver2[1]}))
	  then
	    is_upgrade_version_check_pass=yes
	  elif ((10#${ver1[1]} == 10#${ver2[1]}))
	  then
	    if ((10#${ver1[2]} > 10#${ver2[2]}))
	    then
	      is_upgrade_version_check_pass=yes
	    elif ((10#${ver1[2]} == 10#${ver2[2]}))
		then
			if ((10#${ver1[3]} > 10#${ver2[3]}))
			then
			  is_upgrade_version_check_pass=yes
			else
			  is_upgrade_version_check_pass=no
			fi
	    else
	      is_upgrade_version_check_pass=no
	    fi
	  
	  else
	    is_upgrade_version_check_pass=no
	  fi
	
	else
	  is_upgrade_version_check_pass=no
    fi
}




#Takes the input from the user user name, password
readinput_mysql_username() {
     while [ 0 ]
     do
     	readinput input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
        if [[ "$input" =~ [^_a-zA-Z0-9] ]] || [ ${#input} -eq 0 ]
		then
		  echo $invalid_input_mysql_policy
		  
		while :
		do
		if [ $use_silent_installer == "no" ]
		then
			read -e -i "n" want_to_continue
		else
			want_to_continue="y"
			echo "$want_to_continue"
		fi
		echo "$want_to_continue" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
				show_message $invalid_option
				pass=0
				continue
		else
				pass=1
				break
				
		fi
		done
			if [ $want_to_continue = 'Y' -o $want_to_continue = 'y' ]
			then
					break
			else
					echo "Enter user name:"
					continue
			fi
		  
		else
		  break
		fi
     done
	 
	 # echo $input
	 
}
#Takes the input from the user password
readinput_mysql_password() {
     while [ 0 ]
     do
     	readinput input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
		break
     done

}

#Takes the input from the user database name
readinput_mysql_database() {
     while [ 0 ]
     do
     	read -e -i $2 input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
        if [[ "$input" =~ [^_a-zA-Z0-9] ]] || [ ${#input} -eq 0 ] || [ ${#input} -gt 64 ]
		then
		  echo $invalid_input_mysql_database
		else
		  break
		fi
     done
}

#Takes the path as an input from the user.
take_input_path() {
    while [ 0 ]
     do
	   if [ $use_silent_installer == "no" ]
	   then
		read -e -i "$1" input
	   else 
		input="$2"
		echo "$input"
	   fi
	   input=$(echo "$input" | sed s#//*#/#g)
	   input=$(echo "$input" | sed 's#/*$##')
           echo "$input" | grep  '^\s*/\+[a-zA-Z0-9]\+[a-zA-Z0-9\_/"-]*\s*$' >> $ephesoft_log_file_name  2>&1 
           if [ $? = 0 ]
           then
              break
           else
              echo $error_invalid_path
           fi
     	
     done
}

#Takes the path as an input from the user for a file.
take_input_file_path() {
    while [ 0 ]
     do
	   if [ $use_silent_installer == "no" ]
	   then
		read -e -i "$1" input
	   else 
		input="$2"
		echo "$input"
	   fi
	   input=$(echo "$input" | sed s#//*#/#g)
	   input=$(echo "$input" | sed 's#/*$##')
	   if [ -f "$input" ]
	   then
		  break
	   else
		  echo $error_invalid_file_path
	   fi
     	
     done
}

#Spinner for long processes
spinner() {

    if [[ $is_upgrade == "y" ]] || [[ $patch_installer == "y" ]] && [[ $show_software_installation_message == "n" ]]
    then
	  printf "$2"
    else
	  printf "$2" #>> $ephesoft_log_file_name  2>&1 
    fi
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        if [[ $is_upgrade == "y" ]] || [[ $patch_installer == "y" ]] && [[ $show_software_installation_message == "n" ]]
        then
	    printf " [%c]  " "$spinstr"
        else
	    printf " [%c]  " "$spinstr" #>> $ephesoft_log_file_name  2>&1 
        fi
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        if [[ $is_upgrade == "y" ]] || [[ $patch_installer == "y" ]] && [[ $show_software_installation_message == "n" ]]
        then
	    printf "\b\b\b\b\b\b"
        else
	    printf "\b\b\b\b\b\b" #>> $ephesoft_log_file_name  2>&1 
        fi
        
    done
    if [[ $is_upgrade == "y" ]] || [[ $patch_installer == "y" ]] && [[ $show_software_installation_message == "n" ]]
    then
	printf "    \b\b\b\b"
    else
	printf "    \b\b\b\b" #>> $ephesoft_log_file_name  2>&1 
    fi
    echo
}

#Prints the message
show_message(){
  if [ $show_software_installation_message == "y" ]
  then
      echo $@
  else
      echo $@ >> $ephesoft_log_file_name  2>&1 
  fi
}

#Prints the error message and exits from script.
show_error_message_and_exit() {
	echo -e $1
	if [[ $use_silent_installer == "yes" ]]
	then
	  if [[ -f "$installation_log_file" ]]
	  then
	      delete_files_and_exit_if_error_occurred "$installation_log_file" "$error_deleting_installation_log_file"
	  fi
	  show_message $1 >> "$installation_log_file"
	  echo $status_variable=$failure_varable >> "$installation_log_file"
	fi	
	exit_script
}

#Exits from script.
exit_script() {
	echo $exiting_script
	exit 1
}


#Deletes the folder recursively and show message if any error occurred.
delete_files_and_exit_if_error_occurred() {

	rm -rf "$1" >> $ephesoft_log_file_name 2>&1
	if [ $? != 0 ] 
	then
		show_error_message_and_exit "$2"
	fi

}

#Deletes the folder recursively and show message if any error occurred.
delete_files_and_show_message_if_error_occurred() {

	rm -rf "$1" >> $ephesoft_log_file_name 2>&1
	if [ $? != 0 ] 
	then
		show_message $2
	fi
}

#Deletes the ser files.
delete_ser_and_show_message_if_error_occurred() {

	rm -rf $1 >> $ephesoft_log_file_name 2>&1
	if [ $? != 0 ] 
	then
		show_message $2
	fi
}


#Deletes the folder recursively and show message either in case of success/failure.
delete_files() {

	rm -rf $1 >> $ephesoft_log_file_name 2>&1
	if [ $? != 0 ]
	then
		show_message $2
	else
		show_message $3
	fi

}

#Extracts the tar file
extract_tar_file() {
	show_message $1
	if [ $operating_system = $ubuntu ]  && [ "$is_pv_installed" = "y" ]
	then
		pv -p $2 | tar xmzf - -C $3
		if [ $? != 0 ]
		then
			show_error_message_and_exit "$4"
		fi
	else
		tar -xmvf $2 -C $3 >> $ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
			show_error_message_and_exit "$4"
		fi
	fi
}

#Builds the make file
build_library() {
	show_message $1
   	make -s >> $ephesoft_log_file_name  2>&1
        if [ $? = 0 ]
        then
               show_message $2
        else
               show_error_message_and_exit "$3"
	fi
}

#Autobuilding leptonica
autobuild_leptonica() {
	./autobuild >> $ephesoft_log_file_name  2>&1
	if [ $? = 0 ]
	then
		   show_message "Successfullly autobuild of leptonica." >> $ephesoft_log_file_name  2>&1
	else
		   show_message "Error in auto building." >> $ephesoft_log_file_name  2>&1
	fi
}
#Creates the package
package_creation() {
	show_message $1
	if [ $operating_system = $redhat ]
	then
		make install SHELL="bash" >> $ephesoft_log_file_name  2>&1
		if [ $? = 0 ]
		then
			show_message $2
		else
			show_error_message_and_exit "$3"
		fi
	else if [ $operating_system = $ubuntu ]
	     then
		checkinstall -y >> $ephesoft_log_file_name  2>&1 
		if [ $? = 0 ]
		then
			show_message $2
		else
			show_error_message_and_exit "$3"
		fi
	      fi
	fi
}

#Configures run time dynamic bindings
configure_run_time_bindings() {
	show_message $1
        ldconfig >> $ephesoft_log_file_name  2>&1
        if [ $? = 0 ]
        then
        	 show_message $2
	else
		 show_error_message_and_exit "$3"
         fi
}

#Replaces the configuration parameter in Ephesoft configuration file.
replace_conf_parameters() {
	find  $ephesoft_config_directory_path -type f -name $ephesoft_configuration_file_name -exec sed -i "s|$1=.*|$1=$2|#g" {} \;
	if [ $? != 0 ] 
	then
		echo $error_replacing_ephesoft_config_file_params$1.
	fi
	eval $1="$2"
}


#Replaces the configuration parameter in Ephesoft update configuration file.
replace_update_conf_parameters() {
	find  $upgrade_configuration_file -type f -name $ephesoft_upgrade_configuration_file_name -exec sed -i "s|$1=.*|$1=$2|#g" {} \;
	if [ $? != 0 ] 
	then
		echo $error_replacing_upgrade_config_file_params$1.
	fi
}

#Replaces the configuration parameter in Ephesoft user configuration file.
replace_user_conf_parameters() {
	find  $ephesoft_user_registration_information_file -type f -name $ephesoft_user_registration_information_file_name -exec sed -i "s|$1=.*|$1=$2|#g" {} \;
	if [ $? != 0 ] 
	then
		echo $error_replacing_user_config_file_params$1.
	fi
}

#Replaces the configuration parameter in temp configuration file.
replace_temp_conf_parameters() {
	if [[ -f "$temp_directory/conf.properties" ]]
	then
		find  $temp_directory/conf.properties -type f -name conf.properties -exec sed -i "s|$1=.*|$1=$2|#g" {} \;  >> $ephesoft_log_file_name  2>&1
		if [ $? != 0 ] 
		then
			echo $error_replacing_temp_user_config_file_params$1.  >> $ephesoft_log_file_name  2>&1
		fi
	fi
}

#Checks for missing libraries that should be installed
configure() {
	show_message $1
		./configure >> $ephesoft_log_file_name  2>&1
        if [ $? = 0 ]
        then
              show_message $2
        else
	      show_error_message_and_exit "$3"
        fi
}

#Creates the rpm file. Keeps track of all files installed by a "make install" or equivalent, creates a Slackware, 
#RPM, or Debian package with those files, and adds it to the installed packages database, allowing for easy package removal or distribution.
create_rpm_file() {
	show_message $1
	checkinstall -R -y -install --exclude=/selinux,/selinux/context >> $ephesoft_log_file_name  2>&1
	if [ $? = 0 ]
	then
               show_message $2
	else
	       show_error_message_and_exit "$3"
	fi
}

#Configures run time dynamic bindings
configure_bindings() {
	show_message $1
	ldconfig $user_local_bin_path >> $ephesoft_log_file_name  2>&1
        if [ $? = 0 ]
        then
              show_message $2
        else
	      show_error_message_and_exit "$3"
        fi
}

#Checks for missing libraries that should be installed
configure_bindings_imagemagick() {
	show_message $1
	./configure --with-quantum-depth=8 --without-perl --with-gslib=yes >> $ephesoft_log_file_name  2>&1
        if [ $? = 0 ]
        then
              show_message $2
        else
	      show_error_message_and_exit "$3"
        fi
}

#Moves directory
move_directory() {
	mv $1 $2
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$3"
	fi

}

#Makes directory
create_folder() {
	mkdir -p $1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$2"
	fi
}

#Create a symbolic link to the specified TARGET with optional LINK_NAME.
create_link() {
	if [ ! -f $1 ]
	then
		ln -s $2 $1 >> $ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
			echo $3
		fi
	fi
}

#Create a symbolic link to the specified TARGET with optional LINK_NAME and delete the link if it already exists.
create_link_and_delete_if_already_exists() {
	if [ -f $1 ] 
	then
		rm -rf $1
	fi
	ln -s $2 $1 
	if [ $? != 0 ]
	then
		show_message $3
	fi
}

#Querying and upgrading packages.
installandupgrade_rpm() {
    show_message $1
    rpm -Uvh --replacepkgs $2 >> $ephesoft_log_file_name  2>&1
    if [ $? != 0 ]
    then
        show_error_message_and_exit "$3"
    else
        show_message $4
    fi
}

#copying the Fonts.
installandupgrade_fonts() {
    show_message $1
    cp -R  $installationDirectory/Dependencies/$2  $user_share_path/fonts/
    fc-cache -f -v  >> $ephesoft_log_file_name  2>&1
    if [ $? != 0 ]
    then
        show_error_message_and_exit "$3"
    else
        show_message $4
    fi
}

#Querying and verifying packages.
install_rpm() {
	show_message $1
	rpm -ivh $2 >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$3"
	else
		show_message $4
	fi
}

install_rpm_alien() {
	show_message $1
	alien -i $2 >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$3"
	else
		show_message $4
	fi
}

install_rpm_nodeps() {
	show_message $1
	rpm -ivh $2 --nodeps>> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$3"
	else
		show_message $4
	fi
}

#Querying and verifying packages.
install_deb() {
	show_message $1
	dpkg -i $2 >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$3"
	else
		show_message $4
	fi
}

#An automated text file generator Auto Gen is a tool designed for generating program 
#files that contain repetitive text with varied substitutions.
build_creation() {
	show_message $1
	./autogen.sh >> $ephesoft_log_file_name  2>&1 
        if [ $? = 0 ]
        then
              show_message $2
        else
	      show_error_message_and_exit "$3"
        fi
}

#Touch is a standard Unix program used to change a file's access and modification timestamps. It is also used to create a new empty file.
create_file() {
	touch $1
        if [ $? != 0 ]
        then
	      show_error_message_and_exit "$2"
        fi
}

#Copies the directory.
copy_directory_recursively() {
	cp -R $1 $2 >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
	  rm -rf $3
	  show_error_message_and_exit "$4"
	fi
}

#Replaces the value in property file.
replace_property_file_values() {
	find  $1 -type f -name $2 -exec sed -i "s|$3|$4|g" {} \;
	if [ $? != 0 ] 
	then
		echo $error_occurred_replacing_property_file_values$3.
	fi
}

#Enables the port access.
enable_port_access(){
	echo $1 $2. >> $ephesoft_log_file_name  2>&1
	if [ $operating_system = $redhat ]
	then
			firewall-cmd -V >> $ephesoft_log_file_name  2>&1
			if [ $? == 0 ] 
			then
				echo "This is newer operating system supporting firewall-cmd."  >> $ephesoft_log_file_name  2>&1
				task=$(firewall-cmd --state)
				if echo "$task" | grep -q "running"; then
					  echo "$info_firewall_cmd_is_active" >>$ephesoft_log_file_name  2>&1
					  firewall-cmd --permanent --add-port=$2/tcp >>$ephesoft_log_file_name  2>&1 
					  firewall-cmd --reload >>$ephesoft_log_file_name  2>&1 
					  if [ $? != 0 ]
					  then
						echo $error_occurred_reloading_firewall_cmd
					  fi
				else
					  echo "$info_firewall_cmd_is_inactive" >>$ephesoft_log_file_name  2>&1
					  firewall-cmd --permanent --add-port=$2/tcp >>$ephesoft_log_file_name  2>&1 
				fi
				
			elif [ -f $iptables_file_name ]
			
				then
					echo "This is older operating system supporting iptable." >>$ephesoft_log_file_name  2>&1
					! grep $2 $iptables_file_name >> $ephesoft_log_file_name  2>&1
					if [ $? -eq 0 ]
					then
					  sed -i 's/COMMIT/-A INPUT -m state --state NEW -m tcp -p tcp --dport portNumber -j ACCEPT\nCOMMIT/' $iptables_file_name >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ] 
					  then
							echo "error"
						  echo $4
					  fi
					  replace_property_file_values "$iptables_file_name" "$iptables_file" "portNumber" "$2"
						service iptables status &>/dev/null && /etc/init.d/iptables restart >> $ephesoft_log_file_name  2>&1
					fi
			else
				echo "This is older operating system supporting iptable. and $iptables_file_name not found" >> $ephesoft_log_file_name  2>&1
				iptables -V >> $ephesoft_log_file_name  2>&1
				if [ $? == 0 ] 
				then
					iptables -C INPUT -m state --state NEW -m tcp -p tcp --dport $2 -j ACCEPT  >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
						iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport $2 -j ACCEPT >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ] 
						then
						  echo $4
						fi
						service iptables status &>/dev/null && /etc/init.d/iptables restart >> $ephesoft_log_file_name  2>&1
					else
						echo "$2 already exists. "  >> $ephesoft_log_file_name  2>&1
					fi
					service iptables save  >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
						yum install -y iptables-services >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ] 
						then
							echo "Not able to install iptables-services" >> $ephesoft_log_file_name  2>&1
						else
							service iptables save >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ] 
							then
							  echo "iptables still not able to saved after installing iptables-services." >> $ephesoft_log_file_name  2>&1
							fi
						fi
					else
						echo "iptables service is already installed on the server"  >> $ephesoft_log_file_name  2>&1
					fi
					
					
				else
					echo "Do you want to disable the firewall for Transact port(y/n)?"
					while :
					do

					if [ $use_silent_installer == "no" ]
					then
					  read -e -i "y" want_to_continue
					else
					  want_to_continue=$input_disable_firewall
					  echo "$want_to_continue"
					fi
					echo "$want_to_continue" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1

					if [ $want_to_continue = 'y' -o $want_to_continue = 'Y' ]
					then
						echo "This is newer operating system supporting nftable" >> $ephesoft_log_file_name  2>&1
						nft list ruleset >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ]
						then
							yum install -y nftables >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
								echo $4
							else
								echo "nftable installation completed successfully" >> $ephesoft_log_file_name  2>&1
							fi
						else
							echo "nftable already installed. Proceed to add rule" >> $ephesoft_log_file_name  2>&1
						fi
						echo "add rule for disabling firewall for Transact" >> $ephesoft_log_file_name  2>&1
						nft add table ip ephesoft_filter # create table
						nft add chain ip ephesoft_filter INPUT  >> $ephesoft_log_file_name  2>&1
						nft add rule ip ephesoft_filter INPUT tcp dport $2 accept >> $ephesoft_log_file_name  2>&1
						echo "ephesoft_filter rule successfully installed in nftable utility" >> $ephesoft_log_file_name  2>&1

					fi
					break;
					done

				fi
			fi
	else if [ $operating_system = $ubuntu ]
	     then
		task=$(ufw status)
		if echo "$task" | grep -q "inactive"; then
		      echo "$info_firewall_ufw_is_inactive" >>$ephesoft_log_file_name  2>&1
		      ufw allow $2 >>$ephesoft_log_file_name  2>&1 
		else
		      ufw --force enable >>$ephesoft_log_file_name  2>&1
		      if [ $? != 0 ]
		      then
			      echo $error_occurred_enabling_ufw
		      fi
		      ufw allow $2 >>$ephesoft_log_file_name  2>&1 
		      service ufw restart >>$ephesoft_log_file_name  2>&1
		      if [ $? != 0 ]
		      then
			    
			    echo $error_occurred_restarting_ufw
		      fi
		fi
	    fi
	 fi   
}


install_python(){
	extract_tar_file "$info_extracting_python" "$installationDirectory/Dependencies/$python_tar" "$installationDirectory/Dependencies/" "$error_extracting_python_folder"
	if [ $? != 0 ]
        then
		echo "Error installing python. " >> $ephesoft_log_file_name 2>&1
       	else
		echo "Python installed successfully. "	>> $ephesoft_log_file_name 2>&1
	fi
}

#Checking memory before installation
check_available_disk_space(){
	avail_dir_disk_space=`df -BG $1 | awk '/[0-9]%/{print $(NF-2)}' | rev | cut -c 2- | rev`
	echo "Available disk space in Installation directory is $avail_dir_disk_space" >> $ephesoft_log_file_name  2>&1
	if [ $avail_dir_disk_space -lt $disk_space_installation_dir ]
	then
		show_error_message_and_exit "$error_insufficint_disk_space in $1 ""$disk_space_installation_dir""G is required "
	fi
	avail_disk_space=`df -BG / | awk '/[0-9]%/{print $(NF-2)}' | rev | cut -c 2- | rev`
	echo "Available disk space at / is $avail_disk_space" >> $ephesoft_log_file_name  2>&1
	if [ $avail_disk_space -lt $disk_space_root_dir ]
	then
		show_error_message_and_exit "$error_insufficint_disk_space ""$disk_space_root_dir""G is required for the root."
	fi	
}

#

# Takes the input from user for database port number and verifies it.
take_input_database_port_and_verify() {

while :   
do
    if [ $use_silent_installer == "no" ]
    then
	  read -e -i "$default_database_port" portNumber
    else
	  portNumber="$input_database_port_number"
	  echo "$portNumber"
    fi
    echo "$portNumber" >> $ephesoft_log_file_name  2>&1
    if [ -n "$portNumber" ] && [ $portNumber -eq $portNumber 2>/dev/null ]
    then
	trim_number=$(echo $portNumber | sed 's/^0*//')
	if [ -z "$trim_number" ]
	then
		trim_number=0
	fi
	if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
	then
		portNumber=$trim_number
		break
	else
		echo "$invalid_port_number"
	fi
    else
	echo "$invalid_port_number"
    fi
done

netstat -an|grep $portNumber|grep LISTEN >> $ephesoft_log_file_name 2>&1
if [ $? = 0 ] 
then
      ch=1;     
      while [ ch = 1 ]
      do              
           echo $port_in_use
           while :   
           do
            	readinput portNumber
            	echo "$portNumber" >> $ephesoft_log_file_name  2>&1
		if [ -n "$portNumber" ] && [ $portNumber -eq $portNumber 2>/dev/null ]
		then
		    trim_number=$(echo $portNumber | sed 's/^0*//')
		    if [ -z "$trim_number" ]
		    then
			    trim_number=0
		    fi
		    if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
		    then
			    portNumber=$trim_number
			    break
		    else
			    echo "$invalid_port_number"
		    fi
		else
		    echo "$invalid_port_number"
		fi
           done
           netstat -an|grep $portNumber|grep LISTEN >> $ephesoft_log_file_name 2>&1
           if [ $? = 0 ]
           then 
                 ch=1
           else
                 ch=0
           fi             
      done
fi
}

#Takes the input for database password from the user.
take_input_database_password() {
	while :
        do
			if [[ $selected_database = 1 ]]
			then
				echo $new_password
			else
				echo $1
			fi
	        stty -echo
	        if [ $use_silent_installer == "no" ]
			then
		      readinput_mysql_password password
		      stty echo
		      echo ""
			else
		      password="$input_database_password"
		      stty echo
# 		      echo "$password"
			fi
		echo -n $read_password_again
		echo ""
		stty -echo
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_password repeatpassword
		      stty echo
		      echo ""
		else
		      repeatpassword="$input_database_password"
		      stty echo
# 		      echo "$repeatpassword"
		fi
	 	if [ "$repeatpassword" != "$password" ]
        then
			echo $mismatch_password
			continue
		else
			PasswordTest $password
			ret=$?		
			if [ $ret -eq 0 ] 
			then
				echo $invalid_input_mysql_password_policy
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						stty echo
						read -e -i "n" want_to_continue
					else
						want_to_continue="y"
						echo "$want_to_continue"
					fi
					echo "$want_to_continue" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
							show_message $invalid_option
							pass=0
							continue
					else
							pass=1
							break
							
					fi
				done
				if [ $want_to_continue = 'Y' -o $want_to_continue = 'y' ]
				then
					break
				else
					continue
				fi
			else
				break
			fi
		fi
	done
}


take_ephesoft_database_password() {
	while :
        do
		echo "$admin_new_password"
		
	    stty -echo
	    if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_password adminpassword
		      stty echo
		      echo ""
		else
		      adminpassword="$input_admin_database_password"
		      stty echo
		fi
		echo -n $read_password_again
		echo ""
		stty -echo
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_password repeatadminpassword
		      stty echo
		      echo ""
		else
		      repeatadminpassword="$input_admin_database_password"
		      stty echo
		fi
	 	if [ "$repeatadminpassword" != "$adminpassword" ]
              	then
			echo $mismatch_password
			continue
		else
			
			PasswordTest $adminpassword
			ret=$?		
			if [ $ret -eq 0 ] 
			then
				echo $invalid_input_mysql_password_policy
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						stty echo
						read -e -i "n" want_to_continue
					else
						want_to_continue="y"
						echo "$want_to_continue"
					fi
					echo "$want_to_continue" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
							show_message $invalid_option
							pass=0
							continue
					else
							pass=1
							break	
					fi
				done
				if [ $want_to_continue = 'Y' -o $want_to_continue = 'y' ]
				then
					stty echo
					break
				else
					continue
				fi
			else
				stty echo
				break
			fi
		fi
	done
}

take_ephesoft_database_username(){
	while :
	do
			# Check for mysql/mariadb
			if [[ $selected_database = 1 ]]
			then
				show_message $DB_Username
			else
				echo $1
			fi
	     	if [ $use_silent_installer == "no" ]
			then
	            readinput ephesoftusername
				UsernameTest "$ephesoftusername"
				if [ $? != 0 ]
				then
				#----
				while :
				do
					echo $invalid_input_mysql_policy
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "n" want_to_continue
					else
						want_to_continue="y"
						echo "$want_to_continue"
					fi
					echo "$want_to_continue" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
							show_message $invalid_option
							pass=0
							continue
					else
							pass=1
							break
							
					fi
				done
				if [ $want_to_continue = 'Y' -o $want_to_continue = 'y' ]
				then
					break
				else
					#echo "Enter user name:"
					continue
				fi
				
				#-----
				
				else
					break;
				fi
			else
				ephesoftusername="$input_admin_database_username"
				echo $ephesoftusername
				break;
	
			fi
	done
	 	
}
#Username Validation		
UsernameTest() {

	#if [[ "$1" =~ "(^[a-zA-Z\d]{1,16})" ]]
	if [[ "$1" =~ [^_a-zA-Z0-9] ]] || [ ${#1} -eq 0 ] || [ ${#1} -gt 16 ]        
	then
                return 1
        else
                return 0
        fi

}

#Takes the input for database port
take_input_database_port() {
	while :
        do
		if [ $use_silent_installer == "no" ]
		then
			read -e -i "$default_database_port" portNumber
		else
			portNumber="$input_database_port_number"
			echo "$portNumber"
		fi
         	echo "$portNumber" >> $ephesoft_log_file_name  2>&1
		if [ -n "$portNumber" ] && [ $portNumber -eq $portNumber 2>/dev/null ]
		then
		    trim_number=$(echo $portNumber | sed 's/^0*//')
		    if [ -z "$trim_number" ]
		    then
			    trim_number=0
		    fi
		    if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
		    then
			    portNumber=$trim_number
			    break
		    else
			    echo "$invalid_port_number"
		    fi
		else
		    echo "$invalid_port_number"
		fi
         done
}

remove_checkinstall_devtools_in_case_of_ubuntu() {
if [[ $operating_system = $ubuntu ]]
then
	sed -i /checkinstall=0/d  $ephesoft_configuration_file >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		echo $error_in_removing checkinstall $error_in_removing_dependency_conf_file
	fi
	sed -i /dev_tools=0/d  $ephesoft_configuration_file >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		echo $error_in_removing dev_tools $error_in_removing_dependency_conf_file
	fi
fi
}

#Uninstallation methods
uninstall() {
	
	echo $1 >> $ephesoft_log_file_name 2>&1
	while :
	do	 
#                 readinput overwrite_character
		overwrite_character=y
	        echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
                if [ $? != 0 ]
                then
                   show_message $error_invalid_option_selected
                   continue
                fi
                if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
                then
			$2
                fi
	break;
        done
}

#Uninstalls the LibreOffice.
uninstall_libreoffice() {
	show_message $info_uninstall_libreoffice_wait
	
	delete_files_and_show_message_if_error_occurred "$libreoffice_link" "$error_deleting_libreoffice_link"
	if [ $operating_system = $redhat ]
	then
		rpm -ev --nodeps `rpm -qa | grep office*` >> $ephesoft_log_file_name 2>&1
		rpm -ev --nodeps `rpm -qa | grep libobasis*` >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			delete_files_and_show_message_if_error_occurred "$libreoffice_installation_directory" "$error_deleting_libreoffice_folder"
			show_message $success_uninstall_libreoffice
			replace_conf_parameters libreoffice 0
		else
			show_message $error_uninstall_libreoffice
		fi
	else if [ $operating_system = $ubuntu ]
	     then
			# Remove ppa for libreoffice
			echo "\n" |  add-apt-repository --remove ppa:libreoffice/libreoffice-4-2 >>$ephesoft_log_file_name  2>&1 
			if [ $? != 0 ]
			then
				echo "Error in removing LibreOffice ppa." >>$ephesoft_log_file_name  2>&1 
			fi
			apt-get purge libreoffice? -y >> $ephesoft_log_file_name 2>&1
			if [ $? != 0 ]
			then
				show_message $error_uninstall_libreoffice
			fi
			task=$(ufw status)
			if echo "$task" | grep -q "inactive"; then
				 show_message "$info_firewall_ufw_is_inactive" >>$ephesoft_log_file_name  2>&1
			else
				service ufw restart >>$ephesoft_log_file_name  2>&1
			fi
			if [ $? = 0 ] 
			then
				if [ -d $libreoffice_installation_directory ]
				then
				      delete_files_and_show_message_if_error_occurred "$libreoffice_installation_directory" "$error_deleting_libreoffice_folder"
				fi
				show_message $success_uninstall_libreoffice
				replace_conf_parameters libreoffice 0
			else
				show_message $error_uninstall_libreoffice
			fi
	     fi
	fi
}

#Uninstalls the Wkhtmltopdf.
uninstall_wkhtmltopdf() {
	show_message $info_uninstall_wkhtmltopdf_wait
	
	if [ $operating_system = $redhat ]
	then
			rpm -ev --nodeps `rpm -qa | grep wkhtml` >> $ephesoft_log_file_name 2>&1
			if [ $? = 0 ] 
			then
				show_message $success_uninstall_wkhtmltopdf
				replace_conf_parameters wkhtmltopdf 0
			else
				show_message $error_uninstall_wkhtmltopdf
			fi
	else if [ $operating_system = $ubuntu ]
	     then
			apt-get purge wkhtmltox? -y >> $ephesoft_log_file_name 2>&1
			if [ $? != 0 ]
			then
				show_message $error_uninstall_wkhtmltopdf
			else
				show_message $success_uninstall_wkhtmltopdf
				replace_conf_parameters wkhtmltopdf 0
			fi
	     fi
	fi
}


uninstall_imagemagick() {
	show_message $info_uninstall_imagemagick_wait
	if ( [ "$temp_ephesoft_installed" -lt 4600 ] && [ $is_upgrade == "y" ])
	then
	  cd $sources_folder
	  for entry in *
	  do
	    if [[ $entry == "ImageMagick"* ]]
	    then
	      installed_imagemagick_version="${entry:12}"
	      break
	    fi
	  done
  else
    installed_imagemagick_version=$(convert -version|grep Version:|awk '{print $3}') >>$ephesoft_log_file_name  2>&1
  fi

	if [ $operating_system = $redhat ]
	then
		local installed_imagemagick_rpm_package=`rpm -qa | grep ImageMagick` >>$ephesoft_log_file_name  2>&1 
		rpm -ev $installed_imagemagick_rpm_package >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			uninstall_dependencies ImageMagick-$installed_imagemagick_version ImageMagick imagemagick
		else
			show_message $error_uninstall_imagemagick
		fi
	else if [ $operating_system = $ubuntu ]
	     then
		local installed_imagemagick_deb=`hget_installed imagemagick`
		installed_imagemagick_deb=${installed_imagemagick_deb//-*/}
		dpkg -r imagemagick-$installed_imagemagick_deb >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			uninstall_dependencies ImageMagick-$installed_imagemagick_version ImageMagick imagemagick
		else
			show_message $error_uninstall_imagemagick
		fi
	    fi
	fi

	
}

#uninstalles graphicsMagick
uninstall_graphicsmagick() {
	show_message $info_uninstall_graphicsmagick_wait
	if ( [ "$temp_ephesoft_installed" -lt 4600 ] && [ $is_upgrade == "y" ])
  	then
  	  cd $sources_folder
  	  for entry in *
  	  do
  	    if [[ $entry == "GraphicsMagick"* ]]
  	    then
  	      installed_graphicsmagick_version="${entry:15}"
  	      break
  	    fi
  	  done
    else
      installed_graphicsmagick_version=$(gm -version|grep -m 1 GraphicsMagick|awk '{print $2}') >>$ephesoft_log_file_name  2>&1
    fi
	if [ $operating_system = $redhat ]
	then
		local installed_graphicsmagick_rpm_package=`rpm -qa | grep GraphicsMagick` >>$ephesoft_log_file_name  2>&1 
		rpm -ev $installed_graphicsmagick_rpm_package >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			uninstall_dependencies GraphicsMagick-$installed_graphicsmagick_version GraphicsMagick graphicsmagick
		else
			show_message $error_uninstall_graphicsmagick
		fi
	else if [ $operating_system = $ubuntu ]
	     then
		local installed_graphicsmagick_deb=`hget_installed graphicsmagick`
		installed_graphicsmagick_deb=${installed_graphicsmagick_deb//-*/}
		dpkg -r graphicsmagick-$installed_graphicsmagick_deb >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			uninstall_dependencies GraphicsMagick-$installed_graphicsmagick_version GraphicsMagick graphicsmagick
		else
			show_message $error_uninstall_graphicsmagick
		fi
	    fi
	fi	
}

#Uninstall rpm
uninstall_rpm(){
  if [ $operating_system = $redhat ]
  then
    installed_rpm=`rpm -qa $1` >> $ephesoft_log_file_name 2>&1
    if [ ! -z "$installed_rpm" ]
    then
      rpm -ev $installed_rpm >> $ephesoft_log_file_name 2>&1
    fi
  fi
}

# Uninstalls the OmniPage
uninstall_nuance() {
  show_message $info_uninstall_nuance_wait
  if [ $operating_system = $redhat ]
  then
    uninstall_rpm "nuance-omnipage-csdk-lib64"
    uninstall_rpm "nuance-omnipage-csdk-devel"
    uninstall_rpm "omnipage-csdk-devel"
    uninstall_rpm "omnipage-csdk-lib64"

    if [ $? = 0 ]
    then
      show_message $success_uninstall_nuance
      replace_conf_parameters omnipage 0
    else
      show_message $error_uninstall_nuance
    fi

  else if [ $operating_system = $ubuntu ]
    then
      dpkg -P nuance-omnipage-csdk-devel  >> $ephesoft_log_file_name 2>&1
      dpkg -P nuance-omnipage-csdk-lib64 >> $ephesoft_log_file_name 2>&1
      if [ $? = 0 ]
      then
        show_message $success_uninstall_nuance
        replace_conf_parameters omnipage 0
      else
        show_message $error_uninstall_nuance
      fi
    fi
  fi
}

#Uninstalls the poco
uninstall_poco(){

	show_message $info_uninstall_poco
	if [ $operating_system = $redhat ]
	then
		    installed_poco_rpm=`rpm -qa poco` >> $ephesoft_log_file_name 2>&1 
		    rpm -ev $installed_poco_rpm >> $ephesoft_log_file_name 2>&1
		    if [ $? = 0 ] 
		    then
			    show_message $success_uninstall_poco
			    replace_conf_parameters poco 0
		    else
			    show_message $error_uninstall_poco
		    fi
	else if [ $operating_system = $ubuntu ]
	     then
		    dpkg -r poco >> $ephesoft_log_file_name 2>&1 
		    if [ $? = 0 ] 
		    then
			    show_message $success_uninstall_poco
			    replace_conf_parameters poco 0
		    else
			    show_message $error_uninstall_poco
		    fi
	     fi
	fi
}

#Uninstalls the tesseract.
uninstall_tesseract() {
	if [ $operating_system = $redhat ]
	then
	      uninstall_tesseract_redhat
	      uninstall_leptonica_redhat
	else if [ $operating_system = $ubuntu ]
	     then
		      uninstall_leptonica_ubuntu
		      uninstall_tesseract_ubuntu
	      fi
	 fi
}

# Uninstalling tesseract for redhat
uninstall_tesseract_redhat() {
	      show_message $info_uninstall_tesseract_wait
	      installed_tesseract_rpm_package=`rpm -qa tesseract`  >> $ephesoft_log_file_name 2>&1
	      installed_tesseract_version=${installed_tesseract_rpm_package//tesseract-/}
	      installed_tesseract_version=${installed_tesseract_version//-*/}
	      rpm -ev $installed_tesseract_rpm_package >> $ephesoft_log_file_name 2>&1
	      if [ $? = 0 ] 
	      then
		      uninstall_dependencies tesseract-$installed_tesseract_version Tesseract tesseract
	      else
		      show_message $error_uninstall_tesseract
	      fi
}

# Uninstalling Leptonica for redhat
uninstall_leptonica_redhat() {
	      show_message $info_uninstall_leptonica
	      old_leptonica_rpm_package=`rpm -qa leptonica`  >> $ephesoft_log_file_name 2>&1
	      installed_leptonica_version=${old_leptonica_rpm_package//leptonica-/}
	      installed_leptonica_version=${installed_leptonica_version//-*/}
		rpm -ev $old_leptonica_rpm_package >> $ephesoft_log_file_name 2>&1 
	      if [ $? = 0 ] 
	      then
		      uninstall_dependencies leptonica-$installed_leptonica_version Leptonica leptonica
	      else
		      show_message $error_uninstall_leptonica
	      fi
}

# Uninstalling tesseract for Ubuntu
uninstall_tesseract_ubuntu() {
	      show_message $info_uninstall_tesseract_wait
	      installed_tesseract_version=`dpkg -s tesseract | grep Version|awk '{print $2}'` #>> $ephesoft_log_file_name 2>&1
	      installed_tesseract_version=${installed_tesseract_version//-*/}  #>> $ephesoft_log_file_name 2>&1
	      show_message installed_tesseract_version=$installed_tesseract_version >> $ephesoft_log_file_name 2>&1 
	      dpkg -r tesseract >> $ephesoft_log_file_name 2>&1 
	      if [ $? = 0 ] 
	      then
		      uninstall_dependencies tesseract-$installed_tesseract_version Tesseract tesseract
	      else
		      show_message $error_uninstall_tesseract
	      fi
}

# Uninstalling Leptonica for Ubuntu
uninstall_leptonica_ubuntu() {
	      show_message $info_uninstall_leptonica
	      installed_leptonica_version=`dpkg -s leptonica | grep Version|awk '{print $2}'` >>$ephesoft_log_file_name  2>&1
	      installed_leptonica_version=${installed_leptonica_version//-*/} >> $ephesoft_log_file_name 2>&1
	      uninstall_dependencies leptonica-$installed_leptonica_version Leptonica leptonica
	      dpkg -r leptonica >> $ephesoft_log_file_name 2>&1 
	      if [ $? = 0 ] 
	      then			    
		    replace_conf_parameters leptonica 0
	      else
		      show_message $error_uninstall_leptonica
	      fi
}

uninstall_dependencies() {
	
	if [ -d $sources_folder/$1 ]
	then
		cd $sources_folder/$1
		make uninstall >> $ephesoft_log_file_name 2>&1
		if [ $? = 0 ] 
		then
			cd ..
			rm -rf $sources_folder/$1
			if [ $? != 0 ] 
			then
				show_message $error_deleting $1 folder.
			else
				show_message  $2 $successful_uninstall
				replace_conf_parameters $3 0
				
			fi
		else
			show_message $error_uninstall $2
		fi
	else
		show_message $1 $error_not_exists
	fi
}

memory_computation() {

targeted_heap_memory=$default_heap_size
if [[ -f "/proc/meminfo" ]]
then
	total_memory=`cat /proc/meminfo | grep MemTotal | awk '{ print $2 }'`;
	required_memory_decimal=`bc <<< "scale = 2; (($total_memory) / (1024*1024* 4))"`
	required_memory=`printf "%.0f" $(echo "scale=2;$required_memory_decimal" | bc) `
	required_memory_mb=$(($required_memory * 1024))
fi

echo Required memory $required_memory_mb Default Heap Size $default_heap_size >> $ephesoft_log_file_name 2>&1
if [[ $required_memory_mb > $default_heap_size ]]
then
	echo Required memory $required_memory_mb Default Heap Size $default_heap_size changed targeted memory to $required_memory_mb >> $ephesoft_log_file_name 2>&1
	targeted_heap_memory=$required_memory_mb
else
	echo Required memory $required_memory_mb Default Heap Size $default_heap_size changed targeted memory to $default_heap_size >> $ephesoft_log_file_name 2>&1
	targeted_heap_memory=$default_heap_size
fi

if [[ $is_upgrade == "y" ]] && [[ -f $installationDirectory/Application-backup-$ephesoft_installed/setenv.sh ]]
then
	max_heap_size_argument=`grep Xmx "$installationDirectory/Application-backup-$ephesoft_installed/setenv.sh" | sed -e "s/.*\(\-Xmx[^ ]*\).*/\1/"` >> $ephesoft_log_file_name  2>&1
	custom_heap_memory="${max_heap_size_argument//[!0-9]/}"
	
	maxperm_size_argument=`grep MaxPermSize "$installationDirectory/Application-backup-$ephesoft_installed/setenv.sh" | sed -e "s/.*\(\-XX:MaxPermSize[^ ]*\).*/\1/"` >> $ephesoft_log_file_name  2>&1
	custom_maxperm_memory="${maxperm_size_argument//[!0-9]/}"
	
	if [[ $custom_heap_memory > $targeted_heap_memory ]]
	then
		echo Custom heap memory $custom_heap_memory Targeted Heap Size $targeted_heap_memory changed targeted memory to $custom_heap_memory >> $ephesoft_log_file_name 2>&1
		targeted_heap_memory=$custom_heap_memory
	fi
	
fi

xmx_max_heap_size=-Xmx${targeted_heap_memory}m
xmx_min_heap_size=-Xms${targeted_heap_memory}m
xmx_maxperm_size="-XX:MaxPermSize=${default_perm_size}m"
xmx_minperm_size="-XX:PermSize=${default_perm_size}m"

echo xmx_max_heap_size $xmx_max_heap_size >> $ephesoft_log_file_name  2>&1
echo xmx_min_heap_size $xmx_min_heap_size >> $ephesoft_log_file_name  2>&1
echo xmx_maxperm_size $xmx_maxperm_size >> $ephesoft_log_file_name  2>&1
echo xmx_minperm_size $xmx_minperm_size >> $ephesoft_log_file_name  2>&1

}

check_version() {
	      if [ $operating_system = $redhat ]
	      then	
			if [ $2 == "imagemagick" ]
			then
				extracted_value=$(convert -version|grep Version:|awk '{print $3}') >>$ephesoft_log_file_name  2>&1
			elif [ $2 == "graphicsmagick" ]
			then
				extracted_value=$(gm -version|grep -m 1 GraphicsMagick|awk '{print $2}') >>$ephesoft_log_file_name  2>&1
			elif [ $2 == "omnipage" ]
			     then
				installed_nuance_rpm_version=`rpm -qa $1` >>$ephesoft_log_file_name  2>&1
# 				installed_nuance_lib64_rpm_version=`rpm -qa nuance-omnipage-csdk-lib64` >>$ephesoft_log_file_name  2>&1
				extracted_value=$installed_nuance_rpm_version
			#No need to check in Patch installer 4502
			elif [ $2 == "libreoffice" ]
			     then
				extracted_value=$(soffice --version|grep LibreOffice|awk '{print $2}') >>$ephesoft_log_file_name  2>&1 			    
			elif [ $2 == "wkhtmltopdf" ]
			     then
				 extracted_value=$(wkhtmltopdf --version|grep wkhtmltopdf|awk '{print $2}') >>$ephesoft_log_file_name  2>&1 
			    
			elif [ $2 == "tesseract" ] || [ $2 == "leptonica" ] || [ $2 == "poco" ]
			     then
			    extracted_value=`rpm -qa $1` >>$ephesoft_log_file_name  2>&1 
			fi
			show_message $2 $extracted_value >>$ephesoft_log_file_name  2>&1
			show_message 1=$1 2=$2 3=$3 4=$4 5=$5 6=$6 >>$ephesoft_log_file_name  2>&1
# 			Matching installed version and current software version to be installed + null check
			if [[ $6 != *"$extracted_value"* ]] && [[ $extracted_value != ''  ]]
			then
# 			If multiple versions are installed on the system, then matching the required version.
			    extracted_versions=($extracted_value)
			    eval $4=1
			    for version in ${extracted_versions[@]}
			    do
			      if [[ $6 == *"$version"* ]]
			      then
				  eval $4=0
				  break
			      fi
			    done
			fi
			
	      else if [ $operating_system = $ubuntu ]
		  then
			if [ $2 == "imagemagick" ]
			then
				extracted_value=$(convert -version|grep Version:|awk '{print $3}') >>$ephesoft_log_file_name  2>&1
			elif [ $2 == "graphicsmagick" ]
			then
				extracted_value=$(gm -version|grep -m 1 GraphicsMagick|awk '{print $2}') >>$ephesoft_log_file_name  2>&1
			elif [ $2 == "omnipage" ]
			     then
				installed_nuance_deb_version=`dpkg -s $1| grep Version: | awk '{print $2}'` >>$ephesoft_log_file_name  2>&1
				extracted_value=$installed_nuance_deb_version
			elif [ $2 == "libreoffice" ]
			     then
				 extracted_value=$(soffice --version|grep LibreOffice|awk '{print $2}') >>$ephesoft_log_file_name  2>&1 
			elif [ $2 == "wkhtmltopdf" ]
			     then
				 extracted_value=$(wkhtmltopdf --version|grep wkhtmltopdf|awk '{print $2}') >>$ephesoft_log_file_name  2>&1 
			elif [ $2 == "tesseract" ] || [ $2 == "leptonica" ] || [ $2 == "poco" ]
			     then
				  extracted_value=`dpkg -s $2 | grep Version|awk '{print $2}'` >>$ephesoft_log_file_name  2>&1
			 fi
			show_message $2 $extracted_value >>$ephesoft_log_file_name  2>&1
			show_message 1=$1 2=$2 3=$3 4=$4 5=$5 6=$6 >>$ephesoft_log_file_name  2>&1
			hput_installed $2 $extracted_value
# 			Matching installed version and current software version to be installed + null check
			if [[ $extracted_value != *"$5"* ]] && [[ $extracted_value != ''  ]]
			then
			      eval $4=1
			fi
	      
		  fi
	      fi
}
#Password validation allowed characters are characters including !@#$%^&*?><_-
PasswordTest(){
	
	if [[ "$1" =~ ^([a-zA-Z0-9_!@\#$%^&*?><_-]){1,12}$ ]] 
	then
		return 1
	else
		return 0
	fi
}

validate_realm_role_base() {
	#Updating ,dc= to dc as dc=ephesoft,dc=com is also a valid name. Validation: There must be atleast two dc in role base name.
	value=1
	dc_index=$(get_first_string_index "${1,,}" "dc=")
	echo $dc_index   >> $ephesoft_log_file_name  2>&1
	if [ $dc_index != -1 ]
	then
		dc_index=`expr $dc_index + 3`
		substring=${1:dc_index:${#1}}
		echo $substring >> $ephesoft_log_file_name  2>&1
		dc_index=$(get_first_string_index "${substring,,}" ",dc=")
		echo $dc_index >> $ephesoft_log_file_name  2>&1
		if [ $dc_index != -1 ]
		then
			value=0
		fi
	fi
	return $value;
}

#Setting java path. Required for RHEL minimal installation.
set_java_path_libreoffice() {
	echo 'export JAVA_HOME='$installationDirectory'/Dependencies/jdk' > $libreoffice_java_path
	echo 'export PATH=$JAVA_HOME/bin:$PATH' >> $libreoffice_java_path
	source $libreoffice_java_path >>$ephesoft_log_file_name  2>&1
}


#Takes the input for password from the user without validation.
take_input_password() {
	while :
        do
			echo $1
	        stty -echo
	        if [ $use_silent_installer == "no" ]
			then
		      readinput_mysql_password password
		      stty echo
		      echo ""
			else
		      password="$2"
		      stty echo
# 		      echo "$password"
			fi
		echo -n $read_password_again
		echo ""
		stty -echo
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_password repeatpassword
		      stty echo
		      echo ""
		else
		      repeatpassword="$2"
		      stty echo
# 		      echo "$repeatpassword"
		fi
	 	if [ "$repeatpassword" != "$password" ]
        then
			echo $mismatch_password
			continue
		else
			break;
		fi
	done
}

#Returns the first string index. If index not found then return -1.
get_first_string_index() { 
  x="${1%%$2*}"
  [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}

update_form_pki_comments_tags() {
	
	
	if [ $authentication_mode == 0 ] || [ $authentication_mode == 1 ]
	then
		# For FORM authentication 
		# Handle HTTP/HTTPS authentication. Corresponding tags will be updated.
		echo "connector_protocol $connector_protocol " >> $ephesoft_log_file_name  2>&1
		if [[ $connector_protocol == "http" ]] || [[ $connector_protocol == "0" ]]
		then
			# Comment out HTTPS tags
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" "-->"
			
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" "-->"
			
		else
			# Comment out HTTP tag
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" ""
			
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
			
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
			
			#keystore file path and password
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_FILE@@" "$installationDirectory/$certs_folder_name/$form_authentication_https_file_name"
			replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_PWD@@" "$https_connector_password"
		fi
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
	else
		#Updating comments for PKI
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
		
	fi
}
update_realm_user_retriever(){
	case "$1" in
	  4)
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@USERNAME_RETRIEVER@@" "REGISTEREDID"
		;;
	  3) 
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@USERNAME_RETRIEVER@@" "RFC822NAME"
		;;
	  2)
	    replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@USERNAME_RETRIEVER@@" "PRINICIPALNAME"
		;;
	  *)
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@USERNAME_RETRIEVER@@" "CN"
		;;
	esac	
}
 update_logi_report_authentication(){
   replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
}
update_realm_properties() {
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMCONNECTIONURL@@" "$realm_connection_url"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMCONNECTIONNAME@@" "$realm_connection_name"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMCONNECTIONPWD@@" "$realm_user_password"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMUSERBASE@@" "$realm_user_base"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMUSERSEARCH@@" "$realm_user_search"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMROLEBASE@@" "$realm_role_base"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMROLENAME@@" "$realm_role_name"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REALMROLESEARCH@@" "$realm_role_search"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@USER_SUB_TREE@@" "$realm_user_sub_tree"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@ROLE_SUB_TREE@@" "$realm_role_sub_tree"
	
	
	#User Connectivity properties
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SUPER_ADMIN_VALUE@@" "$user_super_admin_group_name"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SUPER_ADMIN_GROUP_VALUE@@" "$update_super_admin_group"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@USERCONNECTION@@" "$user_connection"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@CONNECTIVITYURL@@" "$connectivity_url"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@CONNECTIVITYDOMAINNAME@@" "$connectivity_domain_component_name"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@CONNECTIVITYDOMAINORG@@" "$connectivity_domain_component_organization"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@CONNECTIVITYUSERNAME@@" "$connectivity_username"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@CONNECTIVITYUSERPWD@@" "$connectivity_password"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@GROUPSRCHATTRIBUTEFILTER@@" "$connectivity_groupSearchAttributeFilter"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@USERSRCHATTRIBUTEFILTER@@" "$connectivity_userSearchAttributeFilter"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@LDAPUSERBASE@@" "$ldap_user_base"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@LDAPGROUPBASE@@" "$ldap_group_base"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MSADCONTEXTPATH@@" "$msactivedirectory_context_path"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MSADGROUPSEARCHFILTER@@" "$msactivedirectory_group_search_filter"

}

update_connector_properties() {
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@SSLENABLEPROTOCOL@@" "$pki_connector_ssl_enabled_protocol"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@SSLPROTOCOL@@" "$pki_connector_ssl_protocol"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@CHIPPERTEXT@@" "$pki_connector_chipper_text"
	
	#Updating HTTPS or HTTP
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@HTTPORHTTPS@@" "$connector_protocol"
	replace_conf_parameters connector_protocol "$connector_protocol" 
	replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@HTTPORHTTPS@@" "$connector_protocol"
}

update_default_keystore_properties() {
	#Updating default path and passwords
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TRUSTEDSTOREFILEPATH@@" "enter trust store complete path (/opt/Ephesoft/Certs/trustore.jks)"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TRUSTEDSTOREPWD@@" "enter truststore password"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTOREFILEPATH@@" "enter key store complete path (/opt/Ephesoft/Certs/trustore.jks)"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTOREFILEPWD@@" "enter keystore password"
	
	#Default keystore file and password
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_FILE@@" "enter keystore file path(/opt/Ephesoft/certs/cacerts.keystore)"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_PWD@@" "changeit"
	
}

update_form_http_https_tags() {
	
	# Updated tomcat port number
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
	replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
	find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@TOMCATPORTNUMBER@@|$tomcat_port_number|g" {} \;
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_START_COMMENT@@" ""
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_END_COMMENT@@" ""
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_START_COMMENT@@" ""
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_END_COMMENT@@" ""
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
	
	
	if [[ $connector_protocol == "http" ]] || [[ $connector_protocol == 0 ]]
	then
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" "-->"
		
		#Default keystore file and password
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_FILE@@" "enter keystore file path(/opt/Ephesoft/certs/cacerts.keystore)"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_PWD@@" "changeit"
	else
		# HTTPS set password and file
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_FILE@@" "$installationDirectory/$certs_folder_name/$keystore_cert_file_name"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_PWD@@" "$form_https_keystore_cert_password"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" ""
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" ""
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
	fi
	

}

set_server_name() {

	if [ $server_name = 0 ]
	then
			server_name_set="no"
	else
			server_name_set="yes"
	fi
	if [[ $server_name_set == "no" ]]
	then
		domain=$system_name
		echo $info_hostname
		while :
		do
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "n" overwrite_character
			else
				overwrite_character=$input_change_server_name
				echo "$overwrite_character"
			fi
			echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
			if [ $? != 0 ]
			then
				echo $invalid_option
				continue
			fi
			if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
			then
				echo $enter_hostname
				if [ $use_silent_installer == "no" ]
				then
					readinput input
					if [ $? = 0 ]
					then
						domain=$input
					fi
				else
					domain=$input_changed_server_name
					echo $domain
				fi
			fi
			break;
		done
	else
		echo "Server Name already set." >> $ephesoft_log_file_name  2>&1
		domain=$server_name
	fi
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SYSTEM_NAME@@" "$domain"
		
	find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@SYSTEM_NAME@@|$domain|g" {} \;

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SERVER_ALIAS@@" "$domain"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@SERVER_ALIAS@@" "$domain"

	replace_property_file_values "$installationDirectory/Dependencies" "*.sql" "@@SYSTEM_NAME@@" "$domain"
	
	replace_conf_parameters server_name "$domain"
}

set_ldap_msad_tomcat_user_connectivity() {
	grep -lir '@@ROLE_SUB_TREE@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
	if [ $? == 0 ]
	then
			realm_updated="no"
	else
			realm_updated="yes"
	fi
	if [[ $realm_updated == "no" ]]
	then
		while :
		do
			echo "User connectivity settings"
			if [ $selected_authentication_mode == 1 ]
			then
				# For form authentication, there are 3 type of user connection mode.
				echo -e "Please select User Connection Type you want to use ? \n1. LDAP\n2. MS Active Directory\n3. Tomcat"
			else
				# For PKI authentication
				echo -e "Please select User Connection Type you want to use ? \n1. LDAP\n2. MS Active Directory"
			fi
			while :
			do
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "$connectivity_user_connection" connectivity_user_connection
				else
					connectivity_user_connection="$input_connectivity_user_connection"
					echo "$connectivity_user_connection"
				fi
				echo "$connectivity_user_connection"  >> $ephesoft_log_file_name  2>&1
				
				if [ $selected_authentication_mode == 1 ]
				then
					# Matches for 1 to 3
					if [[ "$connectivity_user_connection" =~ [^1-3] ]] || [ ${#connectivity_user_connection} -lt 1 ] || [ ${#connectivity_user_connection} -gt 3 ]
					then
							show_message $invalid_option_three
							continue
					else
							break
					fi
				else
					# Matches for 1 and 2 only
					if [[ "$connectivity_user_connection" =~ [^1-2] ]] || [ ${#connectivity_user_connection} -lt 1 ] || [ ${#connectivity_user_connection} -gt 2 ]
					then
							show_message $invalid_option_database
							continue
					else
							break
					fi
				fi
			done
	
			if [[ $connectivity_user_connection = 1 ]]
			then
				echo "Selected user connection is LDAP" >> $ephesoft_log_file_name  2>&1 
			elif [[ $connectivity_user_connection = 2 ]]
			then
				echo "Selected user connection is MS AD" >> $ephesoft_log_file_name  2>&1
			elif [[ $connectivity_user_connection = 3 ]]
			then
				echo "Selected user connection is Tomcat" >> $ephesoft_log_file_name  2>&1
			fi
			
			if [[ $connectivity_user_connection = 1 ]] || [[ $connectivity_user_connection = 2 ]]
			then
								
				echo "Connection URL:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_connection_url "$realm_connection_url"
				else
					realm_connection_url=$input_realm_connection_url
					show_message $realm_connection_url
				fi				
				echo "Connection Name:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_connection_name "$realm_connection_name"
				else
					realm_connection_name=$input_realm_connection_name
					show_message $realm_connection_name
				fi				
				
				take_input_password "Connection Password:" "$input_realm_user_password"
				realm_user_password=$password
				echo "User Base:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_user_base "$realm_user_base"
				else
					realm_user_base=$input_realm_user_base
					show_message $realm_user_base
				fi
				echo "User Search:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_user_search "$realm_user_search"
				else
					realm_user_search=$input_realm_user_search
					show_message $realm_user_search
				fi
				
				echo "User Subtree:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_user_sub_tree "$realm_user_sub_tree"
				else
					realm_user_sub_tree=$input_realm_user_sub_tree
					show_message $realm_user_sub_tree
				fi
				
				# For roles
				echo "Role Base:"
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "$realm_role_base" realm_role_base
					else
						realm_role_base=$input_realm_role_base
						show_message $realm_role_base
					fi
						echo "$realm_role_base"  >> $ephesoft_log_file_name  2>&1
						validate_realm_role_base "$realm_role_base"
						if [ $? != 0 ]
						then
								show_message $invalid_role_base
								continue
						else
								break
						fi
				done

				echo "Role Name:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_role_name "$realm_role_name"
				else
					realm_role_name=$input_realm_role_name
					show_message $realm_role_name
				fi
				echo "Role Search:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_role_search "$realm_role_search"
				else
					realm_role_search=$input_realm_role_search
					show_message $realm_role_search
				fi

				echo "Role Subtree:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_role_sub_tree "$realm_role_sub_tree"
				else
					realm_role_sub_tree=$input_realm_role_sub_tree
					show_message $realm_role_sub_tree
				fi
				
				#For MS Active Directory
				if [[ $connectivity_user_connection = 2 ]]
				then
					echo "MS AD Parameters" >> $ephesoft_log_file_name  2>&1
					echo "MS AD Group Search Filter:"
					if [[ $use_silent_installer = "no" ]]
					then
						read -e -i "$msactivedirectory_group_search_filter" msactivedirectory_group_search_filter
					else
						msactivedirectory_group_search_filter=$input_msactivedirectory_group_search_filter
						show_message $msactivedirectory_group_search_filter
					fi
				fi

				echo "Enter super admin group name:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_with_default_value realm_super_admin_group_name "$realm_super_admin_group_name"
				else
					realm_super_admin_group_name=$input_realm_super_admin_group_name
					show_message $realm_super_admin_group_name
				fi
				
			else
				echo Selected tomcat user connectivity...
				user_connection=2
			fi
			
			show_message $confirm_entered_details	
			while :
			do
				  if [ $use_silent_installer == "no" ]
				  then
					  read -e -i "n" toChange
				  else
					  toChange="n"
					  show_message "$toChange"
				  fi
				  show_message "$toChange" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
				  if [ $? != 0 ]
				  then
					  show_message $invalid_option
					  continue
				  else
					  break
				  fi
			
			done
			if [ $toChange = 'Y' -o $toChange = 'y' ]
			then
				continue
			else
				break	  	
			fi
			
		done
			if [[ $connectivity_user_connection = 1 ]] || [[ $connectivity_user_connection = 2 ]] 
			then
				if [[ $connectivity_user_connection = 1 ]]
				then
					# Mapping 0 for LDAP
					user_connection=0
				else if [[ $connectivity_user_connection = 2 ]]
					then
						# Mapping 0 for MSAD
						user_connection=1
					fi
				fi
				
				user_super_admin_group_name=$realm_super_admin_group_name
				connectivity_url=$realm_connection_url
				connectivity_username=$realm_connection_name
				connectivity_password=$realm_user_password
				connectivity_groupSearchAttributeFilter=$realm_role_name
				connectivity_userSearchAttributeFilter=$(echo $realm_user_search | sed 's/\=.*//i' | sed 's|[(),]||g')
				connectivity_domain_component_organization=$(echo "$realm_role_base" | sed 's/.*dc=//i')
				
				# For LDAP
				if [[ $connectivity_user_connection = 1 ]]
				then
					ldap_user_base=$(echo $realm_user_base | sed 's/\dc=.*//i')
					# Removing last comma if ou=people,dc=ephesoft,dc=com is set as user base then above will return ou=people,
					ldap_user_base=${ldap_user_base%,}
					ldap_group_base=$(echo $realm_role_base | sed 's/\dc=.*//i')
					ldap_group_base=${ldap_group_base%,}
				fi
				
				#For MS Active Directory
				if [[ $connectivity_user_connection = 2 ]]
				then
					temp_ldap_user_base=$(echo $realm_user_base | sed 's/\dc=.*//i')
					temp_ldap_user_base=${temp_ldap_user_base%,}
					temp_ldap_group_base=$(echo $realm_role_base | sed 's/\dc=.*//i')
					temp_ldap_group_base=${temp_ldap_group_base%,}
					if [[ -z "$temp_ldap_user_base" ]] && [[ -z "$temp_ldap_group_base" ]]
					then 
						msactivedirectory_context_path=""
					elif [ -z "$temp_ldap_user_base" ]
					then
						msactivedirectory_context_path="$temp_ldap_group_base"
					elif [ -z "$temp_ldap_group_base" ]
					then
						msactivedirectory_context_path="$temp_ldap_user_base"
					else
						msactivedirectory_context_path="$temp_ldap_user_base;;$temp_ldap_group_base"
					fi
				fi
				
				#Converting to lower case => ,,
				first_dc_index=$(get_first_string_index "${realm_role_base,,}" "dc=")
				echo first_dc_index is $first_dc_index >>$ephesoft_log_file_name  2>&1
				if [ $first_dc_index != -1 ]
				then
					first_dc_index=`expr $first_dc_index + 3`
					substring=${realm_role_base:first_dc_index:${#realm_role_base}}
					last_dn_index=`expr 4 + ${#connectivity_domain_component_organization}`
					connectivity_domain_component_name=${substring:0:`expr ${#substring} - $last_dn_index`}
				fi
			else 
				echo "For tomcat settings" >> $ephesoft_log_file_name  2>&1
			fi
			echo Updating realm settings...
			update_realm_properties
			
			# Update comments tag for PKI, FORM comment
			if [ $selected_authentication_mode == 1 ] && [[ $connectivity_user_connection = 1 || $connectivity_user_connection = 2 ]]
			then
				# For FORM  LDAP and MSAD 
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
				
			elif [ $selected_authentication_mode == 1 ] && [[ $connectivity_user_connection = 3 ]]
			then
				# For FORM and tomcat user connectivity
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" "-->"
				
			elif [ $selected_authentication_mode == 2 ]
			then
				# For PKI LDAP and MSAD
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_START_COMMENT@@" "<!--"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_LDAP_AD_END_COMMENT@@" "-->"
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
			fi
		
	else
		echo "Realm Settings already configured."
	fi

}

set_form_authentication_mode() {
	echo "in form authentication " >> $ephesoft_log_file_name  2>&1
	echo "in form authentication tomcat port number $tomcat_port_number" >> $ephesoft_log_file_name  2>&1
	is_https="no"
	#Check for last module of authentication is set or not. 
	grep -lir '@@TOMCATPORTNUMBER@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
	if [ $? == 0 ]
	then
			tomcat_port_updated="no"
	else
			tomcat_port_updated="yes"
	fi
	
	if [[ $tomcat_port_updated == "no" ]]
	then
		while :
		do
			echo -e "Please select Application Protocol you want to use ? \n1. HTTP\n2. HTTPS"
			while :
			do
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "$application_communication_protocol" application_communication_protocol
				else
					application_communication_protocol="$input_application_communication_protocol"
					echo "$application_communication_protocol"
				fi
					echo "$application_communication_protocol"  >> $ephesoft_log_file_name  2>&1
					if [[ "$application_communication_protocol" =~ [^1-2] ]] || [ ${#application_communication_protocol} -lt 1 ] || [ ${#application_communication_protocol} -gt 2 ]
					then
							show_message $invalid_option_database
							continue
					else
							break
					fi
			done

			if [[ $application_communication_protocol = 1 ]]
			then
				echo "Selected application communication protocol is HTTP" >> $ephesoft_log_file_name  2>&1 
				connector_protocol=http
			else if [[ $application_communication_protocol = 2 ]]
				then
					echo "Selected application communication protocol is HTTPS" >> $ephesoft_log_file_name  2>&1
					echo "Certificate details for SSL"
					echo "Please provide the certificate file(.keystore file) and password."
					echo "Keystore file:"
					take_input_file_path "$form_https_keystore_cert_path" "$input_form_https_keystore_cert_path"
					form_https_keystore_cert_path=$input
					take_input_password "Password" "$input_form_https_keystore_cert_password"
					form_https_keystore_cert_password=$password
					if [ -d "$installationDirectory/$certs_folder_name" ]
					then
						if [ -f "$form_https_keystore_cert_path" ]
						then
							keystore_cert_file_name="$(basename "$form_https_keystore_cert_path")"
							copy_directory_recursively "$form_https_keystore_cert_path" "$installationDirectory/$certs_folder_name/$keystore_cert_file_name" "$error_copying_keystore_cert"
						else 
							echo "$form_https_keystore_cert_path" does not exists.
						fi
					else
						echo "$installationDirectory/$certs_folder_name" directory does not exists.
					fi
					is_https="yes"
					connector_protocol=https
				fi
			fi

			echo $enter_tomcat_server_port_number

			while :   
				do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "8080" input
					else
						input="$input_tomcat_port_number"
						echo "$input"
					fi
						echo "$input" >> $ephesoft_log_file_name  2>&1
					if [ -n "$input" ] && [ $input -eq $input 2>/dev/null ]
					then
					trim_number=$(echo $input | sed 's/^0*//')
					if [ -z "$trim_number" ]
					then
						trim_number=0
					fi
					if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
					then
						tomcat_port_number=$trim_number
						break
					else
						echo "$invalid_port_number"
					fi
					else
					echo "$invalid_port_number"
					fi
			done
			show_message $confirm_entered_details	
			while :
			do
				  if [ $use_silent_installer == "no" ]
				  then
					  read -e -i "n" toChange
				  else
					  toChange="n"
					  show_message "$toChange"
				  fi
				  show_message "$toChange" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
				  if [ $? != 0 ]
				  then
					  show_message $invalid_option
					  continue
				  else
					  break
				  fi
			
			done
			if [ $toChange = 'Y' -o $toChange = 'y' ]
			then
				continue
			else
				update_form_http_https_tags
				
				#Explicitly set to last updation. 
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
				replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
				
				update_connector_properties
				
				update_default_keystore_properties
				
				# update_realm_properties
				
				# Moving to last because if tomcat port number is set in ephesoft.conf then no need to prompt user again for port number.
				replace_conf_parameters tomcat_port_number "$tomcat_port_number"
				break	  	
			fi
		done
	else
		echo "Communication protocol already set. Tomcat port number already set as $tomcat_port_number."
		
	fi
	
	replace_conf_parameters authentication_mode "1" 
	
	set_ldap_msad_tomcat_user_connectivity
	
	set_server_name
}


set_pki_default_property() {
	tomcat_port_number=8443
	connector_protocol=https
}

set_pki_authentication_mode() {
	#Setting default properties for pki_ca_cert_password
	set_pki_default_property
	#Check for last module of authentication is set or not. 
	grep -lir '@@ROLE_SUB_TREE@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
	if [ $? == 0 ]
	then
			realm_updated="no"
	else
			realm_updated="yes"
	fi
	if [ $realm_updated = "no" ]
	then
		show_message $info_import_pki_configuration_from_property
		while :
		do
			  if [ $use_silent_installer == "no" ]
			  then
				  read -e -i "n" import_property
			  else
				  import_property="n"
				  show_message "$import_property"
			  fi
			  show_message "$import_property" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
			  if [ $? != 0 ]
			  then
				  show_message $invalid_option
				  continue
			  else
				  break
			  fi
		
		done
		if [ $import_property = 'Y' -o $import_property = 'y' ]
		then
			echo "Please provide the properties file path."
			take_input_file_path "$home_directory_path/Response-Files/PKI-config.properties" ""
			pki_conf_file_path="$input"
			if [ -f "$pki_conf_file_path" ]
			then	
				silent_installer_params=( "${silent_installer_params_fresh[@]}" )
				pki_conf_params=( "${pki_conf_file_params[@]}" )
				
				#Assigning param value to the silent installer
				for param_name in "${pki_conf_params[@]}"
				do
				  param_value=$(grep $param_name "$pki_conf_file_path" )
				done
				
				while read -r i || [[ -n $i ]] 
				do
				  temp=`echo $i | grep "="`
				  if [[ $temp == '' ]]
				  then
					  continue
				  fi
				  var=`echo "$i" | awk -F"=" '{print $1}'`
				  param=${i:`expr ${#var} + 1`:${#i}}
				  eval $var='$param' >> $ephesoft_log_file_name  2>&1
				  if [ $? != 0 ] #&& [  ]
				  then
					show_error_message_and_exit "Error in $pki_conf_file_path file in $var."
				  fi

				done < "$pki_conf_file_path"
				
				server_cert_path=$input_pki_server_cert_path
				ca_cert_path=$input_pki_ca_cert_path
				
				tomcat_port_number=$input_pki_connector_port_number
				server_alias_name=$input_pki_alias_name
				pki_connector_ssl_protocol=$input_pki_connector_ssl_protocol
				pki_connector_ssl_enabled_protocol=$input_pki_connector_ssl_enabled_protocol
				pki_connector_chipper_text=$input_pki_connector_chipper_text
				
				pki_username_retriever=$input_pki_username_retriever
				
				connectivity_user_connection=$input_connectivity_user_connection
				
				realm_connection_url=$input_realm_connection_url
				realm_connection_name="$input_realm_connection_name"
				realm_user_base=$input_realm_user_base
				realm_user_search=$input_realm_user_search
				realm_user_sub_tree=$input_realm_user_sub_tree
				realm_role_base=$input_realm_role_base
				realm_role_name=$input_realm_role_name
				realm_role_search=$input_realm_role_search
				realm_role_sub_tree=$input_realm_role_sub_tree
				
				msactivedirectory_group_search_filter=$input_msactivedirectory_group_search_filter

			else
				echo "$pki_conf_file_path file doesn't exists."
			fi
			
		fi
	fi
	grep -lir '@@TRUSTEDSTOREFILEPATH@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
	if [ $? == 0 ]
	then
			certificate_set="no"
	else
			certificate_set="yes"
	fi
	echo "certificate_set" $certificate_set >> $ephesoft_log_file_name  2>&1
	if [[ $certificate_set == "no" ]]
	then
		while :
		do
			#Default value
			continue_installation=y
			while :
			do
				echo "Please provide the certificate file and password."
				echo "Server Cert:"
				take_input_file_path "$server_cert_path" "$input_pki_server_cert_path"
				server_cert_path=$input
				take_input_password "Password" "$input_pki_server_cert_password"
				pki_server_cert_password=$password
				
				echo "CA Cert:"
				take_input_file_path "$ca_cert_path" "$input_pki_ca_cert_path"
				ca_cert_path=$input
				take_input_password "Password" "$input_pki_ca_cert_password"
				pki_ca_cert_password=$password
				
				echo "Alias Name:"
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "$server_alias_name" server_alias_name
				else
					server_alias_name="$input_pki_alias_name"
					echo "$server_alias_name"
				fi
				echo "$server_alias_name" >> $ephesoft_log_file_name  2>&1
				
				show_message $confirm_entered_details	
				while :
				do
					  if [ $use_silent_installer == "no" ]
					  then
						  read -e -i "n" toChange
					  else
						  toChange="n"
						  show_message "$toChange"
					  fi
					  show_message "$toChange" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ]
					  then
						  show_message $invalid_option
						  continue
					  else
						  break
					  fi
				
				done
				if [ $toChange = 'Y' -o $toChange = 'y' ]
				then
					continue
				else
					break	  	
				fi
			done
			
			if [ -d "$installationDirectory/$certs_folder_name" ]
			then
				if [ -f "$server_cert_path" ]
				then
					server_cert_file_name="$(basename "$server_cert_path")"
					if [ "$server_cert_path" != "$installationDirectory/$certs_folder_name/$server_cert_file_name" ]
					then
						copy_directory_recursively "$server_cert_path" "$installationDirectory/$certs_folder_name/$server_cert_file_name" "$error_copying_server_cert"
					else
						echo "User provided same path $server_cert_path where server certificate need to be copied."  >> $ephesoft_log_file_name  2>&1
					fi
				else 
					echo "$server_cert_path" does not exists.
				fi
				if [ -f "$ca_cert_path" ]
				then
					ca_cert_jks_file_name="$(basename "$ca_cert_path")"
					if [ "$ca_cert_path" != "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" ]
					then
						copy_directory_recursively "$ca_cert_path" "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" "$error_copying_ca_cert"
					else
						echo "User provided same path $ca_cert_path where client certificate need to be copied."  >> $ephesoft_log_file_name  2>&1
					fi
				else
					echo "ca_cert_path" does not exists.
				fi
			else
				echo "$installationDirectory/$certs_folder_name" directory does not exists.
			fi
		
			#Importing certificates in java key store.
			#Gets the alias name
			error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -list -v -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -storepass $pki_ca_cert_password 2>&1 )
			if [ $? != 0 ]
			then
				echo $error_message  >>$ephesoft_log_file_name  2>&1
				readarray -t lines < <(echo "$error_message")
				error_message=${lines[0]}
				error_message=$(echo "$error_message" | sed 's/.*Exception: //')
				echo -e "Error occurred while getting alias name. Error message ($error_message). \nDo you want to continue with the installation(y) or want to re-enter the details(n)? In case of continue installation please import the jks file to java key store before starting the server."
				while :
				do
					  if [ $use_silent_installer == "no" ]
					  then
						  read -e -i "n" continue_installation
					  else
						  continue_installation="n"
						  show_message "$continue_installation"
					  fi
					  show_message "$continue_installation" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ]
					  then
						  show_message $invalid_option
						  continue
					  else
						  break
					  fi
				done
				if [ $continue_installation = 'N' -o $continue_installation = 'n' ]
				then
					continue	  	
				fi		
			else
				alias_name=$($installationDirectory/Dependencies/jdk/bin/keytool -list -v -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -storepass $pki_ca_cert_password| grep "Alias" |  awk '{print $3}')
				if [[ $alias_name != "" ]]
				then
					#Converting JKS to PEM file
					ca_cer_pem_file_name="${ca_cert_jks_file_name%.*}".pem
					echo "Pem file name " $ca_cer_pem_file_name >>$ephesoft_log_file_name  2>&1
					
					#Deleting already existing PEM file.
					if [ -f "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" ]
					then
						delete_files_and_show_message_if_error_occurred "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" "Error occurred while deleting $installationDirectory/$certs_folder_name/$ca_cer_pem_file_name file."
					fi
					
					error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -export -storepass $pki_ca_cert_password -alias "$alias_name" -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -rfc -file "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" 2>&1 )
					if [ $? != 0 ]
					then
						echo $error_message  >>$ephesoft_log_file_name  2>&1
						readarray -t lines < <(echo "$error_message")
						error_message=${lines[0]}
						error_message=$(echo "$error_message" | sed 's/.*Exception: //')
						echo -e "Error occurred while creating pem file. Error message ($error_message). \nDo you want to continue with the installation(y) or want to re-enter the details(n)? In case of continue installation please import the jks file to java key store before starting the server."
						while :
						do
							  if [ $use_silent_installer == "no" ]
							  then
								  read -e -i "n" continue_installation
							  else
								  continue_installation="n"
								  show_message "$continue_installation"
							  fi
							  show_message "$continue_installation" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
							  if [ $? != 0 ]
							  then
								  show_message $invalid_option
								  continue
							  else
								  break
							  fi
						done
						if [ $continue_installation = 'N' -o $continue_installation = 'n' ]
						then
							continue	  	
						fi		
					fi
					if [ -f "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" ]
					then
						echo "Pem file created."  >>$ephesoft_log_file_name  2>&1
						error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -import -trustcacerts -noprompt -storepass changeit -keystore $installationDirectory/Dependencies/jdk/jre/lib/security/cacerts -alias $alias_name -file "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" 2>&1)
						if [ $? != 0 ]
						then
							echo $error_message  >>$ephesoft_log_file_name  2>&1
							readarray -t lines < <(echo "$error_message")
							error_message=${lines[0]}
							error_message=$(echo "$error_message" | sed 's/.*Exception: //')
							echo -e "Error occurred while importing pem file. Error message ($error_message). \nDo you want to continue with the installation(y) or want to re-enter the details(n)? In case of continue installation please import the jks file to java key store before starting the server."
							while :
							do
								  if [ $use_silent_installer == "no" ]
								  then
									  read -e -i "n" continue_installation
								  else
									  continue_installation="n"
									  show_message "$continue_installation"
								  fi
								  show_message "$continue_installation" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
								  if [ $? != 0 ]
								  then
									  show_message $invalid_option
									  continue
								  else
									  break
								  fi
							done
							if [ $continue_installation = 'N' -o $continue_installation = 'n' ]
							then
								continue	  	
							fi	
						fi
						
					else
						echo "Pem file not created" "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name"  >>$ephesoft_log_file_name  2>&1
					fi		
				fi
			fi
			echo Continue installation :  $continue_installation >>$ephesoft_log_file_name  2>&1
			if [ $continue_installation = 'Y' -o $continue_installation = 'y' ]
			then
				break	  	
			fi		
		done
		echo Updating certificates...
		#Updating comments
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_END_COMMENT@@" "-->"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"

		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_END_COMMENT@@" "-->"
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_END_COMMENT@@" ""
		
		#Updating path and passwords
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TRUSTEDSTOREFILEPATH@@" "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TRUSTEDSTOREPWD@@" "$pki_ca_cert_password"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTOREFILEPATH@@" "$installationDirectory/$certs_folder_name/$server_cert_file_name"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTOREFILEPWD@@" "$pki_server_cert_password"
		
		
		#Default set for FORM
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_HTTP_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_START_COMMENT@@" "<!--"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@FORM_SSL_END_COMMENT@@" "-->"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_START_COMMENT@@" ""
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@PIVCAC_SSL_END_COMMENT@@" ""

		#Default keystore file and password
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_FILE@@" "enter keystore file path(/opt/Ephesoft/certs/cacerts.keystore)"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@KEYSTORE_PWD@@" "changeit"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SERVER_ALIAS@@" "$server_alias_name"
		
		replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@SERVER_ALIAS@@" "$server_alias_name"
		
		# To continue with PKI if break in between.
		replace_conf_parameters authentication_mode "2" 
		
	else
		echo "Certificates already configured."
	fi
	#------- For Connector Settings
	grep -lir '@@CONNECTORPORT@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
	if [ $? == 0 ]
	then
			certificate_set="no"
	else
			certificate_set="yes"
	fi
	echo "certificate_set" $certificate_set >> $ephesoft_log_file_name  2>&1
	if [[ $certificate_set == "no" ]]
	then
		while :
		do
			echo "Connector Settings for PKI"
			echo "Port:"
			
			while :   
				do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "$tomcat_port_number" input
					else
						input="$input_pki_connector_port_number"
						echo "$input"
					fi
						echo "$input" >> $ephesoft_log_file_name  2>&1
					if [ -n "$input" ] && [ $input -eq $input 2>/dev/null ]
					then
					trim_number=$(echo $input | sed 's/^0*//')
					if [ -z "$trim_number" ]
					then
						trim_number=0
					fi
					if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
					then
						tomcat_port_number=$trim_number
						break
					else
						echo "$invalid_port_number"
					fi
					else
					echo "$invalid_port_number"
					fi
			done
						
			echo "SSL Protocol:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_with_default_value pki_connector_ssl_protocol "$pki_connector_ssl_protocol"
			else
				pki_connector_ssl_enabled_protocol=$input_pki_connector_ssl_protocol
				show_message $pki_connector_ssl_protocol
			fi				
			echo "SSL Enabled Protocol:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_with_default_value pki_connector_ssl_enabled_protocol "$pki_connector_ssl_enabled_protocol"
			else
				pki_connector_ssl_enabled_protocol=$input_pki_connector_ssl_enabled_protocol
				show_message $pki_connector_ssl_enabled_protocol
			fi				
			echo "Cipher Text:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_with_default_value pki_connector_chipper_text "$pki_connector_chipper_text"
			else
				pki_connector_chipper_text=$input_pki_connector_chipper_text
				show_message $pki_connector_chipper_text
			fi				
			show_message $confirm_entered_details	
			while :
			do
				  if [ $use_silent_installer == "no" ]
				  then
					  read -e -i "n" toChange
				  else
					  toChange="n"
					  show_message "$toChange"
				  fi
				  show_message "$toChange" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
				  if [ $? != 0 ]
				  then
					  show_message $invalid_option
					  continue
				  else
					  break
				  fi
			
			done
			if [ $toChange = 'Y' -o $toChange = 'y' ]
			then
				continue
			else
				break	  	
			fi
		done
			
			
		echo Updating connector settings...
		
		#Updating tomcat port number
		replace_conf_parameters tomcat_port_number "$tomcat_port_number"
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@TOMCATPORTNUMBER@@" "$http_tomcat_port_number"
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@TOMCATPORTNUMBER@@" "$http_tomcat_port_number"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@TOMCATPORTNUMBER@@" "$http_tomcat_port_number"
		replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
		replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@TOMCATPORTNUMBER@@" "$http_tomcat_port_number"
		find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@TOMCATPORTNUMBER@@|$tomcat_port_number|g" {} \;
		
		#Updating connector properties to https
		update_connector_properties
		
	else
		echo "PKI Connector already configured."
	fi
	#-------
	#------- For Realm Settings
	
	echo "realm_updated" $realm_updated >> $ephesoft_log_file_name  2>&1
	set_ldap_msad_tomcat_user_connectivity
	#-------
	set_server_name
}

add_user() {
	ret=false
	useradd -m "$1" >/dev/null 2>&1 && ret=true

	if $ret; then
		show_message "user created $1"  >>$ephesoft_log_file_name  2>&1
		return 0
	else
		show_message "An error occurred while creating user $1"  >>$ephesoft_log_file_name  2>&1
		return 1
	fi
}

set_user_password() {

	echo $1:$2 | chpasswd
	if [ $? != 0 ]
	then
		return 1
	else
		return 0
	fi
}

#Takes the input from the user password
readinput_password() {
     while [ 0 ]
     do
     	readinput input
        eval $1='$input' >> $ephesoft_log_file_name  2>&1 
		break
     done

}

validate_user_exists() {
	ret=false
	getent passwd "$1" >/dev/null 2>&1 && ret=true

	if $ret; then
		show_message "yes the user exists $1"  >>$ephesoft_log_file_name  2>&1
		return 0
	else
		show_message "No, the user does not exist $1"  >>$ephesoft_log_file_name  2>&1
		return 1
	fi

}

takes_user_details() {

	echo "In taking user details" >>$ephesoft_log_file_name  2>&1
	while :
	do
			show_message $info_use_existing_user
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "n" overwrite_character
			else
				overwrite_character=$input_use_existing_user
				echo "$overwrite_character"
			fi
			echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
			if [ $? != 0 ]
			then
			   show_message $invalid_option
			   continue
			fi
			if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
			then
				show_message "$info_existing_user_name"
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "$product_name" application_user
				else
					application_user=$input_application_user
					echo "$application_user"
				fi
				
				validate_user_exists "$application_user"
				if [ $? != 0 ]
				then
					show_message "$application_user$info_existing_user_not_found"
					if [ $use_silent_installer == "no" ]
					then
						continue;
					else
						exit_script
					fi
				else
					echo  "$application_user found." >> $ephesoft_log_file_name  2>&1 
				fi
				
			else
				show_message "$caption_EphesoftTransact application will run as new user." >> $ephesoft_log_file_name  2>&1 
				show_message "$info_new_user_name"
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "$service_name" application_user
				else
					application_user=$input_application_user
					echo "$application_user"
				fi
				
				validate_user_exists "$application_user"
				if [ $? == 0 ]
				then
					show_message "$application_user$info_existing_user_already_exists"
					if [ $use_silent_installer == "no" ]
					then
						continue;
					else
						exit_script
					fi
					
				else
					show_message "$application_user not found. Let us create a new user."  >> $ephesoft_log_file_name  2>&1 
					add_user $application_user
					if [ $? != 0 ]
					then
						show_message "$info_existing_user_creation_error"
						if [ $use_silent_installer == "no" ]
						then
							continue;
						else
							exit_script
						fi
					else
						show_message "$application_user created successfully." >> $ephesoft_log_file_name  2>&1 
						show_message "$info_existing_user_set_password$application_user?"
						while :
						do
							if [ $use_silent_installer == "no" ]
							then
								read -e -i "y" password_required
							else
								password_required=$input_application_user_password_required
								echo "$password_required"
							fi
							echo "$password_required" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
									show_message $invalid_option
									continue
							else
									break
							fi
						done
						if [ $password_required = 'Y' -o $password_required = 'y' ]
						then
							while :
								do
									
									show_message "$info_existing_user_enter_password$application_user :"
									stty -echo
									if [ $use_silent_installer == "no" ]
									then
										readinput_password application_user_password
										stty echo
										echo ""
									else
										application_user_password="$input_application_user_password"
										stty echo
										echo ""
									fi
									
									echo -n $read_password_again
									echo ""
									stty -echo
									if [ $use_silent_installer == "no" ]
									then
										  readinput_password repeatpassword
										  stty echo
										  echo ""
									else
										  repeatpassword="$input_application_user_password"
										  stty echo
											echo ""
									fi
									if [ "$repeatpassword" != "$application_user_password" ]
									then
										echo $mismatch_password
										continue
									else
										break;
									fi
								done	
									
									set_user_password $application_user $application_user_password
									if [ $? != 0 ]
									then
										show_message "$info_existing_user_set_password_error"
										if [ $use_silent_installer == "no" ]
										then
											continue;
										else
											exit_script
										fi
									else
										show_message "Password updated successfully." >> $ephesoft_log_file_name  2>&1
									fi
								
							
						else
							show_message "Password not set." >> $ephesoft_log_file_name  2>&1
						fi

					fi
				fi
			fi
			# .........
			show_message "$info_existing_user_set_group"
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "$application_user" application_user_group
			else
				application_user_group=$input_application_user_group
				echo "$application_user_group"
			fi

			if grep -q $application_user_group /etc/group  
			then
				show_message "$application_user_group group already exists." >> $ephesoft_log_file_name  2>&1
			else
				groupadd $application_user_group
				if [ $? != 0 ]
				then
					show_message "An error occurred while adding group. Please try again."
					if [ $use_silent_installer == "no" ]
					then
						continue;
					else
						exit_script
					fi
				else
					show_message "Group created successfully." >> $ephesoft_log_file_name  2>&1
				fi
			fi
		usermod -g $application_user_group $application_user >>$ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
			show_message "An error occurred while adding user to the group. Please try again."
			if [ $use_silent_installer == "no" ]
			then
				continue;
			else
				exit_script
			fi
		else
			show_message "User added to the group successfully." >> $ephesoft_log_file_name  2>&1
		fi
		
		break;

	done


}

#Displays Ephesoft and version.
displayEphesoft() {
cat <<"EOT" 
                                                                
 @@@@@@@@#          @@@                                `@@@      
 @@@@@@@@#          @@@                                @@@@      
 @@@@####+          @@@                               @@@.  #    
 @@@,               @@@                               @@@  '@    
 @@@,     .@@ @@@`  @@@ @@@    ;@@@`   +@@#    @@@+  @@@@@;@@@@@ 
 @@@@@@@@..@@@@@@@' @@@@@@@@  @@@@@@+ @@@@@@ '@@@@@@`@@@@@@@@@@@ 
 @@@@@@@@..@@+ `@@@ @@@; ;@@`#@@  :@@ @@   ' @@@  @@@ @@@  @@    
 @@@';::;`.@@   .@@,@@@   @@,@@@   @@;@@@;  #@@   .@@,@@@  @@    
 @@@,     .@@    @@'@@@   @@,@@@@@@@@@:@@@@;@@@    @@'@@@  @@    
 @@@,     .@@   `@@:@@@   @@,@@@        #@@@@@@   `@@,@@@  @@    
 @@@+'''''.@@:  @@@ @@@   @@,#@@     :    @@`@@@  @@@ @@@  @@'   
 @@@@@@@@@.@@@@@@@# @@@   @@, @@@@@@@:@@@@@@ #@@@@@@; @@@  @@@@@ 
 @@@@@@@@@.@@.@@@;  @@@   @@,  #@@@@. #@@@@   ,@@@@`  @@@  `@@@@ 
          .@@                                                    
          .@@                                      
          .@@              @@@@@@  @@@@@@  @@@@@@  @@@@@@     @@     @@@@@@ @@@@@@
          .@@                   @  @    @       @       @    @ @     @    @ @    @
          .@@              @@@@@@  @    @  @@@@@@  @@@@@@      @     @    @ @    @
          .@@              @       @    @  @            @      @     @    @ @    @
          .@@              @@@@@@  @@@@@@  @@@@@@  @@@@@@ @ @@@@@@ @ @@@@@@ @@@@@@

EOT
}

dispayVersion() {
cat << "EOT"

@@@@@@  @@@@@@  @@@@@@  @@@@@@     @@     @@@@@@  @@@@@@
     @  @    @       @       @    @ @     @    @  @    @
@@@@@@  @    @  @@@@@@  @@@@@@      @     @    @  @    @
@       @    @  @            @      @     @    @  @    @
@@@@@@  @@@@@@  @@@@@@  @@@@@@ @ @@@@@@ @ @@@@@@  @@@@@@

EOT
}

if [[ $product_name == 'ephesoft' ]] || [[ $product_name == 'Ephesoft' ]]
then
    displayEphesoft
else
    echo $caption_EphesoftTransact
    dispayVersion
fi


#Creating configuration directory.
if [ ! -d $ephesoft_config_directory_path ]
then
        echo $info_creating_configuration_directory >>$ephesoft_log_file_name  2>&1
	create_folder "$ephesoft_config_directory_path" "$error_creating_configuration_directory"
	chmod -R 644 $ephesoft_config_directory_path >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ] 
      	then
          show_error_message_and_exit "$error_assigning_persmission $ephesoft_config_directory_path."
      	fi
fi

#Creating source folder
if [ ! -d $sources_folder ]
then
	create_folder "$sources_folder" "$error_creating_sources_folder"
	chmod -R 644 $sources_folder >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ] 
      	then
          show_error_message_and_exit "Error occurred while setting permissions $sources_folder "
      	fi
fi

#Creating configuration file
if [ ! -f $ephesoft_configuration_file ]
then
         echo $info_creating_configuration_file >>$ephesoft_log_file_name  2>&1
	 create_file "$ephesoft_configuration_file" "$error_creating_configuration_file"
fi

if [ ! -f $ephesoft_user_registration_information_file ]
then
         echo $info_creating_user_configuration_file >>$ephesoft_log_file_name  2>&1
	 create_file "$ephesoft_user_registration_information_file" "$error_creating_user_configuration_file"
fi

#Assigning parameter value to the dependencies
for param_name in "${ephesoft_conf_file_params[@]}"
do
   param_value=$(grep $param_name $ephesoft_configuration_file )
   if [ "$param_value" = '' ]
   then
        echo $param_name=0 >> $ephesoft_configuration_file
   fi
done

#Loading all configuration properties
while read -r i || [[ -n $i ]]
do
   var=`echo "$i" | awk -F"=" '{print $1}'`
   param=${i:`expr ${#var} + 1`:${#i}}
   eval $var=$param
done < $ephesoft_configuration_file

#Assigning parameter value to the dependencies
for param_name in "${ephesoft_user_conf_file_params[@]}"
do
   param_value=$(grep $param_name $ephesoft_user_registration_information_file )
   if [ "$param_value" = '' ]
   then
        echo $param_name="" >> $ephesoft_user_registration_information_file
   fi
done

#Loading all configuration properties
while read -r i || [[ -n $i ]]
do
   var=`echo "$i" | awk -F"=" '{print $1}'`
   param=${i:`expr ${#var} + 1`:${#i}}
   eval $var=\'$param\'

done < $ephesoft_user_registration_information_file

#Maintaing version the last installed
last_installed_version=$ephesoft_installed

#Check for 4501 or 4502 as OmniPage upgrade is not required when upgrading 4501 and 4502

if ( [ "$ephesoft_installed" == "$installed_version4502" ] || [ "$ephesoft_installed" == "$installed_version4501" ] )
then
	poco_upgrade_required=0
	nuance_upgrade_required=0
fi

# Patch Installer check
if [ $patch_installer = "y" ]
then
   temp_ephesoft_installed=${ephesoft_installed//[._]/}
   temp_ephesoft_version=${ephesoft_version//[._]/}
   temp_ephesoft_installed=${temp_ephesoft_installed:0:4}
   temp_ephesoft_version=${temp_ephesoft_version:0:4}
   check_if_alias_present
       	  if [ "$ephesoft_installed" = "$ephesoft_version" ]
      	  then
	      show_error_message_and_exit "$error_already_installed_upgrade"
	  fi
	  vercomp_patch "$ephesoft_version" "$ephesoft_installed"
	  if [[ "$is_patch_version_check_pass" == "no" ]]
	  then    
	      show_error_message_and_exit "$error_cannot_upgrade"
	  fi

fi


echo $ephesoft_preview_version
use_silent_installer=yes

if [[ $1 == "-silentinstall" ]]
then
  use_silent_installer=yes
  if [[ $is_generic_installer == 0 ]]
  then
      if [ $patch_installer = "n" ]
      then
	  echo $info_installing_as_silent_installer
      else
	  echo $info_installing_patch_as_silent_installer
      fi
  fi
else
    echo $info_silent_installer_message
    while :
    do	 
      read -e -i "n" overwrite_character
      echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
      if [ $? != 0 ]
      then
	    echo $invalid_option
	    continue
      fi
      if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
      then
	    use_silent_installer=yes
    	    if [[ -f "$installation_log_file" ]]
	    then
	    	delete_files_and_show_message_if_error_occurred "$installation_log_file" "$error_deleting_installation_log_file"
	    fi
      else
	    use_silent_installer=no
      fi
    break;
    done 
fi

if [[ $patch_installer == "y" ]]
then
      silent_installer_params=( "${silent_installer_params_upgrade[@]}" )
      input_forcefully_stop_running_server=y
      input_upgrade_application=y
else
      silent_installer_params=( "${silent_installer_params_fresh[@]}" )
fi

if [ $use_silent_installer == "yes" ]
then
	if [[ ! -f $response_file ]]
	then
	  show_error_message_and_exit "$error_response_file_not_found"
	fi
	#Assigning param value to the silent installer
	for param_name in "${silent_installer_params[@]}"
	do
	  param_value=$(grep $param_name $response_file )
	done
	
	while read -r i || [[ -n $i ]] 
	do
	  temp=`echo $i | grep "="`
	  if [[ $temp == '' ]]
	  then
	      continue
	  fi
	  var=`echo "$i" | awk -F"=" '{print $1}'`
	  param=${i:`expr ${#var} + 1`:${#i}}
	  eval $var='$param' >> $ephesoft_log_file_name  2>&1
	  if [ $? != 0 ] #&& [  ]
	  then
		show_error_message_and_exit "Error in config.properties file in $var."
	  fi

	done < $response_file


        #Verification of inputs from properties file
	for param_name in "${silent_installer_params[@]}"
	do
	      value=""
	      while read -r i || [[ -n $i ]]
	      do
		var=`echo "$i" | awk -F"=" '{print $1}'`
		if [[ "$var" = "$param_name" ]]
		then
			param=${i:`expr ${#var} + 1`:${#i}}
		     value="$param"
		    break
		fi
		
	      done < $response_file
		  if [[ $param_name == input_use_existing_user || $param_name == input_application_user || $param_name == input_application_user_group ]] && [[ $input_run_application_as_non_root_user != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_application_user_password ]] && [[ $input_run_application_as_non_root_user != "y" && $input_application_user_password_required != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_changed_server_name ]] && [[ $input_change_server_name != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_changed_shared_folder_path ]] && [[ $input_change_shared_folder_path != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_existing_shared_folder_path ]] && [[ $input_existing_shared_folder != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_mounted_sharedfolder_path ]] && [[ $input_install_multiserver != "y" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_new_database_instance || $param_name == input_system_ip_name || $param_name == input_database_username || $param_name == input_database_port_number || $param_name == input_database_password || $param_name == input_admin_database_username || $param_name == input_admin_database_password || $param_name == input_application_database_name || $param_name == input_report_database_name || $param_name == input_report_archive_database_name ]] && [[ $input_database_type != "1" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_new_database_schema || $param_name == input_oracle_database_username || $param_name == input_oracle_database_password || $param_name == input_oracle_database_server_name || $param_name == input_oracle_database_port_number || $param_name == input_oracle_database_connection_mode || $param_name == input_oracle_database_sid || $param_name == input_oracle_database_service_name || $param_name == input_oracle_database_application_db_schema || $param_name == input_oracle_database_application_db_password || $param_name == input_oracle_database_report_db_schema || $param_name == input_oracle_database_report_db_password || $param_name == input_oracle_database_report_archive_db_schema || $param_name == input_oracle_database_report_archive_db_password ]] && [[ $input_database_type != "2" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_pki_server_cert_path || $param_name == input_pki_server_cert_password || $param_name == input_pki_ca_cert_path || $param_name == input_pki_ca_cert_password || $param_name == input_pki_alias_name || $param_name == input_pki_connector_port_number || $param_name == input_pki_connector_ssl_protocol || $param_name == input_pki_connector_ssl_enabled_protocol || $param_name == input_pki_connector_chipper_text ||  $param_name == input_pki_username_retriever ]] && [[ $input_authentication_mode != "2" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_realm_connection_url || $param_name == input_realm_connection_name || $param_name == input_realm_user_password || $param_name == input_realm_user_base || $param_name == input_realm_user_search || $param_name == input_realm_role_base || $param_name == input_realm_role_name || $param_name == input_realm_role_search || $param_name == input_msactivedirectory_group_search_filter || $param_name == input_realm_user_sub_tree || $param_name == input_realm_role_sub_tree ]] && [[ $input_connectivity_user_connection != "1" ]]
		  then
			continue;
		  fi
		 
		  if [[ $param_name == input_realm_role_search ]] && [[ $input_connectivity_user_connection != "3" && $input_authentication_mode != "2" || $input_connectivity_user_connection == "3" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_application_communication_protocol ]] && [[ $input_authentication_mode != "1" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_form_https_keystore_cert_path || $param_name == input_form_https_keystore_cert_password ]] && ! [[ $input_authentication_mode == "1" && $input_application_communication_protocol == "2" ]]
		  then
			continue;
		  fi
	      
		  if [[ $param_name == input_oracle_database_sid ]] && [[ $input_oracle_database_connection_mode != "1" ]]
		  then
			continue;
		  fi
		  
		  if [[ $param_name == input_oracle_database_service_name ]] && [[ $input_oracle_database_connection_mode != "2" ]]
		  then
			continue;
		  fi
	      if [ $param_name == input_installation_directory ] || [ $param_name == input_mounted_sharedfolder_path ] || [ $param_name == input_existing_shared_folder_path ] || [ $param_name == input_changed_shared_folder_path ]
	      then
		      value=$(echo "$value" | sed s#//*#/#g)
		      value=$(echo "$value" | sed 's#/*$##')
	      	      echo "$value" | grep  '^\s*/\+[a-zA-Z0-9]\+[a-zA-Z0-9\_/"-]*\s*$'  >> $ephesoft_log_file_name  2>&1 
		      if [ $? != 0 ]
		      then
			  show_error_message_and_exit "$error_invalid_path $error_config_file $param_name."
		      fi
	      fi
	      
	      if [ $param_name == input_tomcat_port_number ] || [ $param_name == input_database_port_number ] || [ $param_name == input_oracle_database_port_number ] || [ $param_name == input_pki_connector_port_number ]
	      then
		  if [ -n "$value" ] && [ $value -eq $value 2>/dev/null ]
		  then
		      trim_number=$(echo $value | sed 's/^0*//')
		      if [ -z "$trim_number" ]
		      then
			      trim_number=0
		      fi
		      if [ $trim_number -gt 1024 ] && [ $trim_number -le 65534 ]
		      then
			      continue
		      else
			      show_error_message_and_exit "$invalid_port_number $error_config_file $param_name."
		      fi
		  else
		      show_error_message_and_exit "$invalid_port_number $error_config_file $param_name."
		  fi
	      fi
	      
	      if [ $param_name == input_new_database_instance ] || [ $param_name == input_install_tesseract ] || [ $param_name == input_database_patch_enable ] || [ $param_name == input_install_multiserver ] || [[ $param_name == input_existing_shared_folder ]] || [[ $param_name == input_change_shared_folder_path ]] || [[ $param_name == input_change_server_name ]] || [[ $param_name == input_upgrade_application ]] || [[ $param_name == input_forcefully_stop_running_server ]] || [[ $param_name == input_run_application_as_non_root_user ]] || [[ $param_name == input_use_existing_user ]] || [[ $param_name == input_application_user_password_required ]] || [[ $param_name == input_offline_install_mode ]] || [[ $param_name == input_new_database_schema ]] || [[ $param_name == input_disable_firewall ]] || [[ $param_name == input_disable_os_warning ]]
	      then
		  echo "$value" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
		  if [ $? != 0 ]
		  then
			  show_error_message_and_exit "$invalid_option $error_config_file $param_name."
		  fi
	      fi
	    
	      if [ $param_name == input_system_ip_name ] || [ $param_name == input_changed_server_name ] || [ $param_name == input_user_registration_city ] || [ $param_name == input_user_registration_company ] || [ $param_name == input_user_registration_country ] || [ $param_name == input_user_registration_department ] || [ $param_name == input_user_registration_name ] || [ $param_name == input_user_registration_state ] || [ $param_name == input_user_registration_street ] || [ $param_name == input_oracle_database_server_name ] || [ $param_name == input_oracle_database_service_name ] || [ $param_name == input_oracle_database_sid ] || [ $param_name == input_application_user ] || [ $param_name == input_application_user_password ] || [ $param_name == input_application_user_group ] || [ $param_name == input_oracle_database_username ] || [ $param_name == input_pki_server_cert_password ] || [ $param_name == input_pki_ca_cert_password ] || [ $param_name == input_pki_connector_chipper_text ] || [ $param_name == input_pki_username_retriever ]  || [ $param_name == input_pki_connector_ssl_protocol ] || [ $param_name == input_pki_connector_ssl_enabled_protocol ] || [ $param_name == input_realm_connection_url ] || [ $param_name == input_realm_connection_name ] || [ $param_name == input_realm_user_password ] || [ $param_name == input_realm_user_base ] || [ $param_name == input_realm_user_search ] || [ $param_name == input_realm_user_sub_tree ] || [ $param_name == input_realm_role_name ] || [ $param_name == input_realm_role_sub_tree ] || [ $param_name == input_realm_role_search ] || [ $param_name == input_pki_alias_name ]
	      then
		  if [ "$value" == '' ] 
		  then
		      show_error_message_and_exit "$error_config_file $param_name."
		  fi
	      fi
	      if [ $param_name == input_application_database_name ] || [ $param_name == input_report_database_name ] || [ $param_name == input_report_archive_database_name ] || [ $param_name == input_oracle_database_application_db_schema ] || [ $param_name == input_oracle_database_report_db_schema ] || [ $param_name == input_oracle_database_report_archive_db_schema ]
	      then
		  if [[ "$value" =~ [^_a-zA-Z0-9] ]] || [ ${#value} -eq 0 ] || [ ${#value} -gt 64 ]
		  then
			show_error_message_and_exit "$invalid_input_mysql_database $error_config_file $param_name."
		  fi
	      fi
	      
	      if [ $param_name == input_database_type ] || [ $param_name == input_oracle_database_connection_mode ] || [ $param_name == input_authentication_mode ] || [ $param_name == input_application_communication_protocol ]
	      then
		  if [[ "$value" =~ [^1-2] ]] || [ ${#value} -lt 1 ] || [ ${#value} -gt 2 ]
		  then
			show_error_message_and_exit "$error_config_file $param_name."
		  fi
	      fi
		  
	      if [ $param_name == input_connectivity_user_connection ] && [ $input_authentication_mode == "1" ]
	      then
			  if [[ "$value" =~ [^1-3] ]] || [ ${#value} -lt 1 ] || [ ${#value} -gt 3 ]
			  then
				show_error_message_and_exit "$error_config_file $param_name."
			  fi
	      fi
		  
	      if [ $param_name == input_connectivity_user_connection ] && [ $input_authentication_mode == "2" ]
	      then
			  if [[ "$value" =~ [^1-2] ]] || [ ${#value} -lt 1 ] || [ ${#value} -gt 2 ]
			  then
				show_error_message_and_exit "$error_config_file $param_name."
			  fi
	      fi
	      
	      if [[ $param_name == input_database_username ]] || [[ $param_name == input_admin_database_username ]]
	      then
		  if UsernameTest "$value" #|| [[ ${#value} -eq 0 ]] # [[ "$value" =~ [^_a-zA-Z0-9] ]] #old validation
		  then
			echo "Correct user name" >> $ephesoft_log_file_name  2>&1
		  else
			show_message "$invalid_input_mysql_policy $error_config_file $param_name."
		  fi		  
	      fi
	      if [[ $param_name == input_database_password ]] || [[ $param_name == input_admin_database_password ]] || [[ $param_name == input_oracle_database_password ]] || [[ $param_name == input_oracle_database_application_db_password ]] || [[ $param_name == input_oracle_database_report_db_password ]] || [[ $param_name == input_oracle_database_report_archive_db_password ]]
 	      then
      		PasswordTest "$value"
	    	ret=$?
			if [ $ret -eq 0 ]
			then
				show_message "$invalid_input_mysql_password_policy $error_config_file $param_name."
			fi
	      fi
	      if [ $param_name == input_realm_role_base ] 
 	      then
      		validate_realm_role_base "$value"
	    	ret=$?
			if [ $ret -eq 1 ]
			then
				show_message "$invalid_role_base $error_config_file $param_name."
			fi
	      fi
		  
		  if [ $param_name == input_pki_server_cert_path ] || [ $param_name == input_pki_ca_cert_path ] || [ $param_name == input_form_https_keystore_cert_path ]
	      then
			  if [[ ! -f "$value" ]]
			  then
					show_error_message_and_exit "$error_config_file $param_name."
			  fi
	      fi
	done
fi

echo $info_start_installation

#Checking for Internet connection.
echo $info_checking_internet_connection
temp_offline_install=n
x=`ping -c1 google.com 2>&1 | grep "unknown\|100% packet loss"`
if [ ! "$x" = "" ]; 
then
		show_message "$warning_no_internet"
        show_message "$do_you_want_to_continue"
		while :
		do
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "y" overwrite_character
			else
				overwrite_character=$input_offline_install_mode
				echo "$overwrite_character"
			fi
			echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
			if [ $? != 0 ]
			then
				  echo $invalid_option
				  continue
			fi
			if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
			then
				temp_offline_install=y
				break
			else if [ $overwrite_character = 'n' -o $overwrite_character = 'N' ]
				then
					show_error_message_and_exit "$error_connecting_internet"
					break
				fi
			fi
		done
fi
# Determining Red Hat or Ubuntu
check_current_os_version
task=$(cat /etc/*release)
SOURCE="Ubuntu"
os_min_version="NA"
os_max_version="NA"
if echo "$task" | grep -q "$SOURCE"; then
  operating_system_detected=1
  linux_name="UBUNTU"
  operating_system=$ubuntu
  os_min_version=$ubuntu_min
  os_max_version=$ubuntu_max
elif echo "$task" | grep -q "Red Hat"
    then
	operating_system_detected=1
	linux_name="RED HAT"
	operating_system=$redhat
	os_min_version=$redhat_min
	os_max_version=$redhat_max
elif echo "$task" | grep -q "CentOS"
    then
	operating_system_detected=1
	linux_name="CENT OS"
	operating_system=$centos
	os_min_version=$centos_min
	os_max_version=$centos_max	
elif echo "$task" | grep -q "Amazon Linux" && echo "$task" | grep -q "rhel"
    then
	operating_system_detected=1
	linux_name="AMAZON LINUX"
	operating_system=$amazon_linux
	os_supported="Valid"
else 
# 	By default redhat operating system
	operating_system_detected=0
	operating_system=$redhat
	os_name=$operating_system
	os_min_version=$redhat_min
	os_max_version=$redhat_max
fi

if [ $os_name = 0 ] || [ $os_name != $operating_system ] && [ $operating_system_detected = 1 ]
then
      echo $linux_name $info_installer_os
      while :
		do
		  if [ $use_silent_installer == "no" ]
		  then
			read -e -i "n" overwrite_character
		  else
			overwrite_character="n"
			echo "$overwrite_character"
		  fi
		  echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
		  if [ $? != 0 ]
		  then
			echo $invalid_option
			continue
		  fi
		  if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
		  then
		    echo $info_installer_select_os
		    while :
		    do
			      read -e -i "a" overwrite_character
			      echo "$overwrite_character" | grep '^[aAcCrRuU]$' >> $ephesoft_log_file_name 2>&1
			      if [ $? != 0 ]
			      then
				    echo $invalid_option_os
				    continue
			      fi
			      if [ $overwrite_character = 'r' -o $overwrite_character = 'R' ]
			      then
				      selected_operating_system=$redhat
			      elif [ $overwrite_character = 'u' -o $overwrite_character = 'U' ]
				  then
				      selected_operating_system=$ubuntu
				  elif [ $overwrite_character = 'c' -o $overwrite_character = 'C' ]
				  then
				      selected_operating_system=$centos
				  elif [ $overwrite_character = 'a' -o $overwrite_character = 'A' ]
				  then
				      selected_operating_system=$amazon_linux
			      fi
			     
			      if [ $operating_system != $selected_operating_system ]
			      then
				    if [ $selected_operating_system = $ubuntu ]
				    then
						linux_name="UBUNTU"
				    elif [ $selected_operating_system = $redhat ]
					then
						linux_name="Red Hat"
					elif [ $selected_operating_system = $centos ]
					then
						linux_name="Cent OS"
					elif [ $selected_operating_system = $amazon_linux ]
					then
						linux_name="Amazon Linux"
				    fi
					
					if [ $operating_system = $amazon_linux ]
					then
						echo $info_selecting$linux_name$info_selecting_cause_issue Amazon Linux$info_selecting_want_to_continue
					else
						echo $info_selecting$linux_name$info_selecting_cause_issue$operating_system$info_selecting_want_to_continue
					fi
				    while :
				    do
					read -e -i "n" overwrite_character
					echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
					if [ $? != 0 ]
					then
					      echo $invalid_option
					      continue
					fi
					if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
					then
						operating_system=$selected_operating_system
						break
					else if [ $overwrite_character = 'n' -o $overwrite_character = 'N' ]
					    then
						break
					    fi
					fi
				    done
			      else
				  operating_system=$selected_operating_system
			      fi
			      if [ $operating_system != $selected_operating_system ]
			      then
				  echo $info_installer_select_os
				  continue
			      else
				  break
			      fi  
		    done
		      
		  fi
		break;
      done 
      replace_conf_parameters os_name "$operating_system" 
else
    operating_system=$os_name
fi

if [ $operating_system = $centos ] 
then
	operating_system=$redhat
	is_centos=1
elif [ $operating_system = $amazon_linux ] 
then
	operating_system=$redhat
	is_amazon_linux=1
fi

#Deleting extra dependencies from ephesoft.conf file
if [ $operating_system = $ubuntu ]
then
	sed -i /checkinstall=0/d  $ephesoft_configuration_file >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		echo $error_in_removing checkinstall $error_in_removing_dependency_conf_file
	fi
	sed -i /dev_tools=0/d  $ephesoft_configuration_file >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		echo $error_in_removing dev_tools $error_in_removing_dependency_conf_file
	fi
fi

if [ $operating_system = $ubuntu ]
then
	# Remove ppa for libreoffice if exists. If user tries to install Ephesoft on supported ubuntu platform earlier then ppa will be present in the OS. So removing it before updating the softwares. 
	echo "\n" |  add-apt-repository --remove ppa:libreoffice/libreoffice-4-2 >>$ephesoft_log_file_name  2>&1 
	if [ $? != 0 ]
	then
		echo "Error in removing LibreOffice ppa." >>$ephesoft_log_file_name  2>&1 
	fi

	echo $update_packages_repositories
	apt-get -f install -y >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$error_building_dependency_tree"
	fi
	apt-get update >>$ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
	then
		show_error_message_and_exit "$error_update_package_repositories"
	fi
fi

#Installing pipe viewer dependencies.
if [ $operating_system = $ubuntu ]
then
      apt-get install -y pv  >> $ephesoft_log_file_name 2>&1 
      if [ $? != 0 ]
      then 
	is_pv_installed="n"
      else
	is_pv_installed="y"
      fi
fi

#Installing bc viewer dependencies.
if [ $operating_system = $ubuntu ]
then
	#Check added if binary calculator is already installed then no need to install it again.
	bc -version	>> $ephesoft_log_file_name 2>&1 
	if [ $? != 0 ]
	then
		apt-get install -y bc  >> $ephesoft_log_file_name 2>&1 
	fi
fi

#Installing bc viewer dependencies.
if [ $operating_system = $redhat ]
then
	#Check added if binary calculator is already installed then no need to install it again.
	bc -version	>> $ephesoft_log_file_name 2>&1 
	if [ $? != 0 ]
	then
		yum install -y bc  >> $ephesoft_log_file_name 2>&1 
	fi
fi
#Check for Valid Operating system
if [ $os_min_version != "NA" ] && [ $os_max_version != "NA" ] 
then
	check_is_valid_os_version $os_min_version $os_max_version
	if [ $os_supported = "Lower" ]
	then
		show_error_message_and_exit "$error_lower_version_of_os"
	fi
	if [ $os_supported = "Upper" ]
	then
		echo $warning_upper_version_of_os
		echo "Do you want to continue [y/n]"
		while :
        do
          if [ $use_silent_installer == "no" ]
          then
            read -e -i "n" overwrite_character
          else
            overwrite_character=$input_disable_os_warning
            echo "$overwrite_character"
          fi
            echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
            if [ $? != 0 ]
            then
                echo $invalid_option
                continue
            fi
            if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
            then
                break;
            else
                exit
            fi
        done
	fi
fi
if [[ $application_user != 0 ]] && [ $patch_installer = "n" ] && [ $ephesoft_application = 0 ]
then
	while :
	do
			show_message "$caption_EphesoftTransact Application will run as $application_user. Do you want to change it ?"
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "n" overwrite_character
			else
				overwrite_character="n"
				echo "$overwrite_character"
			fi
			echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
			if [ $? != 0 ]
			then
			   echo $invalid_option
			   continue
			fi
			if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
			then
				application_user=0
			fi
		break;
	done
else if [[ $application_user != 0 ]]
	then
		show_message "$caption_EphesoftTransact Application will run as $application_user."
	fi
fi

if [[ $application_user == 0 ]] && [ $patch_installer = "n" ]
then
	while :
	do

			echo "Do you want to run $caption_EphesoftTransact Application as a non-root user?"
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "y" overwrite_character
			else
				overwrite_character=$input_run_application_as_non_root_user
				echo "$overwrite_character"
			fi
			echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
			if [ $? != 0 ]
			then
			   echo $invalid_option
			   continue
			fi
			if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
			then
				takes_user_details
			else
				echo "$product_name application will run as ROOT user." >> $ephesoft_log_file_name  2>&1
				application_user="root"
				application_user_group="root"
			fi
		replace_conf_parameters application_user $application_user
		replace_conf_parameters application_user_group $application_user_group
		break;
	done
fi

#Set PATH environment variable
echo Previous path is $PATH >> $ephesoft_log_file_name  2>&1
BINARIES_PATH=""
if [ $operating_system = $redhat ]
then
	BINARIES_PATH=/usr/local/sbin:/usr/local/bin
else if [ $operating_system = $ubuntu ]
	then
		BINARIES_PATH=/usr/bin:/usr/local/bin
	fi
fi
echo BINARIES_PATH set as $BINARIES_PATH >> $ephesoft_log_file_name  2>&1
if [[ :$PATH: == *:"$BINARIES_PATH":* ]]
then
	echo "$BINARIES_PATH path already exists "  >> $ephesoft_log_file_name  2>&1
else
	export PATH=$BINARIES_PATH:$PATH
fi
echo Updated path is $PATH >> $ephesoft_log_file_name  2>&1

#Installing Ephesoft Application.
if [ $ephesoft_application = 0 ] && [ $patch_installer = "n" ] && [ ! -f $upgrade_configuration_file ]
then
    if [ ! -f $ephesoft_installation_file  ] 
    then
	show_error_message_and_exit "$error_ephesoft_installation_file_not_exist"
    fi
    while :
    do
      	echo $info_enter_application_path        
	take_input_path "$installationDirectory" "$input_installation_directory"
	installationDirectory=$input
	hyphen="/"
	baseInstallationDirectory=$hyphen`echo $installationDirectory | cut -d "/" -f2`$hyphen
	check_available_disk_space $baseInstallationDirectory

         if [ ! -d $installationDirectory ]
         then
		if [ -f $installationDirectory ]
      		then
          		echo $info_file_already_exists                        
          		while :
          		do
          		if [ $use_silent_installer == "no" ]
		        then
				read -e -i "y" overwrite_character
			else
				overwrite_character="y"
				echo "$overwrite_character"
			fi
               		echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
               		if [ $? != 0 ]
               		then
                   		echo $invalid_option
                   	continue
               		fi
               		if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               		then
                   		echo $info_overwriting_ephesoft_folder
				delete_files_and_show_message_if_error_occurred "$installationDirectory" ""
				break;
               		else
	            		exit_script
               		fi
           		done
        	fi   
        	
            	mkdir -p $installationDirectory
            	if [ $? != 0 ]
            	then
			 show_error_message_and_exit "$error_creating_ephesoft_directory"
	    	else 
			 break;
            	fi
         else
            break;
         fi
      done
               
      if [ -d $installationDirectory/$installationDirectory_folder_name -o -f $installationDirectory/$installationDirectory_folder_name ]
      then
          echo $info_ephesoft_folder_already_exists                        
          while :
          do
	       if [ $use_silent_installer == "no" ]
	       then
		    read -e -i "y" overwrite_character
	       else
		    overwrite_character="y"
		    echo "$overwrite_character"
	       fi
               echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
               if [ $? != 0 ]
               then
                   echo $invalid_option
                   continue
               fi
               if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               then
		   rm -rf $installationDirectory/$installationDirectory_folder_name/Application $installationDirectory/$installationDirectory_folder_name/Dependencies $installationDirectory/$installationDirectory_folder_name/JavaAppServer $installationDirectory/$installationDirectory_folder_name/Documents $installationDirectory/$installationDirectory_folder_name/Version $installationDirectory/$installationDirectory_folder_name/ReadMe.txt
                   echo $info_overwriting_ephesoft_folder
                   break;
               else
	           exit_script
               fi
           done
	  else
		create_folder "$installationDirectory/$installationDirectory_folder_name" "$error_creating_ephesoft_directory"
        fi

	extract_tar_file "$info_extracting_ephesoft_tar" "$ephesoft_installation_file" "/tmp/" "$error_extracting_ephesoft_tar"
	

	installationDirectory=$installationDirectory/$installationDirectory_folder_name
	echo $info_assigning_permission_folder >> $ephesoft_log_file_name  2>&1

        chmod -R 755 $installationDirectory  >> $ephesoft_log_file_name  2>&1
		if [ $? != 0 ] 
      	then
          show_error_message_and_exit "$error_assigning_permission_installation_directory"
      	fi
	
	echo $info_copying_ephesoft_folder
	
	copy_directory_recursively "$temp_ephesoft_folder/Application" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_application_folder"
	
	copy_directory_recursively "$temp_ephesoft_folder/EphesoftReports" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_reports_folder"
	
	copy_directory_recursively "$temp_ephesoft_folder/Dependencies" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_dependencies_folder"
	
	copy_directory_recursively "$temp_ephesoft_folder/Licenses" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_licenses_folder"

	copy_directory_recursively "$temp_ephesoft_folder/Version" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_version_folder"

	copy_directory_recursively "$temp_ephesoft_folder/JavaAppServer" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_javaappserver_folder"
	
	copy_directory_recursively "$temp_ephesoft_folder/Utility" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_utility_folder"

	copy_directory_recursively "$temp_ephesoft_folder/ReadMe.txt" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_readme_file"
	
	copy_directory_recursively "$temp_ephesoft_folder/$certs_folder_name" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_certs_folder"

	#replace dcma-reporting folder corresponding to MariaDB
	copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/MARIADB/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/" "" "$error_mariadb_copy_reporting"

	#replace dcma-data-access folder corresponding to MariaDB
	copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/MariaDB/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/" "" "$error_mariadb_copy_data_access_files"
	
	replace_property_file_values "$installationDirectory/Dependencies" "*.sql" "@@INSTALL_DIR@@" "$installationDirectory"
		
	install_python
	
        chmod -R 755 $installationDirectory  >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ] 
      	then
          show_error_message_and_exit "$error_assigning_permission_installation_directory"
      	fi
		
		if [ -d "$installationDirectory/Application/WEB-INF/temp" ]
		then
			delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/temp" "Error occurred while deleting $installationDirectory/Application/WEB-INF/temp folder."
		fi
		# Setting java path in case of Ephesoft installation and libreoffice is already installed. This is due to while uninstalling Ephesoft, java path file is removed.
		if [ $operating_system = $redhat ] && [[ $libreoffice = 1 ]]
		then
			set_java_path_libreoffice
		fi

		
	echo $info_use_existing_shared_folders
	while :
        do
	   if [ $use_silent_installer == "no" ]
	   then
		read -e -i "n" sharedFoldersChar
	   else
		if [ $input_install_multiserver == "y" ] || [ $input_existing_shared_folder == "y" ]
		then
		      sharedFoldersChar="y"
		else
		      sharedFoldersChar="n"
		      echo "$sharedFoldersChar"
		fi
	   fi
           echo "$sharedFoldersChar" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
           if [ $? != 0 ]
           then
              	echo $invalid_option
                continue
           fi
           if [ $sharedFoldersChar = 'y' -o $sharedFoldersChar = 'Y' ]
           then
		patch_enable=false
		workflow_deploy=false
                is_existing_shared_folder="y"
		random_number=45
		echo $info_enter_mounted_shared_folder_path
                while :
                do
			if [ $use_silent_installer == "no" ]
			then
			     take_input_path "$sharedFoldersPath" "$input_mounted_sharedfolder_path"
			     sharedFoldersPath=$input
			else
			    if [ $input_install_multiserver == "y" ]
			    then
				  sharedFoldersPath=$input_mounted_sharedfolder_path
				  echo $sharedFoldersPath
			    else if [ $input_existing_shared_folder == "y" ]
				 then
				      sharedFoldersPath=$input_existing_shared_folder_path
				      echo $sharedFoldersPath
				 fi
			    fi
			     
			fi
                        echo "$sharedFoldersPath" | grep  '^\s*/\+[a-zA-Z0-9]\+[a-zA-Z0-9\_/"-]*\s*$' >> $ephesoft_log_file_name  2>&1
                        if [ $? = 0 ]
                        then
                           break
                        else
                           echo $error_invalid_path
                        fi
                 done
                 if [ ! -d $sharedFoldersPath ]
                 then
		       if [ -f $sharedFoldersPath ]
      		       then
          			echo $info_file_already_exists
          			while :
          			do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "y" overwrite_character
					else
						overwrite_character="y"
						echo "$overwrite_character"
					fi
		               		echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
               				if [ $? != 0 ]
               				then
                		   		echo $invalid_option
                			   	continue
               				fi
               				if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               				then
                		   		echo $info_overwriting_ephesoft_folder
						delete_files_and_show_message_if_error_occurred "$sharedFoldersPath" ""
                		   		break;
               				else
						exit_script
               				fi
           			done
        		   fi
                      mkdir -p $sharedFoldersPath
                      if [ $? != 0 ]
                      then
                           echo $error_creating_directory_at_path
                           continue
                      else
                           echo $success_creating_directory
                           break;
                      fi
                  else
			  echo $info_path_already_exist
                          break;
                  fi
		  sharedFoldersPath=$sharedFoldersPath
                  break;
            else
		echo $info_shared_folder_installed$installationDirectory$info_change_shared_folder_path
        	while :
        	do
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "n" sharedFoldersChar
			else
				sharedFoldersChar=$input_change_shared_folder_path
				echo "$sharedFoldersChar"
			fi
           		echo "$sharedFoldersChar" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
           		if [ $? != 0 ]
           		then
              			echo $invalid_option
                	continue
           		fi
           		if [ $sharedFoldersChar = 'y' -o $sharedFoldersChar = 'Y' ]
           		then
                		break;
           		else
           		
				copy_directory_recursively "$temp_ephesoft_folder/SharedFolders" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_shared_folders"

				chmod -R 755 $installationDirectory/SharedFolders  >> $ephesoft_log_file_name  2>&1
				if [ $? != 0 ] 
      				then
          				echo $error_assigning_permission_shared_folders
      				fi
                		break;
           		fi
        	done
		while :
       		do
            		if [ $sharedFoldersChar = 'y' -o $sharedFoldersChar = 'Y' ] 
            		then       
                 	echo $info_enter_path_shared_folders
			sharedFoldersPath="/"
			take_input_path "$sharedFoldersPath" "$input_changed_shared_folder_path"
			sharedFoldersPath=$input
                	  if [ ! -d $sharedFoldersPath ]
                	  then
				if [ -f $sharedFoldersPath ]
      				then
          				echo $info_file_already_exists
          			while :
          			do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "y" overwrite_character
					else
						overwrite_character="y"
						echo "$overwrite_character"
					fi
		               		echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
               				if [ $? != 0 ]
               				then
                		   		echo $invalid_option
                			   	continue
               				fi
               				if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               				then
                		   		echo $info_overwriting_ephesoft_folder
						delete_files_and_show_message_if_error_occurred "$sharedFoldersPath" ""
                		   		break;
               				else
	        		    		exit_script
               				fi
           			done
        		fi
                	      echo $info_directory_not_exist                                                
                	      mkdir -p $sharedFoldersPath
                	      if [ $? != 0 ]
                	      then
                	           echo $error_creating_directory_at_path
                	           continue
                	      else
                	           echo $success_creating_directory
                	           break;
                	      fi
                	   else
                	           break;
                	   fi
               		else
                   		break;
               		fi
           	done
          	 if [ $sharedFoldersChar = 'y' -o $sharedFoldersChar = 'Y' ]
          	 then       
               		echo $info_assigning_shared_folder_permission
               		chmod -R 755 $sharedFoldersPath  >> $ephesoft_log_file_name  2>&1
			if [ $? != 0 ] 
		      	then
		          show_error_message_and_exit "$error_assigning_persmission $sharedFoldersPath."
		      	fi
               		echo $info_copying_shared_folders_to_path
	       		cp -R $temp_ephesoft_folder/SharedFolders $sharedFoldersPath >> $ephesoft_log_file_name  2>&1
               		if [ $? = 0 ] 
               		then 
                   			sharedFoldersPath=$sharedFoldersPath/SharedFolders
					create_folder "$sharedFoldersPath/SavedDashboards" "$error_creating_saveddashboard_directory"
        	              	chmod -R 755 $sharedFoldersPath >> $ephesoft_log_file_name  2>&1
				if [ $? != 0 ] 
			      	then
			          show_error_message_and_exit "$error_assigning_persmission $sharedFoldersPath."
			      	fi
               		else
					delete_files_and_show_message_if_error_occurred "$sharedFoldersPath/SharedFolders" "$error_removing_shared_folders"
					show_error_message_and_exit "$error_copying_shared_folders_to_path"
               		fi
            	else
                	sharedFoldersPath=$installationDirectory/SharedFolders
			create_folder "$sharedFoldersPath/SavedDashboards" "$error_creating_saveddashboard_directory"
			chmod -R 755 $sharedFoldersPath >> $ephesoft_log_file_name  2>&1
			if [ $? != 0 ] 
		      	then
		          show_error_message_and_exit "$error_assigning_persmission $sharedFoldersPath."
		      	fi
            	fi
                break;
           fi
        done
	delete_files_and_show_message_if_error_occurred "$temp_ephesoft_folder" "$error_deleting_ephesoft_from_extracted_dir"

	   domain=$system_name

	   echo $info_hostname
	   while :
           do
		if [ $use_silent_installer == "no" ]
		then
			read -e -i "n" overwrite_character
		else
			overwrite_character=$input_change_server_name
			echo "$overwrite_character"
		fi
		echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
               	if [ $? != 0 ]
               	then
                	echo $invalid_option
                   	continue
               	fi
               	if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               	then

			echo $enter_hostname
			if [ $use_silent_installer == "no" ]
			then
				readinput input
				if [ $? = 0 ]
				then
					domain=$input
				fi
			else
				domain=$input_changed_server_name
				echo $domain
			fi
                	
               	fi
		break;
            done

	memory_computation
	
	dependencies_file_path=$installationDirectory/Dependencies/dependencies

	replace_conf_parameters ephesoft_shared_folders "$sharedFoldersPath"
	
	replace_conf_parameters server_name "$domain"

	echo $info_replacing_properties_file_path
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@RANDOM_NUMBER@@" "$random_number"

	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@UPGRADEPATCH@@" "$patch_enable"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@INSTALL_DIR@@" "$installationDirectory"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@WORKFLOWDEPLOY@@" "$workflow_deploy"
	
	find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@INSTALL_DIR_SQL@@SharedFolders|$sharedFoldersPath|g" {} \;
	
	
	replace_property_file_values "$installationDirectory/Application" "applicationContext.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

   #     replace_property_file_values "$installationDirectory/Application" "log4j.xml" "@@INSTALL_DIR@@" "$installationDirectory"
		
	#replace_property_file_values "$installationDirectory/Application/native/gs" "PDFA_def.ps" "@@INSTALL_DIR@@" "$installationDirectory/"
	
	replace_property_file_values "$installationDirectory/Application/native/Extractor" "logger_conf.json" "@@INSTALL_DIR@@" "$installationDirectory/"
		
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web.xml" "@@INSTALL_DIR@@" "$installationDirectory"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@INSTALL_DIR@@" "$installationDirectory"
	replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@INSTALL_DIR@@" "$installationDirectory"
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR@@" "$installationDirectory"

	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@INSTALL_DIR@@" "$installationDirectory"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MAX_HEAP_SIZE@@" "$xmx_max_heap_size"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MIN_HEAP_SIZE@@" "$xmx_min_heap_size"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MAX_PERM_SIZE@@" "$xmx_maxperm_size"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MIN_PERM_SIZE@@" "$xmx_minperm_size"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@NUANCE_LIB_PATH@@" "$nuance_shared_library_path"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@PRODUCT_NAME@@" "$product_name_message"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@APPLICATION_USER@@" "$application_user"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/conf" "logrotate.conf*" "@@INSTALL_DIR@@" "$installationDirectory"
		
	replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@APPLICATION_USER_GROUP@@" "$application_user_group"
	
	replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@APPLICATION_USER@@" "$application_user"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*ephesoft" "@@PRODUCT_NAME@@" "$product_name_message"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "ephesoft" "@@SERVICE_NAME@@" "$service_name"
	
	replace_property_file_values "$installationDirectory/JavaAppServer/bin" "ephesoft" "@@APPLICATION_USER@@" "$application_user"
	
	replace_property_file_values "$installationDirectory/Application/native/encryption/Encryptor.sh" "*.sh" "@@INSTALL_DIR@@" "$installationDirectory"
	
	replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@MYSQL_SERVERNAME@@" "$domain"
	
	replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"
	
	replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@PRODUCT_NAME@@" "$product_name_message"
	
	replace_property_file_values "$installationDirectory/Dependencies/licensing" "license-info" "@@PRODUCT_NAME@@" "$product_name_message"
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
	
	# replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@LAST_VERSION@@" "$ephesoft_installed"
	
	replace_property_file_values "$sharedFoldersPath/Reporting" "*.properties" "@@LAST_VERSION@@" "$ephesoft_installed"
	
	#replace_property_file_values "$installationDirectory/Application" "log4j.xml" "@@EPHESOFT_VERSION@@" "$ephesoft_version"

	replace_property_file_values "$installationDirectory" "ReadMe.txt" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
	
	replace_property_file_values "$sharedFoldersPath" "*.dat" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
	
	replace_property_file_values "$installationDirectory" "ReadMe.txt" "@@PRODUCT_NAME@@" "$product_name_message"
      
	replace_conf_parameters ephesoft_installed "$ephesoft_version"
	replace_conf_parameters ephesoft_application "$installationDirectory"

	
else
	if [ ! -f $ephesoft_installation_file  ] 
	then
	    show_error_message_and_exit "$error_ephesoft_installation_file_not_exist"
	fi
	installationDirectory=$ephesoft_application
	sharedFoldersPath=$ephesoft_shared_folders
	dependencies_file_path=$installationDirectory/Dependencies/dependencies
	
	#Creating temp directory file if not exists
	if [ $temp_directory = "0" ] || [ ! -d $temp_directory ]
	then
		temp_directory_name=temp-$service_name-$(date +%Y%m%d%H%M%S)
		temp_directory=$installationDirectory/$temp_directory_name
		create_folder "$temp_directory" "$error_occurred_while_creating_temp_directory"
		replace_conf_parameters temp_directory $temp_directory
	fi

	echo Temp directory is $temp_directory >> $ephesoft_log_file_name  2>&1

	#If temp_directory exists then setting it as a local variable.
	if [ -d $temp_directory ]
	then
		chmod -R 1777 $temp_directory >> $ephesoft_log_file_name  2>&1
		echo "Exporting TMPDIR as " $temp_directory >> $ephesoft_log_file_name  2>&1
		export TMPDIR=$temp_directory
		echo "TMPDIR set as " $TMPDIR >> $ephesoft_log_file_name  2>&1
	fi
	
	if [ $patch_installer = "n" ]
	then
		temp_ephesoft_installed=${ephesoft_installed//[._]/}
		temp_ephesoft_version=${ephesoft_version//[._]/}
		temp_ephesoft_installed=${temp_ephesoft_installed:0:4}
		temp_ephesoft_version=${temp_ephesoft_version:0:4}
		check_if_alias_present
		vercomp_upgrade "$ephesoft_version" "$ephesoft_installed"
		if [[ "$is_upgrade_version_check_pass" == "no" ]]
		then    
		    show_error_message_and_exit "$error_cannot_upgrade"
		fi
	fi

	if [[ "$is_upgrade_version_check_pass" == "yes" ]] || [[ "$is_patch_version_check_pass" == "yes" ]] || [ -f $upgrade_configuration_file ]
	then

		is_upgrade="y"
		is_upgrade_flag=1
	
	if [ ! -f $upgrade_configuration_file ]
	then

	      echo $info_ephesoft_upgrade_detected$ephesoft_installed$info_ephesoft_upgrade_installed
	else
	      echo "Upgrading $caption_EphesoftTransact to version "$ephesoft_version
	fi
	while :
        do
		if [ ! -f $upgrade_configuration_file ]
		then
		      if [ $use_silent_installer == "no" ]
		      then
			    read -e -i "y" overwrite_character
		      else
			    overwrite_character=$input_upgrade_application
			    echo "$overwrite_character"
		      fi
		      echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
		      if [ $? != 0 ]
		      then
			      echo $invalid_option
			      continue
		      fi
		else
		      overwrite_character="y"
		fi
		if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
               	then			
			if [ ! -f $upgrade_configuration_file ]
			then
         			echo $info_creating_upgrade_configuration_file >> $ephesoft_log_file_name
	 			create_file "$upgrade_configuration_file" "$error_creating_upgrade_configuration_file"
			fi

			for param_name in "${ephesoft_update_conf_file_params[@]}"
			do
				param_value=$(grep $param_name $upgrade_configuration_file )
				if [ "$param_value" = '' ]
				then
       					echo $param_name=0 >> $upgrade_configuration_file
				fi
			done

			#Loading all configuration properties.
			while read -r i || [[ -n $i ]]
			do
				var=`echo "$i" | awk -F"=" '{print $1}'`
				param=${i:`expr ${#var} + 1`:${#i}}
   				eval $var=$param
			done < $upgrade_configuration_file

			if [[ $temp_ephesoft_installed == "4500" ]] || [[ $temp_ephesoft_installed > "4500" ]]
			then
				echo "Previously installed version is $temp_ephesoft_installed so checking for catalina pid" >> $ephesoft_log_file_name 2>&1
				catalina_pid=$installationDirectory/JavaAppServer/pid/catalina.pid
				if [ -f ${catalina_pid} ]
				then
					ps -p $(cat ${catalina_pid}) >> $ephesoft_log_file_name 2>&1
					if [ $? == 0 ]
					then
						#Server is already running
						echo $info_server_already_running
						while :
						do
						  if [ $use_silent_installer == "no" ]
						  then
							read -e -i "y" overwrite_character
						  else
							overwrite_character=$input_forcefully_stop_running_server
							echo "$overwrite_character"
						  fi
						  echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
						  if [ $? != 0 ]
						  then
							echo $invalid_option
							continue
						  fi
							if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
							then
								$installationDirectory/JavaAppServer/bin/shutdown.sh >> $ephesoft_log_file_name 2>&1
								if [ $? != 0 ] 
								then
										echo $error_stopping_server
								fi
							else
								exit_script
							fi
						break;
						done 
					fi	
				fi
			else
				echo "Previously installed version is $temp_ephesoft_installed so checking for process id" >> $ephesoft_log_file_name 2>&1
				ephesoft_server_process_id=$(ps -eaf|grep tomcat|grep $product_name_message|awk '{print $2}')
				#Stopping the Ephesoft server if it is already running.
				if [ "$ephesoft_server_process_id" != '' ]
				then

					echo $info_server_already_running
					while :
					do
					  if [ $use_silent_installer == "no" ]
					  then
						read -e -i "y" overwrite_character
					  else
						overwrite_character=$input_forcefully_stop_running_server
						echo "$overwrite_character"
					  fi
					  echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
					  if [ $? != 0 ]
					  then
						echo $invalid_option
						continue
					  fi
						  if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
					  then
						kill -9 $ephesoft_server_process_id
						if [ $? != 0 ] 
						then
								echo $error_stopping_server
						 fi
						 pkill soffice >> $ephesoft_log_file_name 2>&1
					  else
						exit_script
					  fi
					break;
					done 
				fi
			fi

			if [ $upgrade_successful = 0 ]
			then
			
				 if [ $application_extract = 0 ] || [ $application_copied = 0 ]
				 then
					check_available_disk_space $installationDirectory
				 	extract_tar_file "$info_extracting_ephesoft_tar" "$ephesoft_installation_file" "/tmp/" "$error_extracting_ephesoft_tar"
				 	replace_update_conf_parameters application_extract 1
				 fi
				 if [ $application_rename = 0 ] && [ $documents_rename = 0 ] && [ $version_rename = 0 ] && [ $dependencies_rename = 0 ] && [ $javaappserver_rename = 0 ] && [ $readme_rename = 0 ]
				 then
				      if [ -d "$installationDirectory/Application-backup" -o -f "$installationDirectory/Application-backup" ]
				      then
					
					      echo $info_application_backup_folder_exists
					      while :
				      do
					      if [ $use_silent_installer == "no" ]
					      then
						    read -e -i "y" overwrite_character
					      else
						    overwrite_character="y"
						    echo "$overwrite_character"
					      fi
					      echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
					      if [ $? != 0 ]
					      then
						      echo $invalid_option
						      continue
					      fi
					      if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
					      then
						      echo $info_overwriting_application_backup_folder
						      delete_files_and_show_message_if_error_occurred "$installationDirectory/Application-backup/*" ""
						      break;
					      else
						      exit_script
					      fi
				      done
					      
					      
				      else
					      create_folder "$installationDirectory/Application-backup" $error_creating_application_backup_folder
				      fi
				fi
				

				if [ $temp_ephesoft_installed -lt 4000 ]
				then
					#Deleting license file in case of previous ephesoft installed is less than 4.x
					echo "Previous version is $temp_ephesoft_installed. So deleting the license files." >> $ephesoft_log_file_name  2>&1 
					delete_files_and_show_message_if_error_occurred "$user_java_system_prefs_path/com/ephesoft" ""
				fi
					delete_ser_and_show_message_if_error_occurred "$installationDirectory/SharedFolders/BC*/BC*.ser" "$error_deleting_batch_class_ser_files"
				# EPE-2010 Deleting if zip file is present before.
				if [[ -d "$installationDirectory/SharedFolders/Zip_BC_DoNotDelete" ]]
				then
					delete_ser_and_show_message_if_error_occurred "$installationDirectory/SharedFolders/Zip_BC_DoNotDelete" "$error_deleting_batch_class_zip"
				fi
			
				
				if [ $license_file_backup = 0 ]
				then
					if [ -f "$installationDirectory/Dependencies/license-util/ephesoft-license-installer/ephesoft.lic" ]
					then
					      copy_directory_recursively "$installationDirectory/Dependencies/license-util/ephesoft-license-installer/ephesoft.lic" "$installationDirectory/Application-backup/ephesoft.lic" "$error_creating_license_backup"
					      replace_update_conf_parameters license_file_backup 1
					fi
				fi
				
				if [ $patch_installer = "n" ]
				then
				    if [ $lib_backup = 0 ]
				    then
					  copy_directory_recursively "$installationDirectory/Application/WEB-INF/lib" "$installationDirectory/Application-backup/lib" "$error_creating_lib_backup"
					  replace_update_conf_parameters lib_backup 1
				    fi

				    if [ $properties_backup = 0 ]
				    then
					  copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF" "$installationDirectory/Application-backup/META-INF" "$error_creating_properties_backup"
					  replace_update_conf_parameters properties_backup 1
				    fi
				    
				    if [ $setenv_backup = 0 ]
				    then
					  copy_directory_recursively "$installationDirectory/JavaAppServer/bin/setenv.sh" "$installationDirectory/Application-backup/setenv.sh" "$error_creating_setenv_sh_backup"
					  replace_update_conf_parameters setenv_backup 1
				    fi
				    
				    if [ $log4jxml_backup = 0 ]
				    then
					  copy_directory_recursively "$installationDirectory/Application/log4j.xml" "$installationDirectory/Application-backup/log4j.xml" "$error_creating_log4j_xml_backup"
					  replace_update_conf_parameters log4jxml_backup 1
				    fi
				
				else
				    if [ $application_backup = 0 ]
				    then
					    copy_directory_recursively "$installationDirectory/Application" "$installationDirectory/Application-backup/Application" "$error_creating_application_backup"
					    replace_update_conf_parameters application_backup 1
				    fi
				fi
				
				if [ $webxml_backup = 0 ]
				then
				  copy_directory_recursively "$installationDirectory/Application/WEB-INF/web.xml" "$installationDirectory/Application-backup/web.xml" "$error_creating_web_xml_backup"
				  if [ -f "$installationDirectory/Application/WEB-INF/web_sso.xml" ] && [ -f "$installationDirectory/Application/WEB-INF/web_std.xml" ]
				  then
				  copy_directory_recursively "$installationDirectory/Application/WEB-INF/web_sso.xml" "$installationDirectory/Application-backup/web_sso.xml" "$error_creating_web_xml_backup"
				  copy_directory_recursively "$installationDirectory/Application/WEB-INF/web_std.xml" "$installationDirectory/Application-backup/web_std.xml" "$error_creating_web_xml_backup"
				  fi

				  replace_update_conf_parameters webxml_backup 1
				fi
				
				if [ $applicationcontext_backup = 0 ]
				then
				  copy_directory_recursively "$installationDirectory/Application/applicationContext.xml" "$installationDirectory/Application-backup/applicationContext.xml" "$error_creating_applicationcontext_backup"
				  replace_update_conf_parameters applicationcontext_backup 1
				fi

				if [ $autotable_backup = 0 ]
				then
				  if [ -d "$installationDirectory/Application/autoTable" ] && [ -d "$installationDirectory/Application/native/AutoTable" ] && [ -d "$installationDirectory/Dependencies/Python37" ] && [ -f "$installationDirectory/Application/WEB-INF/lib/dcma-autotableservice.jar" ]
				  then
					copy_directory_recursively "$installationDirectory/Application/autoTable" "$installationDirectory/Application-backup/autoTable" "$error_creating_autotable_backup"
					copy_directory_recursively "$installationDirectory/Application/native/AutoTable" "$installationDirectory/Application-backup/native_AutoTable" "$error_creating_autotable_backup"
					copy_directory_recursively "$installationDirectory/Dependencies/Python37" "$installationDirectory/Application-backup/Python37" "$error_creating_autotable_backup"
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/lib/dcma-autotableservice.jar" "$installationDirectory/Application-backup/dcma-autotableservice.jar" "$error_creating_autotable_backup"
					autotable_backup=1
				  fi
				fi

				# Making backup of applicationContext-security.xml if it exists in old Application folder.
				if [ $applicationcontextsecurity_backup = 0 ] && [ -f "$installationDirectory/Application/WEB-INF/classes/META-INF/applicationContext-security.xml" ]
				then
				  copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/applicationContext-security.xml" "$installationDirectory/Application-backup/applicationContext-security.xml" "$error_creating_applicationcontextsecurity_backup"
				  replace_update_conf_parameters applicationcontextsecurity_backup 1
				fi
				
				if [ $serverxml_backup = 0 ]
				then
						# backup application.properties of ephesoft-cloud-client if it exists
						application_properties_file="application.properties"
						cloud_client_webapp_relative_dir="JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes"
						cloud_client_webapp_absolute_dir="$installationDirectory/$cloud_client_webapp_relative_dir"
						cloud_client_webapp_application_properties="$cloud_client_webapp_absolute_dir/$application_properties_file"
						backup_cloud_client_webapp_application_properties_absolute_dir="$installationDirectory/Application-backup/$cloud_client_webapp_relative_dir"
						backup_cloud_client_webapp_application_properties_absolute_path="$backup_cloud_client_webapp_application_properties_absolute_dir/$application_properties_file"
						
						if [ -f "$cloud_client_webapp_application_properties" ]
							then
								create_folder "$backup_cloud_client_webapp_application_properties_absolute_dir" "$error_creating_cloud_client_backup_folder" 

								copy_directory_recursively "$cloud_client_webapp_application_properties" "$backup_cloud_client_webapp_application_properties_absolute_path" "$error_creating_cloud_client_application_property_backup" 
						fi
				
						copy_directory_recursively "$installationDirectory/JavaAppServer/conf/server.xml" "$installationDirectory/Application-backup/server.xml" "$error_creating_server_xml_backup"
						#Extract information from server.xml backup
						if [ -f "$installationDirectory/Application-backup/server.xml" ] && [[ $temp_ephesoft_installed == "4030" ]] || [[ $temp_ephesoft_installed > "4030" ]]
						then
							echo $info_assigning_permission_folder to $temp_ephesoft_folder/Dependencies/jdk/bin/java >> $ephesoft_log_file_name  2>&1 
							chmod -R 755 $temp_ephesoft_folder/Dependencies/jdk $temp_ephesoft_folder/Dependencies/UpgradeEphesoft.jar >> $ephesoft_log_file_name
							$temp_ephesoft_folder/Dependencies/jdk/bin/java -cp $temp_ephesoft_folder/Dependencies/UpgradeEphesoft.jar com.ephesoft.XMLParser $installationDirectory/Application-backup/server.xml $temp_directory/conf.properties >> $ephesoft_log_file_name  2>&1
							
							if [[ -f "$temp_directory/conf.properties" ]]
							then 
								while read -r i || [[ -n $i ]]
								do

									var=`echo "$i" | awk -F"=" '{print $1}'`

									if [[ $var = "server.cert_file_path" ]]
									then
										server_cert_file_path=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									
									if [[ $var = "ca.cert_file_path" ]]
									then
										ca_cert_file_path=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									
									if [[ $var = "form_authentication_https" ]]
									then
										is_https_connector=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									
									if [[ $var = "form_authentication_https_password" ]]
									then
										https_connector_password=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									
									if [[ $var = "form_authentication_https_file_path" ]]
									then
										https_connector_file_path=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									
								done  < "$temp_directory/conf.properties"
								
								if [[ -f "$server_cert_file_path" ]]
								then
									echo "Server cert file path file found. So copying it in temp directory." >> $ephesoft_log_file_name  2>&1
									copy_directory_recursively "$server_cert_file_path" "$temp_directory/" "$error_creating_server_cert_backup"
								else
									echo "Server cert file path not found. Checking for relative path $server_cert_file_path." >> $ephesoft_log_file_name  2>&1
									if [[ $server_cert_file_path != "" ]]
									then
										if [[ -f "$installationDirectory/JavaAppServer/$server_cert_file_path" ]]
										then
											server_cert_file_path="$installationDirectory/JavaAppServer/$server_cert_file_path"
											echo "Found server cert file at JavaAppServer. So copying into temp directory. $server_cert_file_path">> $ephesoft_log_file_name  2>&1
											copy_directory_recursively "$server_cert_file_path" "$temp_directory/" "$error_creating_server_cert_backup"
											replace_temp_conf_parameters server.cert_file_path $server_cert_file_path
										fi
										
									fi
								fi
								
								if [[ -f "$ca_cert_file_path" ]]
								then
									echo "CA cert file path file found. So copying it in temp directory." >> $ephesoft_log_file_name  2>&1
									copy_directory_recursively "$ca_cert_file_path" "$temp_directory/" "$error_creating_server_cert_backup"
								else
									echo "CA cert file path not found. Checking for relative path $ca_cert_file_path." >> $ephesoft_log_file_name  2>&1
									if [[ $ca_cert_file_path != "" ]]
									then
										if [[ -f "$installationDirectory/JavaAppServer/$ca_cert_file_path" ]]
										then
											ca_cert_file_path="$installationDirectory/JavaAppServer/$ca_cert_file_path"
											echo "Found ca cert file at JavaAppServer. So copying into temp directory. $ca_cert_file_path">> $ephesoft_log_file_name  2>&1
											copy_directory_recursively "$ca_cert_file_path" "$temp_directory/" "$error_creating_server_cert_backup"
											replace_temp_conf_parameters ca.cert_file_path $ca_cert_file_path
										fi
										
									fi
								fi
								
								if [[ -f "$https_connector_file_path" ]]
								then
									echo "HTTPS cert file path file found. So copying it in temp directory." >> $ephesoft_log_file_name  2>&1
									copy_directory_recursively "$https_connector_file_path" "$temp_directory/" "$error_creating_https_cert_backup"
								else
									echo "HTTPS cert file path not found. Checking for relative path $https_connector_file_path." >> $ephesoft_log_file_name  2>&1
									if [[ $server_cert_file_path != "" ]]
									then
										if [[ -f "$installationDirectory/JavaAppServer/$https_connector_file_path" ]]
										then
											https_connector_file_path="$installationDirectory/JavaAppServer/$https_connector_file_path"
											echo "Found HTTPS cert file at JavaAppServer. So copying into temp directory. $https_connector_file_path">> $ephesoft_log_file_name  2>&1
											copy_directory_recursively "$https_connector_file_path" "$temp_directory/" "$error_creating_https_cert_backup"
											replace_temp_conf_parameters https_connector_file_path $https_connector_file_path
										fi
										
									fi
								fi
							fi
							
						fi
						replace_update_conf_parameters serverxml_backup 1
				fi
				
				
				if [ $certs_backup = 0 ]
				then
					if [ -d "$installationDirectory/$certs_folder_name" ] && [ -d "$installationDirectory/Application-backup" ]
					then
						copy_directory_recursively "$installationDirectory/$certs_folder_name" "$installationDirectory/Application-backup/$certs_folder_name" "$error_creating_server_xml_backup"
						replace_update_conf_parameters certs_backup 1
					fi
				fi
				
				if [ $logrotateconf_backup = 0 ]
				then
					if [ -f $installationDirectory/JavaAppServer/conf/logrotate.conf ] && [ -d $installationDirectory/Application-backup ]
					then
						copy_directory_recursively "$installationDirectory/JavaAppServer/conf/logrotate.conf" "$installationDirectory/Application-backup/logrotate.conf" "$error_creating_logrotate_conf_backup"
						replace_update_conf_parameters logrotateconf_backup 1
					fi
				fi
				
				if [ $dependencies_backup = 0 ]
				then
					copy_directory_recursively "$installationDirectory/Dependencies/dependencies" "$installationDirectory/Application-backup/dependencies" "$error_creating_dependencies_file_backup"
					if [ $patch_installer = "y" ]
					then
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/dependencies" "$error_deleting_dependency_file"
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/UpgradeEphesoft.jar" "$error_deleting_existing_jar_file"
					fi
					replace_update_conf_parameters dependencies_backup 1
				fi	
			
				if [ $application_rename = 0 ]
				then
					move_directory "$installationDirectory/Application" "$installationDirectory/Application-$ephesoft_installed" "$error_renaming_application"
					replace_update_conf_parameters application_rename 1
				fi
				if [ $dependencies_rename = 0 ] && [ $patch_installer = "n" ]
				then
						
						if [[ ! -d $user_java_system_prefs_path ]]
						then
								if [ ! -d $user_java_path ]
								then
										  echo Creating $user_java_path >> $ephesoft_log_file_name  2>&1
										  create_folder "$user_java_path" "$error_creating_java_path"
								fi

								if [ ! -d $user_java_system_prefs_path ]
								then
										  echo Creating $user_java_system_prefs_path >> $ephesoft_log_file_name  2>&1
										  create_folder "$user_java_system_prefs_path" "$error_creating_java_system_prefs_path"
								fi
								
								if [[ -d "$installationDirectory/Dependencies/jdk/jre/.systemPrefs" ]] || [[ -d "$installationDirectory/Dependencies/jdk1.7.0_40/jre/.systemPrefs" ]]  || [[ -d "$installationDirectory/Dependencies/jdk1.8.0_102/jre/.systemPrefs" ]]
								then
										echo Moving system prefs from jre to $user_java_system_prefs_path >> $ephesoft_log_file_name  2>&1
										mv $installationDirectory/Dependencies/jdk*/jre/.systemPrefs/* $user_java_system_prefs_path >> $ephesoft_log_file_name  2>&1
										if [ $? != 0 ]
										then
											show_message $error_occurred_while_moving_systemPrefs_file >> $ephesoft_log_file_name  2>&1
										fi
										
								fi								
								
						fi
			     		move_directory "$installationDirectory/Dependencies" "$installationDirectory/Dependencies-$ephesoft_installed" "$error_renaming_dependencies"
					replace_update_conf_parameters dependencies_rename 1
				fi
			
				if [ $documents_rename = 0 ] && [ $temp_ephesoft_installed -lt 4610 ]
				then
					move_directory "$installationDirectory/Documents" "$installationDirectory/Documents-$ephesoft_installed" "$error_renaming_documents"
					replace_update_conf_parameters documents_rename 1
				fi

				if [ $version_rename = 0 ] && [ $patch_installer = "n" ]
				then
					if [ -d $installationDirectory/Version ]
					then
					  move_directory "$installationDirectory/Version" "$installationDirectory/Version-$ephesoft_installed" "$error_renaming_version"
					else
					  echo Version signature folder does not exist. >> $ephesoft_log_file_name  2>&1
					fi
					replace_update_conf_parameters version_rename 1
				fi

				# Adding check in case of 3123 ephesoft reports folder does not exists.
				echo Old Installed Version is $temp_ephesoft_installed >> $ephesoft_log_file_name  2>&1
				if [ $ephesoftreports_rename = 0 ] && [ -d $installationDirectory/EphesoftReports ] && [ $patch_installer = "n" ] && [[ $temp_ephesoft_installed > "4000" || $temp_ephesoft_installed = "4000" ]]
				then
					move_directory "$installationDirectory/EphesoftReports" "$installationDirectory/EphesoftReports-$ephesoft_installed" "$error_renaming_ephesoftreports"
					replace_update_conf_parameters ephesoftreports_rename 1
				fi
				
				if [ $licenses_rename = 0 ] && [ -d $installationDirectory/Licenses ] && [ $patch_installer = "n" ]
				then
					move_directory "$installationDirectory/Licenses" "$installationDirectory/Licenses-$ephesoft_installed" "$error_renaming_licenses"
					replace_update_conf_parameters licenses_rename 1
				fi
				
				if [ $javaappserver_rename = 0 ]
				then
					if [ $patch_installer = "n" ]
					then
						move_directory "$installationDirectory/JavaAppServer" "$installationDirectory/JavaAppServer-$ephesoft_installed" "$error_renaming_javaappserver"
						replace_update_conf_parameters javaappserver_rename 1
					else
						! grep role3 $installationDirectory/JavaAppServer/conf/$tomcat_xml_file_name >> $ephesoft_log_file_name  2>&1
						if [ $? -eq 0 ]
						then
					      
						      replace_property_file_values "$installationDirectory/JavaAppServer/conf" "$tomcat_xml_file_name" "<role rolename=\"role2\"/>" "<role rolename=\"role2\"/>\n<role rolename=\"role3\"/>"
						      replace_property_file_values "$installationDirectory/JavaAppServer/conf" "$tomcat_xml_file_name" "<user username=\"user2\" password=\"user2\" roles=\"role2\"/>" "<user username=\"user2\" password=\"user2\" roles=\"role2\"/>\n<user username=\"user3\" password=\"user3\" roles=\"role3\"/>"
						      replace_update_conf_parameters javaappserver_rename 1
						fi
					fi
				fi
				
				if [ $certs_rename = 0 ]
				then
					if [ $patch_installer = "n" ] && [ -d "$installationDirectory/$certs_folder_name" ]
					then
						move_directory "$installationDirectory/$certs_folder_name" "$installationDirectory/$certs_folder_name-$ephesoft_installed" "$error_renaming_certs"
						replace_update_conf_parameters certs_rename 1
					fi
				fi
			
				if [ $readme_rename = 0 ]
				then
					move_directory "$installationDirectory/ReadMe.txt" "$installationDirectory/ReadMe.txt-$ephesoft_installed" "$error_renaming_readme"
					replace_update_conf_parameters readme_rename 1                
				fi
				
				if [ $application_copied = 0 ]
				then

					#Extracted before renaming folders.
	
					echo $info_assigning_permission_folder >> $ephesoft_log_file_name  2>&1 
					chmod -R 755 $installationDirectory/Application-$ephesoft_installed $installationDirectory/ReadMe.txt-$ephesoft_installed >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ] 
					then
					  show_error_message_and_exit "$error_assigning_persmission $installationDirectory/Application-$ephesoft_installed $installationDirectory/ReadMe.txt-$ephesoft_installed."
					fi
					
					if [ $temp_ephesoft_installed -lt 4610 ]
					then
					    chmod -R 755 $installationDirectory/Documents-$ephesoft_installed >> $ephesoft_log_file_name  2>&1
                        if [ $? != 0 ] 
                        then
                          show_error_message_and_exit "$error_assigning_persmission $installationDirectory/Documents-$ephesoft_installed."
                        fi
                    fi

					if [ -d $installationDirectory/EphesoftReports-$ephesoft_installed ]
					then
					  chmod -R 755 $installationDirectory/EphesoftReports-$ephesoft_installed >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ] 
					  then
					    show_error_message_and_exit "$error_assigning_persmission $installationDirectory/EphesoftReports-$ephesoft_installed."
					  fi
					fi

					if [ -d $installationDirectory/Version-$ephesoft_installed ]
					then
					  chmod -R 755 $installationDirectory/Version-$ephesoft_installed >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ]
					  then
					    show_error_message_and_exit "$error_assigning_persmission $installationDirectory/Version-$ephesoft_installed."
					  fi
					fi

					if [ $? != 0 ] 
      					then
          					show_error_message_and_exit "$error_assigning_permission_installation_directory"
      					fi
					echo $info_copying_ephesoft_folder

					copy_directory_recursively "$temp_ephesoft_folder/Application" "$installationDirectory/" "./$product_name_message" "$error_copying_application_folder"
					
					if [ $patch_installer = "n" ]
					then
						copy_directory_recursively "$temp_ephesoft_folder/EphesoftReports" "$installationDirectory/" "./$product_name_message" "$error_copying_reports_folder"
						
						copy_directory_recursively "$temp_ephesoft_folder/Dependencies" "$installationDirectory/" "./$product_name_message" "$error_copying_dependencies_folder"
						
						replace_property_file_values "$installationDirectory/Dependencies" "*.sql" "@@INSTALL_DIR@@" "$installationDirectory"
						
						install_python
						
						copy_directory_recursively "$temp_ephesoft_folder/Licenses" "$installationDirectory/" "./$product_name_message" "$error_copying_licenses_folder"
						
						copy_directory_recursively "$temp_ephesoft_folder/$certs_folder_name" "$installationDirectory/" "./$product_name_message" "$error_copying_certs_folder"
						
						copy_directory_recursively "$temp_ephesoft_folder/Utility" "$installationDirectory/" "./$installationDirectory_folder_name" "$error_copying_utility_folder"

						copy_directory_recursively "$temp_ephesoft_folder/Version" "$installationDirectory/" "./$product_name_message" "$error_copying_version_folder"

					else
					
						copy_directory_recursively "$temp_ephesoft_folder/Dependencies/dependencies_redhat" "$installationDirectory/Dependencies/" "./$product_name_message" "$error_copying_dependencies_file_redhat"
					
						copy_directory_recursively "$temp_ephesoft_folder/Dependencies/dependencies_ubuntu" "$installationDirectory/Dependencies/" "./$product_name_message" "$error_copying_dependencies_file_ubuntu"
					
						copy_directory_recursively "$temp_ephesoft_folder/Dependencies/UpgradeEphesoft.jar" "$installationDirectory/Dependencies/UpgradeEphesoft.jar" "./$product_name_message" "$error_copying_dependencies_upgrade_ephesoft_jar"
					fi

					if [ $patch_installer = "n" ]
					then
						copy_directory_recursively "$temp_ephesoft_folder/JavaAppServer" "$installationDirectory/" "./$product_name_message" "$error_copying_javaappserver_folder"

						fi
					copy_directory_recursively "$temp_ephesoft_folder/ReadMe.txt" "$installationDirectory/" "./$product_name_message" "$error_copying_readme_file"
					
					if [ $sharedfolders_backup = 0 ]
					then
						copy_directory_recursively "$temp_ephesoft_folder/SharedFolders" "$installationDirectory/Application-backup/SharedFolders" "Error occurred while creating back up for META-INF folder."
						replace_update_conf_parameters sharedfolders_backup 1
					fi
          if [[ $is_upgrade = "y" ]] || [[ $is_upgrade_flag = 1 ]]
            then
              echo $check_Config_properties >> $ephesoft_log_file_name  2>&1
              if [[ ! -f $sharedFoldersPath/config.properties ]]
                then
                  echo $copying_Config_properties >> $ephesoft_log_file_name  2>&1
                  cp $temp_ephesoft_folder/SharedFolders/config.properties $sharedFoldersPath >> $ephesoft_log_file_name  2>&1
                  if [ $? != 0 ]
                    then
                      show_error_message_and_exit $error_copy_Config_properties
                  fi
                  echo $file_Config_properties_success_copied >> $ephesoft_log_file_name  2>&1
              else
                echo $file_Config_properties_exists >> $ephesoft_log_file_name  2>&1
              fi
          fi
					replace_update_conf_parameters application_copied 1 
				fi

				delete_files_and_show_message_if_error_occurred "$temp_ephesoft_folder" "$error_deleting_ephesoft_from_extracted_dir"
	
				if [ $old_application_delete = 0 ]
				then
					if [ $patch_installer = "n" ]
					then
						rm -rf $installationDirectory/Dependencies-$ephesoft_installed $installationDirectory/Documents-$ephesoft_installed $installationDirectory/JavaAppServer-$ephesoft_installed $installationDirectory/ReadMe.txt-$ephesoft_installed $installationDirectory/Application-$ephesoft_installed $installationDirectory/EphesoftReports-$ephesoft_installed $installationDirectory/Licenses-$ephesoft_installed $installationDirectory/$certs_folder_name-$ephesoft_installed
					else
						rm -rf $installationDirectory/Documents-$ephesoft_installed $installationDirectory/ReadMe.txt-$ephesoft_installed $installationDirectory/Application-$ephesoft_installed
					fi
					replace_update_conf_parameters old_application_delete 1  	

				fi
				
				if [ $operating_system = $redhat ]
				then
					if [ -f $installationDirectory/Dependencies/$dependencies_file_redhat ]
					then
					      move_directory "$installationDirectory/Dependencies/$dependencies_file_redhat" "$installationDirectory/Dependencies/dependencies" "$error_occurred_moving$dependencies_file_redhat"
					     
					      delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/$dependencies_file_ubuntu" "$error_deleting_dependency_file"
					fi
				else if [ $operating_system = $ubuntu ]
				    then
					if [ -f $installationDirectory/Dependencies/$dependencies_file_ubuntu ]
					then
					      move_directory "$installationDirectory/Dependencies/$dependencies_file_ubuntu" "$installationDirectory/Dependencies/dependencies" "$error_occurred_moving$dependencies_file_ubuntu"
					      delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/$dependencies_file_redhat" "$error_deleting_dependency_file"
					fi
				    fi
				fi
				chmod -R 755 $installationDirectory  >> $ephesoft_log_file_name  2>&1
				if [ $? != 0 ] 
				then
				  show_message "$error_assigning_permission_installation_directory" >> $ephesoft_log_file_name  2>&1
				fi

				
				if [[ $oracle = 1 ]]
				then
					#replace dcma-reporting folder corresponding to oracle
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/ORACLE/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/" "" "$error_oracle_copy_reporting"

					#replace dcma-data-access folder corresponding to oracle
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/Oracle/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/" "" "$error_oracle_copy_data_access_files"
					
					#replace dcma-data-workflows folder corresponding to oracle
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-workflows/Oracle/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-workflows/" "" "$error_oracle_copy_data_workflows_files"
					
					if [ $patch_installer = "n" ]
					then
						#replace server xml file corresponding to oracle
						copy_directory_recursively "$installationDirectory/JavaAppServer/confOracle/server.xml" "$installationDirectory/JavaAppServer/conf/server.xml" "" "$error_oracle_copy_server_xml"
									
						if [[ -d "$installationDirectory/EphesoftReports/Oracle" ]]
						then
							copy_directory_recursively "$installationDirectory/EphesoftReports/Oracle/*" "$installationDirectory/EphesoftReports/" "" "$error_oracle_copy_ephesoftreports_files"
						fi
					fi
				else
					## EEN-16743 In case of remote MARIA database configured, $mariadb is not set as 1; Considering we can have either MARIA or ORACLE 
					## as only supported databases as of now, moving MARIA to else clause. Please take note of it!
					
					#replace dcma-reporting folder corresponding to MariaDB
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/MARIADB/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/" "" "$error_mariadb_copy_reporting"

					#replace dcma-data-access folder corresponding to MariaDB
					copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/MariaDB/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/" "" "$error_mariadb_copy_data_access_files"
				fi
				database_patch=0
				if [ $merge_application = 0 ]
				then
					cd $installationDirectory/Dependencies
					
					echo $info_execute_database_patch
					                       
					while :
					do
						if [ $use_silent_installer == "no" ]
						then
						      read -e -i "y" overwrite_character
						else
						      overwrite_character="$input_database_patch_enable"
						      echo "$overwrite_character"
						fi
						echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
						if [ $? != 0 ]
						then
							echo $invalid_option
							continue
						fi
						echo $info_application_merge_in_progress
						replace_old_files_of_shared_folder $installationDirectory $sharedFoldersPath
						if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
						then
							database_patch=1
							jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.UpgradeEphesoft $installationDirectory $ephesoft_installed $sharedFoldersPath "true" >> $ephesoft_log_file_name  2>&1 
						else
							jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.UpgradeEphesoft $installationDirectory $ephesoft_installed $sharedFoldersPath "false" >> $ephesoft_log_file_name  2>&1 
							upgrade_database=1
							replace_update_conf_parameters upgrade_database $upgrade_database
						fi

						if [[ ! -d "$sharedFoldersPath/EphesoftReportsStorage" ]]
						then
							echo "Creating EphesoftReportsStorage folder inside SharedFolders" >> $ephesoft_log_file_name  2>&1
							mkdir -p $sharedFoldersPath/EphesoftReportsStorage
							if [ $? != 0 ]
							then
								echo $error_creating_directory_at_path >> $ephesoft_log_file_name  2>&1
							else
								echo $success_creating_directory >> $ephesoft_log_file_name  2>&1
							fi
						fi
						
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jtidy-r8-20060801.jar" "$error_occurred_while_deleting_jtidy" >> $ephesoft_log_file_name  2>&1  
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/aspectjrt-1.6.0.jar" "$error_occurred_while_deleting_aspectjrt" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/aspectjweaver-1.6.2.jar" "$error_occurred_while_deleting_aspectjweaver" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/im4java-1.2.0.jar" "$error_occurred_while_deleting_im4java" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/ehcache-core-2.1.0.jar" "$error_occurred_while_deleting_ehcache_core" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/ehcache-explicitlocking-0.2.jar" "$error_occurred_while_deleting_ehcache_explicitlocking" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/ehcache-spring-annotations-1.1.2.jar" "$error_occurred_while_deleting_ehcache_spring" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/dozer-5.5.1.jar" "$error_occurred_while_deleting_dozer" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-annotations-2.2.3.jar" "$error_occurred_while_deleting_jackson_annotations" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-core-2.2.3.jar" "$error_occurred_while_deleting_jackson_core" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-databind-2.2.3.jar" "$error_occurred_while_deleting_jackson_databind" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/javassist-3.12.0.GA.jar" "$error_occurred_while_deleting_javassist" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/poi-3.15.jar" "$error_occurred_while_deleting_poi" >> $ephesoft_log_file_name  2>&1 
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/poi-contrib-3.5-FINAL.jar" "$error_occurred_while_deleting_poi_contrib" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/mysql-connector-java-5.1.31-bin.jar" "$error_occurred_while_deleting_mysql_connector" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jai_imageio-1.1.jar" "$error_occurred_while_deleting_jai_imageio" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/vtd-xml-2.11.jar" "$error_occurred_while_deleting_vtd_xml" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/weka-stable-3.6.7.jar" "$error_occurred_while_deleting_weka_stable_xml" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/guava-17.0.jar" "Error occurred while deleting guava-17.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-annotations-2.9.6.jar" "Error occurred while deleting jackson-annotations-2.9.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-core-2.9.6.jar" "Error occurred while deleting jackson-core-2.9.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-databind-2.9.6.jar" "Error occurred while deleting jackson-databind-2.9.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-dataformat-xml-2.9.6.jar" "Error occurred while deleting jackson-dataformat-xml-2.9.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-module-jaxb-annotations-2.9.6.jar" "Error occurred while deleting jackson-module-jaxb-annotations-2.9.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/java-cup-0.11a.jar" "Error occurred while deleting java-cup-0.11a.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jython-2.7.1b3.jar" "Error occurred while deleting jython-2.7.1b3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/mariadb-java-client-1.1.7.jar" "Error occurred while deleting mariadb-java-client-1.1.7.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-api-mockito2-2.0.0-beta.5.jar" "Error occurred while deleting powermock-api-mockito2-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-api-support-2.0.0-beta.5.jar" "Error occurred while deleting powermock-api-support-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-core-2.0.0-beta.5.jar" "Error occurred while deleting powermock-core-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-module-junit4-2.0.0-beta.5.jar" "Error occurred while deleting powermock-module-junit4-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-module-junit4-common-2.0.0-beta.5.jar" "Error occurred while deleting powermock-module-junit4-common-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/powermock-reflect-2.0.0-beta.5.jar" "Error occurred while deleting powermock-reflect-2.0.0-beta.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/rhino-1.7.10.jar" "Error occurred while deleting rhino-1.7.10.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/xmlgraphics-commons-2.2.jar" "Error occurred while deleting xmlgraphics-commons-2.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/javax.mail-1.6.1.jar" "Error occurred while deleting javax.mail-1.6.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/mail-1.4.jar" "Error occurred while deleting mail-1.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/nimbus-jose-jwt-9.1.1.jar" "Error occurred while deleting nimbus-jose-jwt-9.1.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/nimbus-jose-jwt-9.10.1.jar" "Error occurred while deleting nimbus-jose-jwt-9.10.1.jar. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/htmlcleaner-2.9.jar" "Error occurred while deleting htmlcleaner-2.9.jar. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/msal-client-credential-sample-1.0.0.jar" "Error occurred while deleting msal-client-credential-sample-1.0.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/log4j-1.2-api-2.8.2.jar" "Error occurred while deleting log4j-1.2-api-2.8.2.jar file. " >> $ephesoft_log_file_name  2>&1
					  delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/log4j-api-2.8.2.jar" "Error occurred while deleting log4j-api-2.8.2.jar file. " >> $ephesoft_log_file_name  2>&1
					  delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/log4j-core-2.8.2.jar" "Error occurred while deleting log4j-core-2.8.2.jar file. " >> $ephesoft_log_file_name  2>&1
					  delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/log4j-slf4j-impl-2.8.2.jar" "Error occurred while deleting log4j-slf4j-impl-2.8.2.jar file. " >> $ephesoft_log_file_name  2>&1
					  delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/log4j-web-2.8.2.jar" "Error occurred while deleting log4j-web-2.8.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/webapps/docs" "Error occurred while deleting docs folder in webapps under JavaAppServer" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/webapps/examples" "Error occurred while deleting examples folder in webapps under JavaAppServer" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/webapps/host-manager" "Error occurred while deleting host-manager folder in webapps under JavaAppServer" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/webapps/manager" "Error occurred while deleting manager folder in webapps under JavaAppServer" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/webapps/ROOT" "Error occurred while deleting ROOT folder in webapps under JavaAppServer" >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application-backup-$ephesoft_installed/SharedFolders" "$error_deleting_shared_folders_in_application_backup"
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cron-utils-8.1.1.jar" "Error occurred while deleting cron-utils-8.1.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/guava-18.0.jar" "Error occurred while deleting guava-18.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/xstream-1.4.10.jar" "Error occurred while deleting xstream-1.4.10.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-beanutils-1.9.3.jar" "Error occurred while deleting commons-beanutils-1.9.3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/sapjco3.jar" "Error occurred while deleting sapjco3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-codec-1.10.jar" "Error occurred while deleting commons-codec-1.10.jar file. " >> $ephesoft_log_file_name  2>&1

						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/ant-1.9.4.jar" "Error occurred while deleting ant-1.9.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/ant-launcher-1.9.4.jar" "Error occurred while deleting ant-launcher-1.9.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/lib/cryptacular-1.1.0.jar" "Error occurred while deleting cryptacular-1.1.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/lib/quartz-2.2.1.jar" "Error occurred while deleting quartz-2.2.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/JavaAppServer/lib/bcprov-jdk15on-1.60.jar" "Error occurred while deleting bcprov-jdk15on-1.60.jar file. " >> $ephesoft_log_file_name  2>&1

						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/icu4j-60.2.jar" "Error occurred while deleting icu4j-60.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/nimbus-jose-jwt-9.23.jar" "Error occurred while deleting nimbus-jose-jwt-9.23.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/lang-tag-1.6.jar" "Error occurred while deleting lang-tag-1.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/c3p0-0.9.0.4.jar" "Error occurred while deleting c3p0-0.9.0.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/geronimo-spec-jta-1.0.1B-rc4.jar" "Error occurred while deleting geronimo-spec-jta-1.0.1B-rc4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/serializer-2.7.1.jar" "Error occurred while deleting serializer-2.7.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/xercesImpl-2.12.0.jar" "Error occurred while deleting xercesImpl-2.12.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/h2-1.4.194.jar" "Error occurred while deleting h2-1.4.194.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-databind-2.13.0.jar" "Error occurred while deleting jackson-databind-2.13.0.jar file. " >> $ephesoft_log_file_name  2>&1

						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/gson-2.8.6.jar" "Error occurred while deleting gson-2.8.6.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/gson-2.6.2.jar" "Error occurred while deleting gson-2.6.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/gson-2.4.jar" "Error occurred while deleting gson-2.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-text-1.7.jar" "Error occurred while deleting commons-text-1.7.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-core-3.2.0.jar" "Error occurred while deleting cxf-core-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-distribution-manifest-3.2.0.jar" "Error occurred while deleting cxf-distribution-manifest-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-bindings-soap-3.2.0.jar" "Error occurred while deleting cxf-rt-bindings-soap-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-bindings-xml-3.2.0.jar" "Error occurred while deleting cxf-rt-bindings-xml-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-databinding-jaxb-3.2.0.jar" "Error occurred while deleting cxf-rt-databinding-jaxb-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-frontend-jaxrs-3.2.0.jar" "Error occurred while deleting cxf-rt-frontend-jaxrs-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-frontend-jaxws-3.2.0.jar" "Error occurred while deleting cxf-rt-frontend-jaxws-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-frontend-simple-3.2.0.jar" "Error occurred while deleting cxf-rt-frontend-simple-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-transports-http-3.2.0.jar" "Error occurred while deleting cxf-rt-transports-http-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-ws-addr-3.2.0.jar" "Error occurred while deleting cxf-rt-ws-addr-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-wsdl-3.2.0.jar" "Error occurred while deleting cxf-rt-wsdl-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-rt-ws-policy-3.2.0.jar" "Error occurred while deleting cxf-rt-ws-policy-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-xjc-bug671-3.2.0.jar" "Error occurred while deleting cxf-xjc-bug671-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-xjc-dv-3.2.0.jar" "Error occurred while deleting cxf-xjc-dv-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-xjc-javadoc-3.2.0.jar" "Error occurred while deleting cxf-xjc-javadoc-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/neethi-3.1.0.jar" "Error occurred while deleting neethi-3.1.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-xjc-runtime-3.2.0.jar" "Error occurred while deleting cxf-xjc-runtime-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/cxf-xjc-ts-3.2.0.jar" "Error occurred while deleting cxf-xjc-ts-3.2.0.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-annotations-2.9.8.jar" "Error occurred while deleting jackson-annotations-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-core-2.9.8.jar" "Error occurred while deleting jackson-core-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-databind-2.9.8.jar" "Error occurred while deleting jackson-databind-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-dataformat-xml-2.9.8.jar" "Error occurred while deleting jackson-dataformat-xml-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-datatype-jsr310-2.9.8.jar" "Error occurred while deleting jackson-datatype-jsr310-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-module-jaxb-annotations-2.9.8.jar" "Error occurred while deleting jackson-module-jaxb-annotations-2.9.8.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jackson-dataformat-xml-2.8.7.jar" "Error occurred while deleting jackson-dataformat-xml-2.8.7.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/stax2-api-3.1.4.jar" "Error occurred while deleting stax2-api-3.1.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/woodstox-core-5.0.3.jar" "Error occurred while deleting woodstox-core-5.0.3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxb-impl-2.2.11.jar" "Error occurred while deleting jaxb-impl-2.2.11.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxb-core-2.2.11.jar" "Error occurred while deleting jaxb-core-2.2.11.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxb-xjc-2.2.11.jar" "Error occurred while deleting jaxb-xjc-2.2.11.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/javax.annotation-api-1.3.jar" "Error occurred while deleting javax.annotation-api-1.3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/javax.ws.rs-api-2.1.jar" "Error occurred while deleting javax.ws.rs-api-2.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/xmlschema-core-2.2.2.jar" "Error occurred while deleting xmlschema-core-2.2.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-compress-1.4.jar" "Error occurred while deleting commons-compress-1.4.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-email-1.2.jar" "Error occurred while deleting commons-email-1.2.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/commons-fileupload-1.3.3.jar" "Error occurred while deleting commons-fileupload-1.3.3.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/dom4j-1.6.1.jar" "Error occurred while deleting dom4j-1.6.1.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jdom2-2.0.5.jar" "Error occurred while deleting jdom2-2.0.5.jar file. " >> $ephesoft_log_file_name  2>&1
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/xmlsec-2.1.0.jar" "Error occurred while deleting xmlsec-2.1.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/chemistry-opencmis-client-api-0.10.0.jar" "Error occurred while deleting chemistry-opencmis-client-api-0.10.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/chemistry-opencmis-client-bindings-0.10.0.jar" "Error occurred while deleting chemistry-opencmis-client-bindings-0.10.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/chemistry-opencmis-client-impl-0.10.0.jar" "Error occurred while deleting chemistry-opencmis-client-impl-0.10.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/chemistry-opencmis-commons-api-0.10.0.jar" "Error occurred while deleting chemistry-opencmis-commons-api-0.10.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/chemistry-opencmis-commons-impl-0.10.0.jar" "Error occurred while deleting chemistry-opencmis-commons-impl-0.10.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxws-rt-2.1.7.jar" "Error occurred while deleting jaxws-rt-2.1.7.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxb-api-2.1.jar" "Error occurred while deleting jaxb-api-2.1.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/jaxws-api-2.1.jar" "Error occurred while deleting jaxws-api-2.1.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/saaj-api-1.3.jar" "Error occurred while deleting saaj-api-1.3.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/stax-ex-1.2.jar" "Error occurred while deleting stax-ex-1.2.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/mimepull-1.3.jar" "Error occurred while deleting mimepull-1.3.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/org.osgi.core-1.0.0.jar" "Error occurred while deleting org.osgi.core-1.0.0.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/resolver-20050927.jar" "Error occurred while deleting resolver-20050927.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/saaj-impl-1.3.3.jar" "Error occurred while deleting saaj-impl-1.3.3.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/stax-api-1.0-2.jar" "Error occurred while deleting stax-api-1.0-2.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/lib/streambuffer-0.9.jar" "Error occurred while deleting streambuffer-0.9.jar file. " >> $ephesoft_log_file_name  2>&1
            delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/native/libsapjco3.so" "Error occurred while deleting libsapjco3.so file. " >> $ephesoft_log_file_name  2>&1
          if [ -f $installationDirectory/upgrade-ephesoft.log ]

						then
							show_error_message_and_exit "$error_application_merge"
						else
							replace_update_conf_parameters merge_application 1
						fi
						break;
					done
				fi
				
				find $installationDirectory/JavaAppServer -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$|.conf$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
				if [ -d $installationDirectory/Application-backup-$ephesoft_installed ]
				then
					find $installationDirectory/Application-backup-$ephesoft_installed -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
				fi
				find $installationDirectory/Application -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1
				find $installationDirectory/Application/native/encryption -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
				find $installationDirectory/Dependencies/license-util/ephesoft-license-installer -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
				chmod 755 $installationDirectory/EphesoftReports/WEB-INF/lib/phantomjs >> $ephesoft_log_file_name  2>&1
				if [ $? != 0 ] 
				then
					show_message "$error_assigning_persmission $installationDirectory/EphesoftReports/WEB-INF/lib/phantomjs"
				fi
				
				echo $info_replacing_properties_file_path
				if [[ $temp_ephesoft_installed < "4030" ]]
				then
						
						while read -r i || [[ -n $i ]]
						do
						var=`echo "$i" | awk -F"=" '{print $1}'`
							if [[ $var = "dataSource.password" ]]
							then
								password=`echo "$i" | awk -F"=" '{print $2}'`
								adminpassword=$password
							fi
							if [[ $var = "dataSource.username" ]]
							then
								userName=`echo "$i" | awk -F"=" '{print $2}'`
								ephesoftusername=$userName
							fi
							if [[ $var = "dataSource.databaseName" ]]
							then
								dbName=`echo "$i" | awk -F"=" '{print $2}'`
							fi
							if [[ $var = "dataSource.serverName" ]]
							then
								address=`echo "$i" | awk -F"=" '{print $2}'`
								domain=$address
							fi
							if [[ $var = "dataSource.driverClassName" ]]
							then
								driverClassName=`echo "$i" | awk -F"=" '{print $2}'`
							fi
							if [[ $var = "dataSource.url" ]]
							then
								url=`echo "$i" | awk -F"=" '{print $2}'`
								temp_port_number="${url#*:*:*:}"
								database_port_number="${temp_port_number%/*}"
								echo "database port number from dcma-db.properties is :" $database_port_number >> $ephesoft_log_file_name  2>&1 
							fi
						done < $installationDirectory/Application-backup-$ephesoft_installed/META-INF/dcma-data-access/dcma-db.properties
						
						if [[ -f $installationDirectory/Application-backup-$ephesoft_installed/META-INF/dcma-performance-reporting/dcma-report-db.properties ]]
						then
						  while read -r i || [[ -n $i ]] 
						  do
							var=`echo "$i" | awk -F"=" '{print $1}'`
							if [[ $var = "hibernate.connection.url" ]]
							then
								  temp_reportDB=`echo "$i" | awk -F"=" '{print $2}'`
								  reportDB="${temp_reportDB##*/}"
							  break;
							fi

						  done < $installationDirectory/Application-backup-$ephesoft_installed/META-INF/dcma-performance-reporting/dcma-report-db.properties
						fi
						
						if [[ -f $installationDirectory/Application-backup-$ephesoft_installed/META-INF/dcma-reporting/etl-variables.properties ]]
						then
						  while read -r i || [[ -n $i ]] 
						  do
							var=`echo "$i" | awk -F"=" '{print $1}'`
							if [ $var = "reporting.dbname" ]
							then
								  temp_reportDB=`echo "$i" | awk -F"=" '{print $2}'`
								  reportDB="${temp_reportDB##*/}"
							  break;
							fi

						  done < $installationDirectory/Application-backup-$ephesoft_installed/META-INF/dcma-reporting/etl-variables.properties
						fi
						# For 4030 or less default to HTTP
						authentication_mode=1
						connector_protocol=http
						replace_conf_parameters connector_protocol "$connector_protocol"
						replace_conf_parameters authentication_mode "1"
						
						replace_conf_parameters server_name "$domain"
						
				else if [[ $temp_ephesoft_installed == "4030" ]] || [[ $temp_ephesoft_installed > "4030" ]]
					then
						#$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.XMLParser $installationDirectory/Application-backup-$ephesoft_installed/server.xml $installationDirectory/Dependencies/tmp/conf.properties >> $ephesoft_log_file_name  2>&1
						oracle_application_connection_mode=1
						oracle_report_connection_mode=1
						oracle_report_archive_connection_mode=1
						authentication_mode=1
						connector_protocol=http
						if [[ -f "$temp_directory/conf.properties" ]]
						then 
							while read -r i || [[ -n $i ]]
							do

								var=`echo "$i" | awk -F"=" '{print $1}'`
								
								# For importing certificates again in case of patch installer.
								if [[ $var = "server.cert_file_path" ]]
								then
									server_cert_file_path=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								if [[ $var = "server.cert_password" ]]
								then
									server_cert_file_password=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								
								if [[ $var = "ca.cert_file_path" ]]
								then
									ca_cert_file_path=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								if [[ $var = "ca.cert_password" ]]
								then
									ca_cert_file_password=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								
								if [[ $var = "form_authentication_https" ]]
								then
									is_https_connector=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								
								if [[ $var = "form_authentication_https_password" ]]
								then
									https_connector_password=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								
								if [[ $var = "form_authentication_https_file_path" ]]
								then
									https_connector_file_path=`echo "$i" | awk -F"=" '{print $2}'`
								fi
								
								if [[ $oracle == 1 ]]
								then
									if [[ $var = "dataSource.password" ]]
									then
										password=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_application_password=$password
									fi
									if [[ $var = "reporting.password" ]]
									then
										password=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_report_password=$password
									fi
									if [[ $var = "reporting_archive.password" ]]
									then
										password=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_report_archive_password=$password
									fi
									if [[ $var = "reporting_archive.password" ]]
									then
										password=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_report_archive_password=$password
									fi
									if [[ $var = "dataSource.username" ]]
									then
										database=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_application_schema=$database
									fi
									if [[ $var = "reporting.username" ]]
									then
										database=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_report_schema=$database
									fi
									
									if [[ $var = "reporting_archive.username" ]]
									then
										database=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_report_archive_schema=$database
									fi
									if [[ $var = "dataSource.databaseName" ]]
									then
										sid_service=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_sid_service=$sid_service
									fi
									if [[ $var = "application.portNumber" ]]
									then
										portNumber=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_port_number=$portNumber
									fi
									if [[ $var = "dataSource.serverName" ]]
									then
										serverName=`echo "$i" | awk -F"=" '{print $2}'`
										oracle_server_name=$serverName
									fi
									if [[ $var = "dataSource.url" ]]
									then
										url=`echo "$i" | awk -F"=" '{print $2}'`
										#If url contains double slash then oracle connection mode is of service
										if [[ $url == *//* ]]
										then
											oracle_application_connection_mode=2
										fi
										echo "Oracle application connection mode is :" $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1 
									fi
									if [[ $var = "reporting.url" ]]
									then
										url=`echo "$i" | awk -F"=" '{print $2}'`
										#If url contains double slash then oracle connection mode is of service
										if [[ $url == *//* ]]
										then
											oracle_report_connection_mode=2
										fi
										echo "Oracle report connection mode is :" $oracle_report_connection_mode >> $ephesoft_log_file_name  2>&1
									fi
									if [[ $var = "reporting_archive.url" ]]
									then
										url=`echo "$i" | awk -F"=" '{print $2}'`
										#If url contains double slash then oracle connection mode is of service
										if [[ $url == *//* ]]
										then
											oracle_report_archive_connection_mode=2
										fi
										echo "Oracle report archive connection mode is :" $oracle_report_archive_connection_mode >> $ephesoft_log_file_name  2>&1
									fi
									
								else
									echo "For mariadb" >> $ephesoft_log_file_name  2>&1
									if [[ $var = "dataSource.password" ]]
									then
										password=`echo "$i" | awk -F"=" '{print $2}'`
										adminpassword=$password
									fi
									if [[ $var = "dataSource.username" ]]
									then
										userName=`echo "$i" | awk -F"=" '{print $2}'`
										ephesoftusername=$userName
									fi
									if [[ $var = "dataSource.databaseName" ]]
									then
										dbName=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									if [[ $var = "dataSource.serverName" ]]
									then
										address=`echo "$i" | awk -F"=" '{print $2}'`
										domain=$address
									fi
									if [[ $var = "dataSource.driverClassName" ]]
									then
										driverClassName=`echo "$i" | awk -F"=" '{print $2}'`
									fi
									if [[ $var = "application.portNumber" ]]
									then
										database_port_number=`echo "$i" | awk -F"=" '{print $2}'` 
									fi
									if [[ $var = "reporting.dbname" ]]
									then
											temp_reportDB=`echo "$i" | awk -F"=" '{print $2}'`
										   reportDB="${temp_reportDB##*/}"
									fi
									if [[ $var = "reporting_archive.dbname" ]]
									then
											temp_reportArchiveDB=`echo "$i" | awk -F"=" '{print $2}'`
										   reportArchiveDB="${temp_reportArchiveDB##*/}"
									fi
								fi	
									
								done  < "$temp_directory/conf.properties"
							#delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
							
							replace_conf_parameters server_name "$domain"
							
							#Server cert file path found, so setting authentication mode as PKI.
							if [[ $server_cert_file_path != "" ]]
							then
								authentication_mode=2
								replace_conf_parameters authentication_mode "2" 
							fi
							if [[ $authentication_mode == "1" ]]
							then
								echo "Authentication mode is FORM $authentication_mode  and https $is_https_connector" >> $ephesoft_log_file_name  2>&1
								#HTTPS connector found so setting HTTPS connector mode with FORM.
								if [[ $is_https_connector == "true" ]]
								then
									connector_protocol=https
								fi
								# Set https connector
								replace_conf_parameters connector_protocol "$connector_protocol"
								replace_conf_parameters authentication_mode "1"
							fi
						fi					
				
					fi
				
				fi
				
				#If HTTPS then copy certificates 
				if [[ $patch_installer = "n" ]] && [[ $authentication_mode == "1" || $authentication_mode == "0" ]] && [[ $connector_protocol == "https" ]]
				then
					echo "In copying HTTPS certificate" >> $ephesoft_log_file_name  2>&1
					form_authentication_https_file_name="$(basename "$https_connector_file_path")"
					if [[ -f "$temp_directory/$form_authentication_https_file_name" ]]
					then
						echo "FORM HTTPS cert file path file found. So copying it in $certs_folder_name directory." >> $ephesoft_log_file_name  2>&1
						copy_directory_recursively "$temp_directory/$form_authentication_https_file_name" "$installationDirectory/$certs_folder_name" "$error_copying_form_https_cert"
					fi
					# Copying certificates to the initial path/folder.
					if [[ ! -f "$https_connector_file_path" ]]
					then
						echo "FORM HTTPS cert file path file not found. So copying it in initial path $https_connector_file_path." >> $ephesoft_log_file_name  2>&1
						# Creting the directory structure if not exists.
						temp_parentdir="$(dirname "$https_connector_file_path")"
						if [ ! -d "$temp_parentdir" ]
						then
							mkdir -p "$temp_parentdir" >>$ephesoft_log_file_name  2>&1
						fi
						copy_directory_recursively "$installationDirectory/$certs_folder_name/$form_authentication_https_file_name" "$https_connector_file_path" "$error_copying_form_https_cert"
					fi
				fi
				
				
				echo server_cert_file_path $server_cert_file_path >> $ephesoft_log_file_name  2>&1
				if [[ $patch_installer = "n" ]] && [[ $certs_imported = 0 ]] && [[ "$server_cert_file_path" != "" ]]
				then
					echo "In copying certificates." >> $ephesoft_log_file_name  2>&1
					server_cert_file_name="$(basename "$server_cert_file_path")"
					if [[ -f "$temp_directory/$server_cert_file_name" ]]
					then
						echo "Server cert file path file found. So copying it in $certs_folder_name directory." >> $ephesoft_log_file_name  2>&1
						copy_directory_recursively "$temp_directory/$server_cert_file_name" "$installationDirectory/$certs_folder_name" "$error_copying_server_cert"
					fi
					ca_cert_jks_file_name="$(basename "$ca_cert_file_path")"
					if [[ -f "$temp_directory/$ca_cert_jks_file_name" ]]
					then
						echo "CA cert file path file found. So copying it in $certs_folder_name directory." >> $ephesoft_log_file_name  2>&1
						copy_directory_recursively "$temp_directory/$ca_cert_jks_file_name" "$installationDirectory/$certs_folder_name" "$error_copying_ca_cert"
					fi
					
					if [ -f "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" ] && [ -f "$installationDirectory/$certs_folder_name/$server_cert_file_name" ]
					then
						echo "In importing certificates." >> $ephesoft_log_file_name  2>&1
						#Importing certificates in java key store.
						#Gets the alias name
						pki_ca_cert_password="$ca_cert_file_password"
						error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -list -v -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -storepass $pki_ca_cert_password 2>&1 )
						if [ $? != 0 ]
						then
							echo $error_message  >>$ephesoft_log_file_name  2>&1
							echo -e "Error occurred while importing the jks file. Please import jks file to java key store before starting the server."
						else
							alias_name=$($installationDirectory/Dependencies/jdk/bin/keytool -list -v -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -storepass $pki_ca_cert_password| grep "Alias" |  awk '{print $3}')
							if [[ $alias_name != "" ]]
							then
								#Converting JKS to PEM file
								ca_cer_pem_file_name="${ca_cert_jks_file_name%.*}".pem
								echo "Pem file name " $ca_cer_pem_file_name >>$ephesoft_log_file_name  2>&1
								
								#Deleting already existing PEM file.
								if [ -f "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" ]
								then
									delete_files_and_show_message_if_error_occurred "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" "Error occurred while deleting $installationDirectory/$certs_folder_name/$ca_cer_pem_file_name file."
								fi
								error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -export -storepass $pki_ca_cert_password -alias "$alias_name" -keystore "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" -rfc -file "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" 2>&1 )
								if [ $? != 0 ]
								then
									echo $error_message  >>$ephesoft_log_file_name  2>&1
									echo -e "Error occurred while importing the jks file. Please import jks file to java key store before starting the server."	
								fi
								if [ -f "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" ]
								then
									echo "Pem file created."  >>$ephesoft_log_file_name  2>&1
									error_message=$($installationDirectory/Dependencies/jdk/bin/keytool -import -trustcacerts -noprompt -storepass changeit -keystore $installationDirectory/Dependencies/jdk/jre/lib/security/cacerts -alias $alias_name -file "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name" 2>&1)
									if [ $? != 0 ]
									then
										echo $error_message  >>$ephesoft_log_file_name  2>&1
										echo -e "Error occurred while importing the jks file. Please import jks file to java key store before starting the server."
									fi
								else
									echo "Pem file not created" "$installationDirectory/$certs_folder_name/$ca_cer_pem_file_name"  >>$ephesoft_log_file_name  2>&1
								fi
							fi
						fi
					fi
					
					# Copying certificates to the initial path/folder.
					if [[ ! -f "$server_cert_file_path" ]]
					then
						echo "Server cert file path file not found. So copying it in initial path $server_cert_file_path." >> $ephesoft_log_file_name  2>&1
						# Creting the directory structure if not exists.
						temp_parentdir="$(dirname "$server_cert_file_path")"
						if [ ! -d "$temp_parentdir" ]
						then
							mkdir -p "$temp_parentdir" >>$ephesoft_log_file_name  2>&1
						fi
						copy_directory_recursively "$installationDirectory/$certs_folder_name/$server_cert_file_name" "$server_cert_file_path" "$error_copying_server_cert"
					fi
					if [[ ! -f "$ca_cert_file_path" ]]
					then
						echo "CA cert file path file not found. So copying it in initial path $ca_cert_file_path." >> $ephesoft_log_file_name  2>&1
						# Creting the directory structure if not exists.
						temp_parentdir="$(dirname "$server_cert_file_path")"
						if [ ! -d "$temp_parentdir" ]
						then
							mkdir -p "$temp_parentdir" >>$ephesoft_log_file_name  2>&1
						fi
						copy_directory_recursively "$installationDirectory/$certs_folder_name/$ca_cert_jks_file_name" "$ca_cert_file_path" "$error_copying_server_cert"
					fi					
					replace_update_conf_parameters certs_imported 1
				fi
				if [[ $oracle = 1 ]]
				then
					databasetype=oracle
				fi
				#Updating comments tag before XML merging.
				update_form_pki_comments_tags

				if [[ $temp_ephesoft_installed > "4000" || $temp_ephesoft_installed = "4000" ]] 
				then
					echo "Previous version installed is "$temp_ephesoft_installed "so merging applicationContext.xml and web.xml" >>$ephesoft_log_file_name  2>&1
					
					if [ $applicationcontext_merge = 0 ]
					then
						echo "Merging applicationContext.xml" >>$ephesoft_log_file_name  2>&1
						replace_property_file_values "$installationDirectory/Application" "applicationContext.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
						copy_directory_recursively "$installationDirectory/Application/applicationContext.xml" "$installationDirectory/Application/applicationContext.xml.bak" "" "$error_creating_backup_applicationcontext_xml"
						
						if [ -f "$installationDirectory/Application-backup-$ephesoft_installed/applicationContext.xml" ]
						then
							$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.ApplicationContextXMLMerging $installationDirectory/Application-backup-$ephesoft_installed/applicationContext.xml $installationDirectory/Application/applicationContext.xml $installationDirectory/Application/temp/applicationContext.RemovePatch.xml >> $ephesoft_log_file_name  2>&1
							
							delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/temp" "Error occurred while deleting $installationDirectory/Application/temp folder."
							applicationcontext_merge=1
							replace_update_conf_parameters applicationcontext_merge 1
						fi
					fi
					
					if [ $applicationcontextsecurity_merge = 0 ]
					then
						echo "Merging applicationContext-security.xml" >>$ephesoft_log_file_name  2>&1
						copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/applicationContext-security.xml" "$installationDirectory/Application/WEB-INF/classes/META-INF/applicationContext-security.xml.bak" "" "$error_creating_backup_applicationcontextsecurity_xml"
						
						if [ -f "$installationDirectory/Application-backup-$ephesoft_installed/applicationContext-security.xml" ]
						then
							$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.ApplicationContextSecurityXMLMerging $installationDirectory/Application-backup-$ephesoft_installed/applicationContext-security.xml $installationDirectory/Application/WEB-INF/classes/META-INF/applicationContext-security.xml >> $ephesoft_log_file_name  2>&1
							applicationcontext_merge=1
							replace_update_conf_parameters applicationcontextsecurity_merge 1
						fi
					fi
					
					if [ $webxml_merge = 0 ]
					then
						echo "Merging web.xml" >>$ephesoft_log_file_name  2>&1

						if [ -f "$installationDirectory/Application-backup-$ephesoft_installed/web.xml" ] && [ -f "$installationDirectory/Dependencies/upgrade/XMLMerger.jar" ]
						then

							$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/upgrade/XMLMerger.jar com.ephesoft.XMLMerger $installationDirectory/Application-backup-$ephesoft_installed/web.xml $installationDirectory/Application/WEB-INF/web.xml $installationDirectory/Application/WEB-INF/web_std.xml $installationDirectory/Application/WEB-INF/web_sso.xml >> $ephesoft_log_file_name  2>&1
							delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/temp" "Error occurred while deleting $installationDirectory/Application/WEB-INF/temp folder."
							webxml_merge=1
							replace_update_conf_parameters webxml_merge 1
						fi
					fi
				else
					# Case of Ephesoft installed version is less than 3.x series.
					# Deleting temp folder in WEB-INF
					if [ -d "$installationDirectory/Application/WEB-INF/temp" ]
					then
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/WEB-INF/temp" "Error occurred while deleting $installationDirectory/Application/WEB-INF/temp folder."
					fi
					# Deleting temp folder in Application
					if [ -d "$installationDirectory/Application/temp" ]
					then
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Application/temp" "Error occurred while deleting $installationDirectory/Application/temp folder."
					fi	
				fi

				if [[ $patch_installer = "n" ]]
				then
					if [[ $oracle = 1 ]]
					then
						$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.ServerXMLMerging $installationDirectory/Application-backup-$ephesoft_installed/server.xml $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
            $installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.LogiReportSettingsMerging $installationDirectory/Application-backup-$ephesoft_installed/server.xml $installationDirectory/EphesoftReports/_Definitions/_Settings.lgx >> $ephesoft_log_file_name  2>&1
					else 
					 
						$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.ServerXMLMerging $installationDirectory/Application-backup-$ephesoft_installed/server.xml $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
						$installationDirectory/Dependencies/jdk/bin/java -cp $installationDirectory/Dependencies/UpgradeEphesoft.jar com.ephesoft.LogiReportSettingsMerging $installationDirectory/Application-backup-$ephesoft_installed/server.xml $installationDirectory/EphesoftReports/_Definitions/_Settings.lgx >> $ephesoft_log_file_name  2>&1
						#False indicates we are checking connection, not executing sql file and in last param we are defining by which database
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $database_port_number $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 7 0 0 $reportDB>> $ephesoft_log_file_name  2>&1
						if [[ -f $installationDirectory/Dependencies/tmp/database.properties ]]
						then 
							while read -r i || [[ -n $i ]]
							do
									var=`echo "$i" | awk -F"=" '{print $1}'`
									if [[ $var = "database" ]]
									then
										databasetype=`echo "$i" | awk -F"=" '{print $2}'`
										echo "Setting database type to " $databasetype >> $ephesoft_log_file_name 2>&1
									fi
								done  < $installationDirectory/Dependencies/tmp/database.properties
							delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
						fi
					fi
				fi
				
				if [[ $temp_ephesoft_installed > "4060" ]] || [[ $temp_ephesoft_installed == "4060" ]]
				then
					upgrade_database=1
				fi
				execute_query_manually=0
				temp_address=$address
				if [[ $database_patch == 1 ]] && [ $patch_installer = "n" ] && [[ $temp_ephesoft_installed < "4060" ]] || [[ $upgrade_database == 0 ]]
				then
					reportArchiveDB=$reportDB$report_db_archive
					echo $info_provide_root_user_1$domain$info_provide_root_user_2$reportArchiveDB.
					while :
					do
						echo $old_username
						#Selected database is mariadb/mysql
						selected_database=1
						if [ $use_silent_installer == "no" ]
						then
							  read -e -i "root" root_user_name
						else
							  root_user_name="$input_database_username"
							  echo "$root_user_name"
						fi
						take_input_database_password
						root_user_password=$password
						show_message $confirm_entered_details	
						while :
							do
							if [ $use_silent_installer == "no" ]
							then
								read -e -i "n" isNew
							else
								isNew="n"
								echo "$isNew"
							fi
								echo "$isNew" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
								if [ $? != 0 ]
								then
										show_message $invalid_option
										continue
								else
										break
								fi
							done
						if [ $isNew = 'Y' -o $isNew = 'y' ]
							then
							continue
						else
							#-----

							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $temp_address $database_port_number $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 7 0 0 $reportDB >> $ephesoft_log_file_name  2>&1							
							connection_status=$?
							temp_system_name=$(hostname)
							if [ $connection_status != 0 ] && [[ $temp_system_name == $address ]]
							then
								# Second check for localhost								
								$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest localhost $database_port_number $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 7 0 0 $reportDB >> $ephesoft_log_file_name  2>&1

								connection_status=$?
								if [ $connection_status == 0 ]
								then
									temp_address=localhost
								fi
							fi
							check_is_valid_mariadb_version
						
							
							
							if [[ $use_silent_installer = "yes" ]] && [ $connection_status != 0 ]
							then
								show_error_message_and_exit "$connection_error_root"
							fi
							if [ $connection_status != 0 ]
							then
								show_message "$error_connecting_db_execute_query"
								while :
									do
									if [ $use_silent_installer == "no" ]
									then
										read -e -i "n" isNew
									else
										isNew="n"
										echo "$isNew"
									fi
										echo "$isNew" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
										if [ $? != 0 ]
										then
												show_message $invalid_option
												continue
										else
												break
										fi
									done
								if [ $isNew = 'Y' -o $isNew = 'y' ]
								then
									continue;
								else
									execute_query_manually=1
									upgrade_database=1
									break;
								fi
							else
								echo $connection_successful >> $ephesoft_log_file_name  2>&1
							#-----
							break
							fi
						fi
					done
					
					
				
				fi
				memory_computation	
				
				if [[ $databasetype == "mariadb" ]]
				then
						
						
						
						reportDB=$(echo $reportDB | sed -e 's/\r//g')
						reportArchiveDB=$(echo $reportArchiveDB | sed -e 's/\r//g')
						portNumber=$database_port_number
					
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_PASSWORD@@" "$password"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_USERNAME@@" "$userName"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_SERVERNAME@@" "$address"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_PORT@@" "$portNumber"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_PASSWORD@@" "$password"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_USERNAME@@" "$userName"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@APPLICATION_DB_NAME@@" "$dbName"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_SERVERNAME@@" "$address"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_PORT@@" "$portNumber"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@REPORT_DB_NAME@@" "$reportDB"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
						
						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"
						
						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"
						
						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_SERVERNAME@@" "$address"
				
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_PORT@@" "$portNumber"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@APPLICATION_DB_NAME@@" "$dbName"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@REPORT_DB_NAME@@" "$reportDB"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/dcma-db.properties" "*.properties" "@@DB_PASSWORD@@" "$adminpassword"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/dcma-db.properties" "*.properties" "@@DB_USERNAME@@" "$ephesoftusername"
						
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@DB_USERNAME@@" "$ephesoftusername"

						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@DB_USERNAME@@" "$ephesoftusername"

						#replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/etl-variables.properties" "*.properties" "@@DB_USERNAME@@" "$ephesoftusername"

						# replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/MARIADB/etl-variables.properties" "*.properties" "@@DB_USERNAME@@" "$ephesoftusername"

						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@DB_USERNAME@@" "$ephesoftusername"

						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@DB_PASSWORD@@" "$adminpassword"

						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@SYSTEM_NAME@@" "$domain"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@DB_USERNAME@@" "$ephesoftusername"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@DB_PASSWORD@@" "$adminpassword"

						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@SYSTEM_NAME@@" "$domain"
				
				else if [[ $databasetype = "oracle" ]]
					then
					
						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_SCHEMA@@" "$oracle_report_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_SCHEMA@@" "$oracle_report_archive_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_PASSWORD@@" "$oracle_application_password"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_PASSWORD@@" "$oracle_report_password"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_PASSWORD@@" "$oracle_report_archive_password"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$oracle_application_schema"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$oracle_report_schema"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$oracle_report_archive_schema"
				
					fi
				fi
				
				replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@PRODUCT_NAME@@" "$product_name_message"
				
				replace_property_file_values "$installationDirectory/Dependencies/licensing" "license-info" "@@PRODUCT_NAME@@" "$product_name_message"
			
	
				if [ $database_patch = 1 ] && [ $patch_installer = "n" ] && [[ $execute_query_manually == 0 ]] || [[ $upgrade_database == 0 ]] 
				then
					
					if [[ $databasetype = "mariadb" ]]
					then
				
						if [[ $temp_ephesoft_installed < "4060" ]]
						then
							echo "In case of "$temp_ephesoft_installed " and root user is "$root_user_name  >> $ephesoft_log_file_name  2>&1
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $temp_address $portNumber $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $temp_address $portNumber $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
							
							if [ $? != 0 ]
							then
								echo "In case of "$temp_ephesoft_installed " and root user is "$root_user_name ". Granting privilege over new database created"  >> $ephesoft_log_file_name  2>&1
								$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $temp_address $portNumber $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 1 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
								$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $temp_address $portNumber $root_user_name $root_user_password NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 1 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
							fi
						
						else
							#First we check the connectivity with database with mysql. Before executing sql scripts false passed in parameter indicates we only want to check connectity not wants to execute sql script.
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1							
							connection_status=$?
							temp_system_name=$(hostname)
							if [ $connection_status != 0 ] && [[ $temp_system_name == $address ]]
							then
								# Second check for localhost								
								$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest localhost $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1

								connection_status=$?
								if [ $connection_status == 0 ]
								then
									address=localhost
								fi
							fi
							check_is_valid_mariadb_version
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/reporting_view_mariadb.sql 7 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_creating_reportdb_view"
							fi
						
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/reporting_view_mariadb.sql 7 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_creating_archivedb_view"
							fi
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spephesoft_cleanup.sql 1 0 0 >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_running_cleanup"
							fi
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spreport_cleanup.sql 0 0 0  >> $ephesoft_log_file_name  2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_running_report_cleanup"
							fi
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/sppurge_procedures.sql 0 0 0 >> $ephesoft_log_file_name 2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_running_purge_procedure"
							fi
							$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spdashboard_procedures.sql 0 0 0 >> $ephesoft_log_file_name 2>&1
							if [ $? != 0 ]
							then
								show_error_message_and_exit "$error_running_dashboard_procedure"
							fi
						fi
						connection_status=$?
				
					else if [[ $databasetype = "oracle" ]]
						then
							echo "Updating oracle sql file" >> $ephesoft_log_file_name  2>&1
							# $installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/oracle_application.sql 210 >> $ephesoft_log_file_name  2>&1
							temp_database_name=$oracle_application_schema
			
							$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/Application_db_config.sql 210 $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1
							
							connection_status=$?
							if [ $connection_status == 0 ]
							then
								temp_database_name=$oracle_report_schema
								
								$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_report_connection_mode 1 >> $ephesoft_log_file_name  2>&1
								
								connection_status=$?
								if [ $connection_status == 0 ]
								then
									temp_database_name=$oracle_report_archive_schema
									
									$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_report_archive_connection_mode 2 >> $ephesoft_log_file_name  2>&1
									connection_status=$?
								
								
									connection_status=$?
									if [ $connection_status == 0 ]
									then
									
										$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_report_connection_mode 1 >> $ephesoft_log_file_name  2>&1
								
								
										connection_status=$?
										if [ $connection_status == 0 ]
										then
																			
										$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_report_archive_connection_mode 2 >> $ephesoft_log_file_name  2>&1
										connection_status=$?
											if [ $connection_status == 0 ]
											then
																			
												$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spephesoft_cleanup.sql 1 $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1
												connection_status=$?
													if [ $connection_status == 0 ]
													then																			
														$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spreport_cleanup.sql 0 $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1
														connection_status=$?
														if [ $connection_status == 0 ]
														then																			
															$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/sppurge_procedures.sql 0 $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1
															connection_status=$?
															if [ $connection_status == 0 ]
															then																			
																$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spdashboard_procedures.sql 0 $oracle_application_connection_mode >> $ephesoft_log_file_name  2>&1
																connection_status=$?
															fi
														fi
													fi												
											fi		
									fi		
								fi
							fi
								
							fi
						fi

					fi
					
					if [ $connection_status != 0 ]
					then
						if [[ $databasetype = "mariadb" ]]
						then
							show_message "$error_executing_database_patch"
						else if [[ $databasetype = "oracle" ]]
							then
								show_message "$error_executing_database_patch_oracle"
							fi
						fi
					else
						delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
					fi
	
				fi
				
				
				
				
				replace_update_conf_parameters upgrade_database $upgrade_database
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
				
				replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"

				replace_property_file_values "$installationDirectory/JavaAppServer/webapps/dcma#oauth-server/WEB-INF/classes" "log4j2.xml" "@@INSTALL_DIR@@" "$installationDirectory"

				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@RANDOM_NUMBER@@" "$random_number"

				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SYSTEM_NAME@@" "$domain"
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@UPGRADEPATCH@@" "$patch_enable"

				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@INSTALL_DIR@@" "$installationDirectory"
				replace_property_file_values "$installationDirectory/Application/WEB-INF/" "web.xml" "@@INSTALL_DIR@@" "$installationDirectory"
				replace_property_file_values "$installationDirectory/Application/WEB-INF/" "web_sso.xml" "@@INSTALL_DIR@@" "$installationDirectory"
				replace_property_file_values "$installationDirectory/Application/WEB-INF/" "web_std.xml" "@@INSTALL_DIR@@" "$installationDirectory"

				find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@INSTALL_DIR_SQL@@SharedFolders|$sharedFoldersPath|g" {} \;

				find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@TOMCATPORTNUMBER@@|$tomcat_port_number|g" {} \;

				find  $installationDirectory/Application/WEB-INF/classes/META-INF -type f -name '*.sql' -exec sed -i "s|@@SYSTEM_NAME@@|$domain|g" {} \;
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@WORKFLOWDEPLOY@@" "$workflow_deploy"
	
				replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
				
				replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"

				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"

				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_sso.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"

				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@CONNECTORPORT@@" "$tomcat_port_number"

				replace_property_file_values "$installationDirectory/Application/WEB-INF" "web_std.xml" "@@TOMCATPORTNUMBER@@" "$tomcat_port_number"
				
				replace_property_file_values "$installationDirectory/Application" "applicationContext.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

				#replace_property_file_values "$installationDirectory/Application" "log4j.xml" "@@INSTALL_DIR@@" "$installationDirectory"
		
				#replace_property_file_values "$installationDirectory/Application/native/gs" "PDFA_def.ps" "@@INSTALL_DIR@@" "$installationDirectory/"
				
				replace_property_file_values "$installationDirectory/Application/native/Extractor" "logger_conf.json" "@@INSTALL_DIR@@" "$installationDirectory/"

				replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@INSTALL_DIR@@" "$installationDirectory"
				
				
				
				replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
				
				replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Reports" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@SERVER_ALIAS@@" "$server_alias_name"
				replace_property_file_values "$installationDirectory/JavaAppServer/webapps/ephesoft-cloud-client/WEB-INF/classes" "*.properties" "@@SERVER_ALIAS@@" "$server_alias_name"


				update_connector_properties

				update_realm_properties
				
				if [[ $databasetype = "oracle" ]]
				then
						replace_property_file_values "$installationDirectory/Application/native/encryption/Encryptor.sh" "*.sh" "@@INSTALL_DIR@@" "$installationDirectory"
						
						replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"
						#TODO
				else if [[ $databasetype == "mariadb" ]]
					then
						replace_property_file_values "$installationDirectory/Application/native/encryption/Encryptor.sh" "*.sh" "@@INSTALL_DIR@@" "$installationDirectory"
						
						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"
	
						replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@MYSQL_SERVERNAME@@" "$domain"
						
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@REPORT_DB_NAME@@" "$reportDB"
				
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
						
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@APPLICATION_DB_NAME@@" "$dbName"
						
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_SERVERNAME@@" "$address"
						
						replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_PORT@@" "$portNumber"
				
					fi
				fi
				
				if [[ $is_upgrade == "y" ]]
				then
						
						if [[ $databasetype == "mariadb" ]]
						then
						
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@MYSQL_SERVERNAME@@" "$address"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@MYSQL_PORT@@" "$portNumber"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@APPLICATION_DB_NAME@@" "$dbName"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_DB_NAME@@" "$reportDB"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR@@" "$installationDirectory"
								
								driverClassName="org.mariadb.jdbc.Driver"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "com.mysql.jdbc.Driver" "$driverClassName"
														
								replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "org.@@DATABASE_TYPE@@.jdbc.Driver" "$driverClassName"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "mysql" "$databasetype"
						
								replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "mariadb" "$databasetype"
														
								replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "@@DATABASE_TYPE@@" "$databasetype"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DB_USERNAME@@" "$ephesoftusername"
						
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DB_PASSWORD@@" "$adminpassword"
						else if [[ $databasetype == "oracle" ]]
							then
								echo "In case of Oracle updating properties." >> $ephesoft_log_file_name  2>&1 
								if [[ $oracle_application_connection_mode == "1" ]]
								then
									#For SID
									prop_oracle_server_name=$oracle_server_name
									prop_oracle_sid_service=:$oracle_sid_service
								else
									#For service
									prop_oracle_server_name=//$oracle_server_name
									prop_oracle_sid_service=/$oracle_sid_service
								fi
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@INSTALL_DIR@@" "$installationDirectory"
								
								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_SERVERNAME@@" "$prop_oracle_server_name"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_PORT@@" "$oracle_port_number"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_SID@@" "$prop_oracle_sid_service"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@EPHESOFT_PASSWORD@@" "$oracle_application_password"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_SCHEMA@@" "$oracle_report_schema"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_PASSWORD@@" "$oracle_report_password"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORTARCHIVE_SCHEMA@@" "$oracle_report_archive_schema"

								replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORTARCHIVE_PASSWORD@@" "$oracle_report_archive_password"

							fi
						fi

						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@INSTALL_DIR@@" "$installationDirectory"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@PRODUCT_NAME@@" "$product_name_message"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*.sh" "@@APPLICATION_USER@@" "$application_user"
			
						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "*ephesoft" "@@PRODUCT_NAME@@" "$product_name_message"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "ephesoft" "@@APPLICATION_USER@@" "$application_user"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/conf" "logrotate.conf*" "@@INSTALL_DIR@@" "$installationDirectory"
						
						replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@APPLICATION_USER_GROUP@@" "$application_user_group"
	
						replace_property_file_values "$installationDirectory/Dependencies/license-util/ephesoft-license-installer" "install-license.sh" "@@APPLICATION_USER@@" "$application_user"
			
						replace_property_file_values "$installationDirectory/JavaAppServer/bin" "ephesoft" "@@SERVICE_NAME@@" "$service_name"
						
						
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MAX_HEAP_SIZE@@" "$xmx_max_heap_size"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MIN_HEAP_SIZE@@" "$xmx_min_heap_size"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@NUANCE_LIB_PATH@@" "$nuance_shared_library_path"
	
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MAX_PERM_SIZE@@" "$xmx_maxperm_size"
						
						replace_property_file_values "$installationDirectory/JavaAppServer/bin/setenv.sh" "*.sh" "@@XMX_MIN_PERM_SIZE@@" "$xmx_minperm_size"
				fi
				
				delete_files_and_show_message_if_error_occurred "$sharedFoldersPath/SavedDashboards" "$error_occurred_while_deleting_saveddashboard"
				create_folder "$sharedFoldersPath/SavedDashboards" "$error_creating_saveddashboard_directory"
				
				if [[ ! -d "$sharedFoldersPath/$learn_files" ]]
				then
					create_folder "$sharedFoldersPath/$learn_files" "$error_creating_files_to_learn_directory"
				fi
				
				if [[ ! -d "$sharedFoldersPath/$customPluginJars" ]]
				then
					create_folder "$sharedFoldersPath/$customPluginJars" "$error_creating_customPluginJars_directory"
				fi
				
				replace_update_conf_parameters upgrade_successful 1
				
				replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
				
				echo "Last version while upgrading is :" $ephesoft_installed >> $ephesoft_log_file_name  2>&1 
				# replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@LAST_VERSION@@" "$ephesoft_installed"
				
				replace_property_file_values "$sharedFoldersPath/Reporting" "*.properties" "@@LAST_VERSION@@" "$ephesoft_installed"
				
				replace_property_file_values "$sharedFoldersPath" "*.dat" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
	
				#replace_property_file_values "$installationDirectory/Application" "log4j.xml" "@@EPHESOFT_VERSION@@" "$ephesoft_version"

				replace_property_file_values "$installationDirectory" "ReadMe.txt" "@@EPHESOFT_VERSION@@" "$ephesoft_version"
				
				replace_property_file_values "$installationDirectory" "ReadMe.txt" "@@PRODUCT_NAME@@" "$product_name_message"
				
				replace_conf_parameters ephesoft_installed "$ephesoft_version"
#				move_directory "$upgrade_configuration_file" "$upgrade_configuration_file-$ephesoft_installed" "$error_renaming_update_conf_file"
				
				
				fi
			break;
               	else
	        		exit_script
               	fi
         done
else
      if [ $temp_ephesoft_installed -eq $temp_ephesoft_version ]
      then
	echo $ephesoft_already_exists $ephesoft_application path.
	echo $shared_folders_already_exists $sharedFoldersPath path.
      else
	show_error_message_and_exit "$caption_EphesoftTransact $ephesoft_installed is already installed on the system."
      fi
fi
fi

#Creating temp directory file if not exists
if [ $temp_directory = "0" ] || [ ! -d $temp_directory ]
then
	temp_directory_name=temp-$service_name-$(date +%Y%m%d%H%M%S)
	temp_directory=$installationDirectory/$temp_directory_name
	create_folder "$temp_directory" "$error_occurred_while_creating_temp_directory"
	replace_conf_parameters temp_directory $temp_directory
fi

echo Temp directory is $temp_directory >> $ephesoft_log_file_name  2>&1

#If temp_directory exists then setting it as a local variable.
if [ -d $temp_directory ]
then
	chmod -R 1777 $temp_directory >> $ephesoft_log_file_name  2>&1
	echo "Exporting TMPDIR as " $temp_directory >> $ephesoft_log_file_name  2>&1
	export TMPDIR=$temp_directory
	echo "TMPDIR set as " $TMPDIR >> $ephesoft_log_file_name  2>&1
fi

if [ -d $temp_directory ] && [ -d $user_java_system_prefs_path ]
then
	echo "License information found on the system. So taking back up of license files." >> $ephesoft_log_file_name  2>&1
	copy_directory_recursively "$user_java_system_prefs_path" "$temp_directory" >> $ephesoft_log_file_name  2>&1
else	
	echo "License information not found on the system." >> $ephesoft_log_file_name  2>&1
fi


#Installing Development tools libraries. For Red hat only
if [ $operating_system = $redhat ]
then
	if [ $dev_tools = 0 ]  && [ $patch_installer = "n" ]
	then
	    show_message $info_installing_development_tools
	    yum -y groupinstall "Development Tools" --setopt=group_package_types=mandatory,default >> $ephesoft_log_file_name 2>&1 
	    if [ $? = 0 ]
	    then 
		show_message $success_install_dev_tools
		replace_conf_parameters "dev_tools" 1
	    else
		show_error_message_and_exit "$error_installing_development_tools."
	    fi
	fi
fi

#Installing net-tools package
if [ $operating_system = $redhat ]
then
	echo $check_if_net_tools_is_installed >> $ephesoft_log_file_name  2>&1
	yum list installed | grep net-tools >> $ephesoft_log_file_name  2>&1
	if [ $? != 0 ]
		then
			show_message $info_installing_net_tools
			yum -y install net-tools >> $ephesoft_log_file_name  2>&1
			show_message $success_installing_net_tools_package
		else
			echo $net_tools_package_is_already_installed >> $ephesoft_log_file_name  2>&1
	fi
fi

#Installing Checkinstall
if [ $operating_system = $redhat ] && [ $patch_installer = "n" ]
then
      if [ $checkinstall = 0 ]
      then
	      show_message $info_install_checkinstall
	      cd $installationDirectory/Dependencies
	      if [ -f $checkinstall_tar_file ]
	      then
		      delete_files_and_exit_if_error_occurred checkinstall "$error_deleting_checkinstall_folder"
		      
		      extract_tar_file "$info_extracting_tar_checkinstall" "$checkinstall_tar_file" "./" "$error_extracting_tar_checkinstall"

		      if [ -d checkinstall ]
		      then
			      cd $installationDirectory/Dependencies/checkinstall

			      build_library "$info_building_library_checkinstall" "$success_building_library_checkinstall" "$error_building_library_checkinstall"
			      
			      package_creation "$info_package_creation_checkinstall" "$success_package_creation_checkinstall" "$error_package_creation_checkinstall"

			      show_message "/usr/local/lib64" >/etc/ld.so.conf.d/installwatch.conf
			      
			      configure_run_time_bindings "$info_configure_run_time_bindings_checkinstall" "$success_configure_run_time_bindings_checkinstall" "$error_configure_run_time_bindings_checkinstall"

				  create_link_and_delete_if_already_exists "/usr/local/lib64/installwatch.so" "/usr/local/lib/installwatch.so" "$error_creating_link_checkinstall"				  
			      
			      create_folder /root/rpmbuild/SOURCES "$error_creating_checkinstall_sources_folder"
				  
				  if [ $is_amazon_linux == 1 ]
				  then
						create_folder /usr/src/rpm/SOURCES "$error_creating_checkinstall_sources_folder"
				  fi

			      cd $installationDirectory/Dependencies
			      delete_files_and_show_message_if_error_occurred checkinstall "$error_deleting_checkinstall_folder"
		      else
			      show_error_message_and_exit "$error_checkinstall_folder"
		      fi
	      replace_conf_parameters "checkinstall" 1

	      show_message  $checkinstall_installed_successfully
      else
	      show_error_message_and_exit "$error_checkinstall_tar_not_exist"
      fi
      else if [ $is_upgrade = "n" ]
	   then
	      show_message $info_checkinstall_already_installed
	   fi
      fi
fi

if [ $operating_system = $redhat ]
then
	if [ -f $installationDirectory/Dependencies/$dependencies_file_redhat ]
	then
	      move_directory "$installationDirectory/Dependencies/$dependencies_file_redhat" "$installationDirectory/Dependencies/dependencies" "$error_occurred_moving$dependencies_file_redhat"
	      delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/$dependencies_file_ubuntu" ""
	fi
else if [ $operating_system = $ubuntu ]
     then
	if [ -f $installationDirectory/Dependencies/$dependencies_file_ubuntu ]
	then
	      move_directory "$installationDirectory/Dependencies/$dependencies_file_ubuntu" "$installationDirectory/Dependencies/dependencies" "$error_occurred_moving$dependencies_file_ubuntu"
	      delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/$dependencies_file_redhat" ""
	fi
     fi
fi


#Loading all configuration properties
while read -r i || [[ -n $i ]]
do
   dependency=`echo "$i" | awk -F"=" '{print $1}'`
   is_installed=`echo "$i" | awk -F"=" '{print $2}'`
   	if [ $is_installed = 0 ]
	then
            if [ $operating_system = $redhat ]
            then
				# startup notification package is not available in amazon linux server. So skipping the package installation.
				if [ $is_amazon_linux = 1 ] && [ $dependency == "startup-notification" ]
				then
					continue;
				fi
				show_message $info_installing_updating\"$dependency\"$info_for_ephesoft
				yum -y install $dependency >> $ephesoft_log_file_name 2>&1 
				if [ $? = 0 ]
				then 
					echo \"$dependency\" installed successfully.
					find  $installationDirectory/Dependencies/dependencies -type f -name 'dependencies' -exec sed -i "s|$dependency=0|$dependency=1|g" {} \;
				else
					show_error_message_and_exit "$error_installing_dependency \"$dependency\""
				fi
	    else if [ $operating_system = $ubuntu ]
		 then
			show_message $info_installing_updating\"$dependency\"$info_for_ephesoft
		    apt-get install -y $dependency --force-yes >> $ephesoft_log_file_name 2>&1 
		    if [ $? = 0 ]
		    then 
			show_message \"$dependency\" installed successfully.
			find  $installationDirectory/Dependencies/dependencies -type f -name 'dependencies' -exec sed -i "s|$dependency=0|$dependency=1|g" {} \;
		    else
			show_error_message_and_exit "$error_installing_dependency \"$dependency\""
		    fi
		 fi
	    fi
	    
	fi
done < $installationDirectory/Dependencies/dependencies 

install_mysql_database () {

   		isNew='n'
		while :
		do             
		show_message $old_ip                      
		if [ $use_silent_installer == "no" ]
		then
		      readinput address
		else
		      address=$input_system_ip_name
		      show_message $address
		fi
		show_message $old_username
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_username userName 
		else
		      userName=$input_admin_database_username
		      show_message $userName
		fi
		ephesoftusername=$userName
		take_ephesoft_database_password
		show_message $old_db  
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_database dbName "$default_application_db_name"
		else
		      dbName=$input_application_database_name
		      show_message "$dbName"
		fi
		show_message $old_report_db
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_database reportDB "$default_report_db_name"
		else
		      reportDB=$input_report_database_name
		      show_message $reportDB
		fi
		show_message $old_report_archive_db
		if [ $use_silent_installer == "no" ]
		then
		      readinput_mysql_database reportArchiveDB "$default_report_archive_db_name"
		else
		      reportArchiveDB=$input_report_archive_database_name
		      show_message $reportArchiveDB
		fi
		show_message $new_db_port
		take_input_database_port
		show_message $confirm_entered_details	
		while :
		do
		      if [ $use_silent_installer == "no" ]
		      then
			      read -e -i "n" isNew
		      else
			      isNew="n"
			      show_message "$isNew"
		      fi
		      show_message "$isNew" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
		      if [ $? != 0 ]
		      then
			
			      show_message $invalid_option
			      continue
		      else
			      break
		      fi

			
		done
		if [ $isNew = 'Y' -o $isNew = 'y' ]
		then
			continue;
		else
			
			$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 >> $ephesoft_log_file_name  2>&1
			connection_status=$?
			
			if [[ $use_silent_installer = "yes" ]] && [ $connection_status != 0 ]
			then
				show_error_message_and_exit "$connection_error"
			fi
			if [ $connection_status != 0 ]
			then
				show_message "$re_enter_db_details"
				  continue;
			else
				echo $connection_successful >> $ephesoft_log_file_name  2>&1
				check_is_valid_mariadb_version
				echo $info_execute_database_patch
					                       
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						  read -e -i "y" overwrite_character
					else
						  overwrite_character="$input_database_patch_enable"
						  echo "$overwrite_character"
					fi
					echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
					if [ $? != 0 ]
					then
						echo $invalid_option
						continue
					fi
					if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
					then
						database_patch=1
					else
						database_patch=0
					fi					
					break;
				done
				
				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"
				
				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@DB_USERNAME@@" "$ephesoftusername"

				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@DB_PASSWORD@@" "$adminpassword"

				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@SYSTEM_NAME@@" "$domain"

				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"

				replace_property_file_values "$installationDirectory/Dependencies/MariaDBSetup" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

				if [[ $database_patch == 1 ]]
				then
					#Handling executing SQL queries in case of use existing and remote database.
					#Last argument 1 indicates we dont want to execute create users in case of remote database.
					$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_user_creation.sql 4 0 1  >> $ephesoft_log_file_name  2>&1
					$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
					$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/mariadb_db_config.sql 4 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
						show_error_message_and_exit "$error_creating_database"
					else
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/reporting_view_mariadb.sql 4 0 0 $reportDB >> $ephesoft_log_file_name  2>&1
						
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_creating_reportdb_view"
						fi
						
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/reporting_view_mariadb.sql 4 0 0 $reportArchiveDB >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_creating_archivedb_view"
						fi
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spephesoft_cleanup.sql 1 0 0 >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_running_cleanup"
						fi
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spreport_cleanup.sql 0 0 0  >> $ephesoft_log_file_name  2>&1
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_running_report_cleanup"
						fi
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/sppurge_procedures.sql 0 0 0  >> $ephesoft_log_file_name 2>&1
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_running_purge_procedure"
						fi
						$installationDirectory/Dependencies/jdk/bin/java -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/JavaAppServer/lib/mariadb-java-client-1.1.7.jar" com.ephesoft.connection.ConnectionTest $address $portNumber $userName $adminpassword NULL mariadb $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/MariaDBSetup/spdashboard_procedures.sql 0 0 0  >> $ephesoft_log_file_name 2>&1
						if [ $? != 0 ]
						then
							show_error_message_and_exit "$error_running_dashboard_procedure"
						fi
						if [[ -f $installationDirectory/Dependencies/tmp/database.properties ]]
						then 
							while read -r i || [[ -n $i ]]
							do
									var=`echo "$i" | awk -F"=" '{print $1}'`
									if [[ $var = "database" ]]
									then
										databasetype=`echo "$i" | awk -F"=" '{print $2}'`
									fi
								done  < $installationDirectory/Dependencies/tmp/database.properties
							delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
						fi
					fi
				fi
				break;
			fi
		      
		fi
	      done
	  
		
      
	  echo $info_replacing_path_properties_file
######ADDED
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/dcma-db.properties" "*.properties" "@@DB_PASSWORD@@" "$adminpassword"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/dcma-db.properties" "*.properties" "@@DB_USERNAME@@" "$ephesoftusername"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@DB_USERNAME@@" "$ephesoftusername"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@DB_PASSWORD@@" "$adminpassword"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DB_USERNAME@@" "$ephesoftusername"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DB_PASSWORD@@" "$adminpassword"
		
		if [[ $databasetype == "mariadb" ]]
		then
			driverClassName="org.mariadb.jdbc.Driver"
			replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "com.mysql.jdbc.Driver" "$driverClassName"
		fi
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "org.@@DATABASE_TYPE@@.jdbc.Driver" "$driverClassName"
		
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DATABASE_TYPE@@" "$databasetype"
				
		# replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/MARIADB/etl-variables.properties" "*.properties" "@@DB_USERNAME@@" "$ephesoftusername"
		
		# replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/MARIADB/etl-variables.properties" "*.properties" "@@DB_PASSWORD@@" "$adminpassword"

		#Upto this
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"
		
		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@DB_PASSWORD@@" "$adminpassword"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@DB_USERNAME@@" "$ephesoftusername"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_PASSWORD@@" "$password"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_USERNAME@@" "$userName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@APPLICATION_DB_NAME@@" "$dbName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_SERVERNAME@@" "$address"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@MYSQL_PORT@@" "$portNumber"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.properties" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_PASSWORD@@" "$password"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_USERNAME@@" "$userName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_SERVERNAME@@" "$address"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@MYSQL_PORT@@" "$portNumber"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_PASSWORD@@" "$password"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_USERNAME@@" "$userName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@APPLICATION_DB_NAME@@" "$dbName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_SERVERNAME@@" "$address"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@MYSQL_PORT@@" "$portNumber"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "mariadb_db_config.sql" "@@APPLICATION_DB_NAME@@" "$dbName"

	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "mariadb_db_config.sql" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "mariadb_db_config.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"

	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@INSTALL_DIR@@" "$installationDirectory"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@APPLICATION_DB_NAME@@" "$dbName"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_SERVERNAME@@" "$address"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_PORT@@" "$portNumber"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"
	
	replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Reports" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"	
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@MYSQL_SERVERNAME@@" "$address"
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@MYSQL_PORT@@" "$portNumber"
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@APPLICATION_DB_NAME@@" "$dbName"
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_DB_NAME@@" "$reportDB"
	
	replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@ARCHIVE_REPORT_DB_NAME@@" "$reportArchiveDB"
	

  if [ $operating_system = $ubuntu ]
  then
	  task=$(ufw status)
	  if echo "$task" | grep -q "inactive"; then
		show_message "Firewall ufw is inactive" >>$ephesoft_log_file_name  2>&1
		ufw allow $portNumber >>$ephesoft_log_file_name  2>&1 
	  else
		ufw --force enable >>$ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
		    show_message $error_occurred_enabling_ufw
		fi
		ufw allow $portNumber >>$ephesoft_log_file_name  2>&1 
		service ufw restart >>$ephesoft_log_file_name  2>&1
		if [ $? != 0 ]
		then
		    show_message $error_occurred_restarting_ufw
		fi
	  fi
  fi
}
install_oracle_database () {
	if [ "$is_existing_shared_folder" != "y" ]
		then
			
 			show_message $fresh_installation_message_oracle
 			
			while :
          	do
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "y" isNew
				else
					isNew="$input_new_database_schema"
					echo "$isNew"
				fi
           			echo "$isNew" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
           			if [ $? != 0 ]
           			then
              				show_message $invalid_option
              				continue
           			else
              				break
           			fi
          	done
		else
			# Use existing shared folders
			isNew='n'
		fi
	      	
        
        if [ $isNew = 'Y' -o $isNew = 'y' ]
        then                            
			while :
			do
				show_message "$enter_oracle_hostname"
				if [ $use_silent_installer == "no" ]
				then
					readinput oracle_server_name
				else
					oracle_server_name=$input_oracle_database_server_name
					show_message $oracle_server_name
				fi
				
				if [[ $use_silent_installer = "no" ]]
				then
					take_ephesoft_database_username "User Name:"
					oracle_user_name=$ephesoftusername						
				else
					show_message "User Name:"
					oracle_user_name=$input_oracle_database_username
					show_message $oracle_user_name
				fi
				oracle_user_name=${oracle_user_name^^}
				
				if [[ $use_silent_installer = "no" ]]
				then
					take_input_database_password "Password:"
					oracle_password=$password
				else
					show_message "Password:"
					oracle_password=$input_oracle_database_password
				fi
				
				show_message "Port:"
				if [[ $use_silent_installer = "no" ]]
				then
					
					default_database_port="1521"
					take_input_database_port_and_verify
					oracle_port_number=$portNumber			
				else
					oracle_port_number=$input_oracle_database_port_number
					show_message $oracle_port_number
				fi
				
				#---------
				echo -e "Please select the connection mode you want to use ?\n1. Oracle SID\n2. Service Name"
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "" oracle_database_connection_mode
					else
						oracle_database_connection_mode="$input_oracle_database_connection_mode"
						echo "$oracle_database_connection_mode"
					fi
						echo "$oracle_database_connection_mode"  >> $ephesoft_log_file_name  2>&1
						if [[ "$oracle_database_connection_mode" =~ [^1-2] ]] || [ ${#oracle_database_connection_mode} -lt 1 ] || [ ${#oracle_database_connection_mode} -gt 2 ]
						then
								show_message $invalid_option_database
								continue
						else
								break
						fi
				done
				#---------
				
				if [ $oracle_database_connection_mode == "1" ]
				then
					show_message "SID:"
					if [[ $use_silent_installer = "no" ]]
					then
						readinput oracle_sid_service
					else
						oracle_sid_service=$input_oracle_database_sid
						show_message $oracle_sid_service
					fi
				else 
					show_message "Service Name:"
					if [[ $use_silent_installer = "no" ]]
					then
						readinput oracle_sid_service
					else
						oracle_sid_service=$input_oracle_database_service_name
						show_message $oracle_sid_service
					fi
				fi
				
				
				show_message "Application DB Schema:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_mysql_database oracle_application_schema "$default_application_db_name"
				else
					oracle_application_schema="$input_oracle_database_application_db_schema"
					echo "$oracle_application_schema"
				fi
				oracle_application_schema=${oracle_application_schema^^}
				
				if [[ $use_silent_installer = "no" ]]
				then
					take_input_database_password "Application DB Schema Password:"
					oracle_application_password=$password
				else
					show_message "Application DB Schema Password:"
					oracle_application_password=$input_oracle_database_application_db_password
				fi
				
				show_message "Report DB Schema:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_mysql_database oracle_report_schema "$default_report_db_name"
				else
					oracle_report_schema="$input_oracle_database_report_db_schema"
					echo "$oracle_report_schema"
				fi
				oracle_report_schema=${oracle_report_schema^^}
				
				if [[ $use_silent_installer = "no" ]]
				then
					take_input_database_password "Report DB Schema Password:"
					oracle_report_password=$password
				else
					show_message "Report DB Schema Password:"
					oracle_report_password=$input_oracle_database_report_db_password
				fi
				
				show_message "Report Archive DB Schema:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput_mysql_database oracle_report_archive_schema "$default_report_archive_db_name"
				else
					oracle_report_archive_schema="$input_oracle_database_report_archive_db_schema"
					echo "$oracle_report_archive_schema"
				fi
				oracle_report_archive_schema=${oracle_report_archive_schema^^}
				
				
				if [[ $use_silent_installer = "no" ]]
				then
					take_input_database_password "Report Archive DB Schema Password:"
					oracle_report_archive_password=$password
				else
					show_message "Report Archive DB Schema Password:"
					oracle_report_archive_password=$input_oracle_database_report_db_password
				fi
				show_message $confirm_entered_details	
				while :
					do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "n" confirmed
					else
						confirmed="n"
						echo "$confirmed"
					fi
					echo "$confirmed" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
							show_message $invalid_option
							continue
					else
							break
					fi
				done
				if [ $confirmed = 'Y' -o $confirmed = 'y' ]
					then
					continue
				else
					#Install new schemas
					temp_database_name=$oracle_user_name
					temp_used_oracle_user_name="$oracle_user_name AS SYSDBA"
					
					# First check for SYSBDA
					$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number "$temp_used_oracle_user_name" $oracle_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/OracleSetup/oracle_user_creation.sql 7 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
					
					connection_status=$?
					if [ $connection_status != 0 ]
					then
						temp_used_oracle_user_name=$oracle_user_name
						# Second check for normal privilege
						$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number "$temp_used_oracle_user_name" $oracle_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/OracleSetup/oracle_user_creation.sql 7 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
						connection_status=$?
					fi
					
					
					
					if [[ $use_silent_installer = "yes" ]] && [ $connection_status != 0 ]
					then
						show_error_message_and_exit "$connection_error_database $temp_database_name."
					fi
					if [ $connection_status != 0 ]
					then
						show_message "$error_connecting_database$temp_database_name$error_connecting_database_2"
						  continue;
					else
						echo $connection_successful >> $ephesoft_log_file_name  2>&1
						
						echo $info_execute_database_patch
												   
						while :
						do
							if [ $use_silent_installer == "no" ]
							then
								  read -e -i "y" overwrite_character
							else
								  overwrite_character="$input_database_patch_enable"
								  echo "$overwrite_character"
							fi
							echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
							if [ $? != 0 ]
							then
								echo $invalid_option
								continue
							fi
							if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
							then
								database_patch=1
							else
								database_patch=0
							fi					
							break;
						done
						
					
						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_SCHEMA@@" "$oracle_report_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_SCHEMA@@" "$oracle_report_archive_schema"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_PASSWORD@@" "$oracle_application_password"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_PASSWORD@@" "$oracle_report_password"

						replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_PASSWORD@@" "$oracle_report_archive_password"

						if [[ $database_patch == 1 ]]
						then
						
							temp_database_name=$oracle_user_name
													
							$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number "$temp_used_oracle_user_name" $oracle_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/oracle_user_creation.sql 7 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
							
							connection_status=$?
							if [ $connection_status == 0 ]
							then
									temp_database_name=$oracle_application_schema
				
									$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/Application_db_config.sql 7 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
									
									connection_status=$?
									if [ $connection_status == 0 ]
									then
										temp_database_name=$oracle_application_schema
								
										$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/Application_db_config.sql 210 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
										
										connection_status=$?
										if [ $connection_status == 0 ]
										then
											temp_database_name=$oracle_report_schema
											
											$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
											
											connection_status=$?
											if [ $connection_status == 0 ]
											then
												temp_database_name=$oracle_report_archive_schema
												
												$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_database_connection_mode 2 >> $ephesoft_log_file_name  2>&1
												connection_status=$?
											
											
												if [ $connection_status == 0 ]
												then
												
												
													$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
													connection_status=$?
											
											
													if [ $connection_status == 0 ]
													then
												
														$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_database_connection_mode 2 >> $ephesoft_log_file_name  2>&1
														connection_status=$?
														if [ $connection_status == 0 ]
														then
															$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spephesoft_cleanup.sql 1 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
															connection_status=$?
															if [ $connection_status == 0 ]
															then
																$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spreport_cleanup.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
																connection_status=$?
																if [ $connection_status == 0 ]
																then
																	$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/sppurge_procedures.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
																	connection_status=$?
																	if [ $connection_status == 0 ]
																	then
																		$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spdashboard_procedures.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
																		connection_status=$?
																	fi
																fi
															fi	
														fi													
													fi
												fi
											fi
										fi
									fi
								fi
							if [ $connection_status != 0 ]
							then
								show_error_message_and_exit "$error_creating_database"
							else
								if [[ -f $installationDirectory/Dependencies/tmp/database.properties ]]
								then 
									while read -r i || [[ -n $i ]]
									do
											var=`echo "$i" | awk -F"=" '{print $1}'`
											if [[ $var = "database" ]]
											then
												databasetype=`echo "$i" | awk -F"=" '{print $2}'`
											fi
										done  < $installationDirectory/Dependencies/tmp/database.properties
									delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
								fi
							fi
						fi
						break;
					fi
					break
				fi
			done
	
	 else
		while :
		do             
			show_message "$enter_oracle_hostname"
			if [ $use_silent_installer == "no" ]
			then
				readinput oracle_server_name
			else
				oracle_server_name=$input_oracle_database_server_name
				show_message $oracle_server_name
			fi
			
			show_message "Port:"
			if [[ $use_silent_installer = "no" ]]
			then
				
				default_database_port="1521"
				take_input_database_port_and_verify
				oracle_port_number=$portNumber			
			else
				oracle_port_number=$input_oracle_database_port_number
				show_message $oracle_port_number
			fi
			
			#---------
			echo -e "Please select the connection mode you want to use ?\n1. Oracle SID\n2. Service Name"
			while :
			do
				if [ $use_silent_installer == "no" ]
				then
					read -e -i "" oracle_database_connection_mode
				else
					oracle_database_connection_mode="$input_oracle_database_connection_mode"
					echo "$oracle_database_connection_mode"
				fi
					echo "$oracle_database_connection_mode"  >> $ephesoft_log_file_name  2>&1
					if [[ "$oracle_database_connection_mode" =~ [^1-2] ]] || [ ${#oracle_database_connection_mode} -lt 1 ] || [ ${#oracle_database_connection_mode} -gt 2 ]
					then
							show_message $invalid_option_database
							continue
					else
							break
					fi
			done
			#---------
			
			if [ $oracle_database_connection_mode == "1" ]
			then
				show_message "SID:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput oracle_sid_service
				else
					oracle_sid_service=$input_oracle_database_sid
					show_message $oracle_sid_service
				fi
			else 
				show_message "Service Name:"
				if [[ $use_silent_installer = "no" ]]
				then
					readinput oracle_sid_service
				else
					oracle_sid_service=$input_oracle_database_service_name
					show_message $oracle_sid_service
				fi
			fi
			
			show_message "Application DB Schema:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_mysql_database oracle_application_schema "$default_application_db_name"
			else
				oracle_application_schema="$input_oracle_database_application_db_schema"
				echo "$oracle_application_schema"
			fi
			oracle_application_schema=${oracle_application_schema^^}
			
			if [[ $use_silent_installer = "no" ]]
			then
				take_input_database_password "Application DB Schema Password:"
				oracle_application_password=$password
			else
				show_message "Application DB Schema Password:"
				oracle_application_password=$input_oracle_database_application_db_password
			fi
			
			show_message "Report DB Schema:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_mysql_database oracle_report_schema "$default_report_db_name"
			else
				oracle_report_schema="$input_oracle_database_report_db_schema"
				echo "$oracle_report_schema"
			fi
			oracle_report_schema=${oracle_report_schema^^}
			
			
			if [[ $use_silent_installer = "no" ]]
			then
				take_input_database_password "Report DB Schema Password:"
				oracle_report_password=$password
			else
				show_message "Report DB Schema Password:"
				oracle_report_password=$input_oracle_database_report_db_password
			fi
			
			show_message "Report Archive DB Schema:"
			if [[ $use_silent_installer = "no" ]]
			then
				readinput_mysql_database oracle_report_archive_schema "$default_report_archive_db_name"
			else
				oracle_report_archive_schema="$input_oracle_database_report_archive_db_schema"
				echo "$oracle_report_archive_schema"
			fi
			oracle_report_archive_schema=${oracle_report_archive_schema^^}
			
			
			if [[ $use_silent_installer = "no" ]]
			then
				take_input_database_password "Report Archive DB Schema Password:"
				oracle_report_archive_password=$password
			else
				show_message "Report Archive DB Schema Password:"
				oracle_report_archive_password=$input_oracle_database_report_db_password
			fi
		show_message $confirm_entered_details	
		while :
		do
		      if [ $use_silent_installer == "no" ]
		      then
			      read -e -i "n" confirmed
		      else
			      confirmed="n"
			      show_message "$confirmed"
		      fi
		      show_message "$confirmed" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1
		      if [ $? != 0 ]
		      then
			
			      show_message $invalid_option
			      continue
		      else
			      break
		      fi

			
		done
		
		
		if [ $confirmed = 'Y' -o $confirmed = 'y' ]
		then
			continue;
		else
			temp_database_name=$oracle_application_schema
			
			$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/OracleSetup/Application_db_config.sql 7 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
			
			connection_status=$?
			if [ $connection_status == 0 ]
			then
				temp_database_name=$oracle_report_schema
				
				$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 7 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
				
				connection_status=$?
				if [ $connection_status == 0 ]
				then
					temp_database_name=$oracle_report_archive_schema
					
					$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties false $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 7 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
				fi
			fi
			
			if [[ $use_silent_installer = "yes" ]] && [ $connection_status != 0 ]
			then
				show_error_message_and_exit "$connection_error_database $temp_database_name."
			fi
			if [ $connection_status != 0 ]
			then
				show_message "$error_connecting_database$temp_database_name$error_connecting_database_2"
				  continue;
			else
				echo $connection_successful >> $ephesoft_log_file_name  2>&1
				
				echo $info_execute_database_patch
					                       
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						  read -e -i "y" overwrite_character
					else
						  overwrite_character="$input_database_patch_enable"
						  echo "$overwrite_character"
					fi
					echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name  2>&1 
					if [ $? != 0 ]
					then
						echo $invalid_option
						continue
					fi
					if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
					then
						database_patch=1
					else
						database_patch=0
					fi					
					break;
				done
					
				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@UPGRADE_FLAG@@" "$is_upgrade_flag"
				
				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_SCHEMA@@" "$oracle_report_schema"

				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_SCHEMA@@" "$oracle_report_archive_schema"

				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@EPHESOFT_PASSWORD@@" "$oracle_application_password"

				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORT_PASSWORD@@" "$oracle_report_password"

				replace_property_file_values "$installationDirectory/Dependencies/OracleSetup" "*.sql" "@@REPORTARCHIVE_PASSWORD@@" "$oracle_report_archive_password"

				if [[ $database_patch == 1 ]]
				then
					temp_database_name=$oracle_application_schema
			
					$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/Application_db_config.sql 210 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
					
					connection_status=$?
					if [ $connection_status == 0 ]
					then
						temp_database_name=$oracle_report_schema
						
						$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
						
						connection_status=$?
						if [ $connection_status == 0 ]
						then
							temp_database_name=$oracle_report_archive_schema
							
							$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/report_db_config.sql 210 $oracle_database_connection_mode 2>> $ephesoft_log_file_name  2>&1
							
							connection_status=$?
						
						
							if [ $connection_status == 0 ]
							then					
								$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp "$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_database_connection_mode 1 >> $ephesoft_log_file_name  2>&1
								connection_status=$?
								
								if [ $connection_status == 0 ]
								then
															
									$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/reporting_view_oracle.sql 210 $oracle_database_connection_mode 2 >> $ephesoft_log_file_name  2>&1
									connection_status=$?
									if [ $connection_status == 0 ]
									then						
										$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_application_schema $oracle_application_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spephesoft_cleanup.sql 1 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
										connection_status=$?
										if [ $connection_status == 0 ]
										then						
											$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spreport_cleanup.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
											connection_status=$?
											if [ $connection_status == 0 ]
											then						
												$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_archive_schema $oracle_report_archive_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/sppurge_procedures.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
												connection_status=$?
												if [ $connection_status == 0 ]
												then						
													$installationDirectory/Dependencies/jdk/bin/java -Djava.security.egd=file:/dev/../dev/urandom -cp 	"$installationDirectory/Dependencies/ConnectionTest.jar:$installationDirectory/Application/WEB-INF/lib/ojdbc7.jar" com.ephesoft.connection.ConnectionTest $oracle_server_name $oracle_port_number $oracle_report_schema $oracle_report_password $oracle_sid_service oracle $installationDirectory/Dependencies/tmp/database.properties true $installationDirectory/Dependencies/OracleSetup/spdashboard_procedures.sql 0 $oracle_database_connection_mode >> $ephesoft_log_file_name  2>&1
													connection_status=$?
												fi
											fi	
										fi											
									fi									
								fi
							fi									
						fi						
				

				fi
					if [ $connection_status != 0 ]
					then
						show_error_message_and_exit "$error_creating_database"
					else
						if [[ -f $installationDirectory/Dependencies/tmp/database.properties ]]
						then 
							while read -r i || [[ -n $i ]]
							do
									var=`echo "$i" | awk -F"=" '{print $1}'`
									if [[ $var = "database" ]]
									then
										databasetype=`echo "$i" | awk -F"=" '{print $2}'`
									fi
								done  < $installationDirectory/Dependencies/tmp/database.properties
							delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/tmp" "$error_deleting_tmp_directory" >> $ephesoft_log_file_name 2>&1
						fi
					fi
				fi
				break;
			fi
		      
		fi
	      done
	  fi
	  
	  				
		if [ $oracle_database_connection_mode == "1" ]
		then
			#For SID
			prop_oracle_server_name=$oracle_server_name
			prop_oracle_sid_service=:$oracle_sid_service
		else
			#For service
			prop_oracle_server_name=//$oracle_server_name
			prop_oracle_sid_service=/$oracle_sid_service
		fi
	  
		#replace server xml file corresponding to oracle
		copy_directory_recursively "$installationDirectory/JavaAppServer/confOracle/server.xml" "$installationDirectory/JavaAppServer/conf/server.xml" "" "$error_oracle_copy_server_xml"

		#replace dcma-reporting folder corresponding to oracle
		copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/ORACLE/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-reporting/" "" "$error_oracle_copy_reporting"

		#replace dcma-data-access folder corresponding to oracle
		copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/Oracle/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-data-access/" "" "$error_oracle_copy_data_access_files"
		
		#replace dcma-workflows folder corresponding to oracle
		copy_directory_recursively "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-workflows/Oracle/*" "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-workflows/" "" "$error_oracle_copy_data_workflows_files"
					
		if [[ -d "$installationDirectory/EphesoftReports/Oracle" ]]
		then
			copy_directory_recursively "$installationDirectory/EphesoftReports/Oracle/*" "$installationDirectory/EphesoftReports/" "" "$error_oracle_copy_ephesoftreports_files"
		fi
				
		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_SERVERNAME@@" "$prop_oracle_server_name"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_PORT@@" "$oracle_port_number"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@Orcl_SID@@" "$prop_oracle_sid_service"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@EPHESOFT_PASSWORD@@" "$oracle_application_password"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_SCHEMA@@" "$oracle_report_schema"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORT_PASSWORD@@" "$oracle_report_password"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORTARCHIVE_SCHEMA@@" "$oracle_report_archive_schema"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@REPORTARCHIVE_PASSWORD@@" "$oracle_report_archive_password"


		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.xml" "@@EPHESOFT_SCHEMA@@" "$oracle_application_schema"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@APPLICATION_DB_NAME@@" "$oracle_application_schema"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@REPORT_DB_NAME@@" "$oracle_report_schema"

		replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF" "*.sql" "@@ARCHIVE_REPORT_DB_NAME@@" "$oracle_report_archive_schema"
      
		echo $info_replacing_path_properties_file
		######ADDED

		if [[ $databasetype == "mysql" ]]
		then
			driverClassName="com.mysql.jdbc.Driver"
			replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "org.mariadb.jdbc.Driver" "$driverClassName"
		else if [[ $databasetype == "mariadb" ]]
			then
				driverClassName="org.mariadb.jdbc.Driver"
				replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "com.mysql.jdbc.Driver" "$driverClassName"
			fi
		fi

		replace_property_file_values "$installationDirectory/JavaAppServer" "server.xml" "org.@@DATABASE_TYPE@@.jdbc.Driver" "$driverClassName"

		replace_property_file_values "$installationDirectory/JavaAppServer" "*.xml" "@@DATABASE_TYPE@@" "$databasetype"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@INSTALL_DIR@@" "$installationDirectory"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@REPORT_DB_NAME@@" "$oracle_report_schema"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@ARCHIVE_REPORT_DB_NAME@@" "$oracle_report_archive_schema"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@APPLICATION_DB_NAME@@" "$oracle_application_schema"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_SERVERNAME@@" "$oracle_server_name"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Settings.lgx" "*.lgx" "@@MYSQL_PORT@@" "$oracle_port_number"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"

		replace_property_file_values "$installationDirectory/EphesoftReports/_Definitions/_Reports" "*.lgx" "@@INSTALL_DIR_SQL@@SharedFolders" "$sharedFoldersPath"	

		replace_conf_parameters oracle 1
	
}

grep -lir '@@Orcl_SERVERNAME@@\|@@MYSQL_SERVERNAME@@' $installationDirectory/JavaAppServer/conf/server.xml >> $ephesoft_log_file_name  2>&1
if [ $? == 0 ]
then
		mysql_installed="no"
else
		mysql_installed="yes"
fi

# If domain is null. Handling when installation breaks at installing dependency.

if [[ $domain = '' ]]
then	
		echo "Domain name is empty. Set through server_name as $server_name." >> $ephesoft_log_file_name  2>&1
		domain=$server_name
fi

# Installing database
if [ $mysql_installed = "no" ]
then
result=0

echo $result  >> $ephesoft_log_file_name  2>&1
if [ $ephesoft_application = 0 -o $result = 0 ] && [ $is_upgrade = "n" ] && [ $patch_installer = "n" ]
then            
	replace_conf_parameters ephesoft_application "$installationDirectory"
	#-----------------------
	echo -e "Please select database type you want to use ? \n1. MariaDB (10.6 series, recommended version $mariadb_version_recommend)\n2. Oracle"
	while :
	do
		if [ $use_silent_installer == "no" ]
		then
			read -e -i "" selected_database
		else
			selected_database="$input_database_type"
			echo "$selected_database"
		fi
			echo "$selected_database"  >> $ephesoft_log_file_name  2>&1
			if [[ "$selected_database" =~ [^1-2] ]] || [ ${#selected_database} -lt 1 ] || [ ${#selected_database} -gt 2 ]
			then
					show_message $invalid_option_database
					continue
			else
					break
			fi
	done
	
	if [[ $selected_database = 1 ]]
	then
		echo "Selected database is mariadb" >> $ephesoft_log_file_name  2>&1
		install_mysql_database
		replace_conf_parameters database_type "mariadb" 
	else if [[ $selected_database = 2 ]]
		then
			echo "Selected database is oracle" >> $ephesoft_log_file_name  2>&1
			install_oracle_database
			replace_conf_parameters database_type "oracle" 
		fi
	fi
	echo "Done with database." >>$ephesoft_log_file_name  2>&1 
	#------------------------	
else if [ $is_upgrade = "n" ]
      then
		echo "In case of database is already installed first check" >>$ephesoft_log_file_name  2>&1 
		if [[ $oracle = 1 ]] 
		then
			show_message $oracle_already_installed
		else
			show_message $mysql_already_installed
		fi
      fi
fi

else if [ $is_upgrade = "n" ]
      then
		echo "In case of database is already installed second check" >>$ephesoft_log_file_name  2>&1 
			if [[ $oracle = 1 ]] 
			then
				show_message $oracle_already_installed
			else
				show_message $mysql_already_installed
			fi
      fi
fi

# Configuring authentication
if [ $is_upgrade = "n" ] && [ $patch_installer = "n" ]
then
	is_first_time_set_up=true
	if [ $authentication_mode == 0 ]
	then
		show_message $info_authentication_started
		
		echo -e "Please select the Authentication Mode to use: \n1. Standard Form Authentication (default)\n2. PKI Authentication"
		while :
		do
			if [ $use_silent_installer == "no" ]
			then
				read -e -i "" selected_authentication_mode
			else
				selected_authentication_mode="$input_authentication_mode"
				echo "$selected_authentication_mode"
			fi
				echo "$selected_authentication_mode"  >> $ephesoft_log_file_name  2>&1
				if [[ "$selected_authentication_mode" =~ [^1-2] ]] || [ ${#selected_authentication_mode} -lt 1 ] || [ ${#selected_authentication_mode} -gt 2 ]
				then
						show_message $invalid_option_database
						continue
				else
						break
				fi
		done
	else
		is_first_time_set_up=false
		if [ $authentication_mode == 1 ]
		then
			echo "Authentication mode already set as FORM."
		else
			echo "Authentication mode already set as PKI."
		fi
		selected_authentication_mode=$authentication_mode
	fi
	
	if [[ $selected_authentication_mode = 1 ]]
	then
		echo "Selected authentication mode is FORM" >> $ephesoft_log_file_name  2>&1
		
		set_form_authentication_mode
		update_logi_report_authentication
		replace_conf_parameters authentication_mode "1"
	else if [[ $selected_authentication_mode = 2 ]]
		then
			echo "Selected authentication mode is PKI" >> $ephesoft_log_file_name  2>&1
				
				echo -e "Please select one of the user name retriever parameter from certificate : \n1. CN \n2. PrincipalName \n3. RFC822Name \n4. RegisteredID"
				while :
				do
					if [ $use_silent_installer == "no" ]
					then
						read -e -i "" selected_username_retriever
					else
						selected_username_retriever="$input_pki_username_retriever"
						echo "$selected_username_retriever"
					fi
						echo "$selected_username_retriever"  >> $ephesoft_log_file_name  2>&1
						if [[ "$selected_username_retriever" =~ [^1-4] ]] || [ ${#selected_username_retriever} -lt 1 ] || [ ${#selected_username_retriever} -gt 4 ]
						then
								show_message $invalid_option_database
								continue
						else
								break
						fi
				done
			update_realm_user_retriever  "$selected_username_retriever"
			set_pki_authentication_mode
			replace_conf_parameters authentication_mode "2" 
		fi
	fi
	
	if [ $is_first_time_set_up == true ]
	then
		show_message $info_authentication_completed_successfully
	else
		show_message $info_authentication_completed
	fi
	echo "Done with authentication mode." >>$ephesoft_log_file_name  2>&1 

fi


if [ $is_upgrade = "y" ]
then
	update_realm_user_retriever
	replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-mail-import/mail-import.properties" "*.properties" "@@INLINE_ATTACHMENT_FEATURE@@" "OFF"
fi

if [ $patch_installer = "n" ] || [ $is_upgrade = "n" ]
then
      enable_port_access "$firewall_enable_tomcat_port" "$tomcat_port_number" "tomcat_port_number" "$error_enabling_tomcat_port"
      replace_property_file_values "$installationDirectory/Application/WEB-INF/classes/META-INF/dcma-mail-import/mail-import.properties" "*.properties" "@@INLINE_ATTACHMENT_FEATURE@@" "ON"
fi

install_software() {

for param_name in "${software_already_installed[@]}"
do
  value=`cat ${ephesoft_configuration_file} | grep "${param_name}=" | cut -d'=' -f2` 
  if [ "$value" = '' ]
  then
      show_error_message_and_exit "$error_installing$display_name."
  fi
  tarName=`hgetTarValue $param_name`
  if [ $value = 1 ]
  then	

	if [ "$param_name" == "libreoffice" ]
	then
		libreoffice_upgrade_required=1
	    check_version libreoffice $param_name $tarName libreoffice_upgrade_required $libreoffice_deb_version $libreoffice_redhat_version
	fi
	
	if [ "$param_name" == "wkhtmltopdf" ]
	then
		wkhtmltopdf_upgrade_required=1
	    #  check_version wkhtmltopdf $param_name $tarName wkhtmltopdf_upgrade_required $wkhtmltopdf_ubuntu_version $wkhtmltopdf_redhat_version
	fi
	
	if [ "$param_name" == "imagemagick" ]
	then
		if ( [ "$temp_ephesoft_installed" -lt 4600 ] && [ $is_upgrade == "y" ])
		then
			imagemagick_upgrade_required=1
		else
			imagemagick_upgrade_required=0
			check_version ImageMagick $param_name $tarName imagemagick_upgrade_required $imagemagick_deb_version $imagemagick_rpm_package
		fi
	fi
	if [ "$param_name" == "graphicsmagick" ]
	then
		if ( [ "$temp_ephesoft_installed" -lt 4600 ] && [ $is_upgrade == "y" ])
		then
			graphicsmagick_upgrade_required=1
		else
			graphicsmagick_upgrade_required=0
			check_version GraphicsMagick $param_name $tarName graphicsmagick_upgrade_required $graphicsmagick_deb_version $graphicsmagick_rpm_package
		fi
	fi
	if [ "$param_name" == "leptonica" ]
	then
		leptonica_upgrade_required=0
	    check_version leptonica $param_name $tarName leptonica_upgrade_required $leptonica_deb_version $leptonica_rpm_package
	fi
	if [ "$param_name" == "tesseract" ]
	then
		tesseract_upgrade_required=0
	    check_version tesseract $param_name $tarName tesseract_upgrade_required $tesseract_deb_version $tesseract_rpm_package
	fi
	if [ "$param_name" == "omnipage" ]
	then
	      #check_version nuance-omnipage-csdk-devel $param_name $tarName nuance_upgrade_required $nuance_devel_deb_version $nuance_devel_rpm_package
	      check_version nuance-omnipage-csdk-lib64 $param_name $tarName omnipage_upgrade_required $nuance_lib64_deb_version $nuance_lib64_rpm_package
	fi
	if [ "$param_name" == "poco" ]
	then
		poco_upgrade_required=1
		if ( [ "$last_installed_version" == "$installed_version4501" ] || [ "$last_installed_version" == "$installed_version4502" ] )
		then
			poco_upgrade_required=0
		fi

	    # check_version poco $param_name $tarName poco_upgrade_required $poco_deb_version $poco_rpm_package
	fi
  fi
done

#install_software

if [[ $libreoffice_upgrade_required == "1" ]]
then
      uninstall "$info_uninstall_libreoffice" uninstall_libreoffice >>$ephesoft_log_file_name  2>&1 
      replace_conf_parameters libreoffice 0      
fi

if [[ $wkhtmltopdf_upgrade_required == "1" ]]
then
      uninstall "$info_uninstall_wkhtmltopdf" uninstall_wkhtmltopdf >>$ephesoft_log_file_name  2>&1 
      replace_conf_parameters wkhtmltopdf 0      
fi

if [[ $imagemagick_upgrade_required == "1" ]]
then
       uninstall "$info_uninstalling_imagemagick" uninstall_imagemagick >>$ephesoft_log_file_name  2>&1 
       replace_conf_parameters imagemagick 0
fi

if [[ $graphicsmagick_upgrade_required == "1" ]]
then
       uninstall "$info_uninstalling_graphicsmagick" uninstall_graphicsmagick >>$ephesoft_log_file_name  2>&1
       replace_conf_parameters graphicsmagick 0
fi

if [[ $tesseract_upgrade_required == "1" ]] || [[ $leptonica_upgrade_required == "1" ]]
then
       uninstall "$info_uninstall_tesseract" uninstall_tesseract >>$ephesoft_log_file_name  2>&1
	   #Hanlding if tesseract is previously installed and then in case of upgrade, install_tesseract_option will be set to yes which will install tesseract.
	   install_tesseract_option=y
       replace_conf_parameters tesseract 0
fi

if [[ $poco_upgrade_required == "1" ]]
then
      uninstall "$info_uninstall_poco" uninstall_poco >>$ephesoft_log_file_name  2>&1 
      replace_conf_parameters poco 0
fi

if [[ $omnipage_upgrade_required == "1" ]]
then
       uninstall "$info_uninstall_nuance" uninstall_nuance >>$ephesoft_log_file_name  2>&1 
       replace_conf_parameters omnipage 0
fi

#Check libreoffice already installed on the system.
if [ $libreoffice = 0 ] && [ $patch_installer = "n" ]
then
		soffice --version >>$ephesoft_log_file_name  2>&1 
		if [ $? == 0 ]
		then
		  libreoffice=1
		  echo "Libreoffice is already installed on the server. " >>$ephesoft_log_file_name  2>&1 
		  # Moving libreoffice to required directory
		  if [ ! -d /opt/libreoffice6.3 ]
		  then
			echo "Moving libreoffice to /opt/libreoffice6.3 directory." >>$ephesoft_log_file_name  2>&1 
			if [ -d /usr/lib/libreoffice ]
			then
				echo "Moving /usr/lib/libreoffice to /opt/libreoffice6.3 directory." >>$ephesoft_log_file_name  2>&1 
				create_link_and_delete_if_already_exists "/opt/libreoffice6.3" "/usr/lib/libreoffice" "$error_copying_libreoffice_folder"
			else if [ -d /usr/lib64/libreoffice ]
				then
					echo "Moving /usr/lib64/libreoffice to /opt/libreoffice6.3 directory." >>$ephesoft_log_file_name  2>&1 
					create_link_and_delete_if_already_exists "/opt/libreoffice6.3" "/usr/lib64/libreoffice" "$error_copying_libreoffice_folder"
				fi
			fi
		  fi
		  
		fi
fi

#Installing LibreOffice
if [ $libreoffice = 0 ] && [ $patch_installer = "n" ]
then
	if [ $operating_system = $redhat ]
	then
		# Setting java path
		set_java_path_libreoffice
		libreoffice_version=$libreoffice_redhat_version
		show_message $info_install_libreoffice
		cd $installationDirectory/Dependencies/LibreOffice/RedHat
		if [ -f $libreoffice_tar_file ]
		then
		    delete_files_and_exit_if_error_occurred $libreoffice_redhat_version "$error_deleting_libreoffice_folder"
		
		    extract_tar_file "$info_extracting_tar_libreoffice" "$libreoffice_tar_file" "./" "$error_extracting_tar_libreoffice"

		    if [ -d $libreoffice_version ]
		    then
				cd $libreoffice_version/RPMS/
				install_rpm_nodeps "$info_install_binaries_libreoffice" "*.rpm" "$error_install_binaries_libreoffice" "$success_install_binaries_libreoffice"
		    	create_link_and_delete_if_already_exists "/usr/bin/soffice" "/opt/libreoffice6.3/program/soffice" "$error_creating_link_libreoffice"
				cd $installationDirectory/Dependencies/LibreOffice/RedHat
				delete_files_and_exit_if_error_occurred $libreoffice_redhat_version "$error_deleting_libreoffice_folder"
		    else
				show_error_message_and_exit "$error_libreoffice_folders"
		    fi
		    replace_conf_parameters libreoffice 1
		    show_message  $libreoffice_installed_successfully
		else
		    show_error_message_and_exit "$error_libreoffice_tar_not_exist"
		fi
	else if [ $operating_system = $ubuntu ]
	then
		libreoffice_version=$libreoffice_ubuntu_version
		show_message $info_install_libreoffice
		cd $installationDirectory/Dependencies/LibreOffice/Debian
		if [ -f $libreoffice_tar_file ]
		then
		    delete_files_and_exit_if_error_occurred $libreoffice_ubuntu_version "$error_deleting_libreoffice_folder"
		
		    extract_tar_file "$info_extracting_tar_libreoffice" "$libreoffice_tar_file" "./" "$error_extracting_tar_libreoffice"
			
		    if [ -d $libreoffice_version ]
		    then
				cd $libreoffice_version/DEBS/
				install_deb "$info_install_binaries_libreoffice" "*.deb" "$error_install_binaries_libreoffice" "$success_install_binaries_libreoffice"
		    	create_link_and_delete_if_already_exists "/usr/bin/soffice" "/opt/libreoffice6.3/program/soffice" "$error_creating_link_libreoffice"
				cd $installationDirectory/Dependencies/LibreOffice/Debian
				delete_files_and_exit_if_error_occurred $libreoffice_ubuntu_version "$error_deleting_libreoffice_folder"
		    else
				show_error_message_and_exit "$error_libreoffice_folders"
		    fi
		    replace_conf_parameters libreoffice 1
		    show_message  $libreoffice_installed_successfully
		else
		    show_error_message_and_exit "$error_libreoffice_tar_not_exist"
		fi
	fi
	fi
else if [ $is_upgrade = "n" ]
     then
	show_message $info_libreoffice_already_installed
     fi
fi

# EEN-4891 Creating /root/rpmbuild/SOURCES directory in case of folder does not exist.
# Used in both ubuntu and RHEL. create_folder will check if folder exist or not and can create subdirectory also.
create_folder /root/rpmbuild/SOURCES "$error_creating_checkinstall_sources_folder"

#Installing Wkhtmltopdf
if [ $wkhtmltopdf = 0 ] && [ $patch_installer = "n" ]
then
	if [ $operating_system = $redhat ]
	then
		wkhtmltopdf=$wkhtmltopdf_folder_name
		#show_message $info_install_wkhtmltopdf
		cd $installationDirectory/Dependencies
		if [ -d $wkhtmltopdf ]
		then
		    replace_conf_parameters wkhtmltopdf 1
		    #show_message  $wkhtmltopdf_installed_successfully
		else
		    show_error_message_and_exit "$error_wkhtmltopdf_folders"
		fi
	else if [ $operating_system = $ubuntu ]
	then		
		wkhtmltopdf=$wkhtmltopdf_folder_name
		#show_message $info_install_wkhtmltopdf
		cd $installationDirectory/Dependencies
		if [ -d $wkhtmltopdf ]
		then
		    replace_conf_parameters wkhtmltopdf 1
		    #show_message  $wkhtmltopdf_installed_successfully
		else
		    show_error_message_and_exit "$error_wkhtmltopdf_folders"
		fi
		  
	fi
	fi
fi

put_version

if [[ $imagemagick == 1 ]] && [[ -f /usr/local/etc/ImageMagick-6/policy.xml ]] && [[ -f $installationDirectory/Dependencies/temp/policy.xml ]]
then
	echo "Replacing policy xml file for ImageMagick." >>$ephesoft_log_file_name  2>&1
	move_directory "$installationDirectory/Dependencies/temp/policy.xml" "/usr/local/etc/ImageMagick-6/policy.xml" "" >>$ephesoft_log_file_name  2>&1 
	if [ $? != 0 ]
	then
	  show_message "$error_replacing_policy_xml_file" >>$ephesoft_log_file_name  2>&1
	fi
fi
# Files deleted in both case of fresh installation and upgrade.
delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/temp" "$error_deleting_temp_directory" >> $ephesoft_log_file_name 2>&1

tesseract_install=yes

for param_name in "${install_software[@]}"
do
   if [ $param_name != leptonica ] && [ $param_name != tesseract ] && [ $patch_installer = "y" ]
   then
      continue
   fi
   
   if [ $tesseract_install = no ]
   then
	tesseract_install=yes
	continue
   fi
   
   for (( i = 0; i < ${#install_software[@]}; i++ ))
   do
    if [ "${install_software[$i]}" = "${param_name}" ]
    then
	break;
    fi
   done
   display_name="${name_of_software[($i)]}"
   
   value=`cat ${ephesoft_configuration_file} | grep ${param_name} | cut -d'=' -f2` 
   if [ "$value" = '' ]
   then
	show_error_message_and_exit "$error_installing$display_name."
   fi

  tarName=`hgetTarValue $param_name`
  fileName=`hget $param_name`
  upgrade_required=`hgetUpgradeRequired $param_name`

  eval upgrade_required='$'$upgrade_required
#Optional installing tesseract
  if [ $param_name == "leptonica" ] && [ $value = 0 ]
  then
	#show_message $info_install_tesseract_required
	while :
	do
		if [[ $install_tesseract_option == "y" ]] || [[ $install_tesseract_option == "n" ]] || [[ $install_tesseract_option == "Y" ]] || [[ $install_tesseract_option == "N" ]]
		then
		    overwrite_character=$install_tesseract_option
		else
		  echo "Not case of upgrade in tesseract" >> $ephesoft_log_file_name 2>&1
		  #Handling case of silent installer infintite loop.
		  input_install_tesseract="n"
		  overwrite_character="$input_install_tesseract"
		  show_message "$overwrite_character"
		fi
		echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
		if [ $? != 0 ]
		then
		    echo $invalid_option
		    continue
		fi
		if [ $overwrite_character = 'y' -o $overwrite_character = 'Y' ]
		then
			break
		else
			tesseract_install=no
			value=2
			break
		fi
	done
  fi
  
  if [ $value = 0 ]
  then 
	if [[ $upgrade_required == 1 ]]
	then
	    show_message $info_upgrade_start$display_name$info_hiphens
	else
	    show_message $info_install_start$display_name$info_hiphens
	fi
	cd $installationDirectory/Dependencies

	if [ -f $tarName ]
	then
		delete_files_and_exit_if_error_occurred $fileName "$error_deleting_folder$fileName"
		if [ $show_software_installation_message == "y" ]
		then
		      extract_tar_file "$info_extracting$display_name$info_please_wait" "$tarName" "./" "$error_extracting_tar$display_name."
		else
		      extract_tar_file "$info_extracting$display_name$info_please_wait" "$tarName" "./" "$error_extracting_tar$display_name." >>$ephesoft_log_file_name  2>&1 
		fi

		if [ $operating_system = $ubuntu ]
		then
		    if [ $param_name == "tesseract" ] 
		    then
			  if [ -f svutil.cpp ]
			  then
					  cp svutil.cpp ./$fileName/viewer/ >> $ephesoft_log_file_name  2>&1
					  if [ $? != 0 ]
					  then
						  show_error_message_and_exit "$error_copying_cpp_file"
					  fi
			  else
				   show_error_message_and_exit "$error_cpp_file"
			  fi
		    fi
		fi
		
		if [ -d $fileName ]
		then
			cd $fileName
			if [ "$param_name" == "omnipage" ]
			    then
			      show_message $info_importing_nuance_key
			      if [ $operating_system = $redhat ]
			      then
					rpm --import gpg-pubkey* >> $ephesoft_log_file_name  2>&1
					if [ $? != 0 ]
					then
						show_error_message_and_exit "$error_importing_nuance_key"
					else
					  show_message $success_importing_nuance_key
					fi  
			      else if [ $operating_system = $ubuntu ]
				  then
					  gpg --import $nuance_public_key >> $ephesoft_log_file_name  2>&1 
					  if [ $? != 0 ]
					  then
					  show_error_message_and_exit "$error_importing_nuance_key"
					  else
					  show_message $success_importing_nuance_key
					  fi  
				   fi
			    fi
				     
				if [ $operating_system = $redhat ]
				then
				      cd RedHat/$nuance_folder/$nuance_sub_folder
				      #install_rpm "$info_install_binaries_nuance" "$nuance_devel_rpm_package.rpm" "$error_install_binaries_nuance" "$success_install_binaries_nuance"
				      install_rpm "$info_install_binaries_nuance" "$nuance_lib64_rpm_package.rpm" "$error_install_dev_files_nuance" "$success_install_dev_files_nuance"

				 else if [ $operating_system = $ubuntu ]
				      then
					    cd Debian/$nuance_folder/$nuance_sub_folder
					    show_message $info_verifying_debian_package			
					    gpg --verify-files nuance-*.asc >> $ephesoft_log_file_name  2>&1
					    if [ $? != 0 ]
					    then
						    show_error_message_and_exit "$error_verifying_debian_package"
					    else
						    show_message $success_verifying_debian_package
					    fi
					    install_deb "$info_install_binaries_nuance" "$nuance_lib64_deb_package" "$error_install_binaries_nuance" "$success_install_binaries_nuance"
					    #install_deb "$info_install_dev_files_nuance" "$nuance_devel_deb_package" "$error_install_dev_files_nuance" "$success_install_dev_files_nuance"
				      fi
				 fi

			 elif [ "$param_name" == "notofonts" ]
				  then
					  CPWD=$PWD
					  cd $installationDirectory/Dependencies

					  installandupgrade_fonts "$info_install_noto_fonts_mono" "$noto_fonts_mono" "$error_install_font_files_mono" "$success_install_font_files_mono"
					  installandupgrade_fonts "$info_install_noto_fonts_sans" "$noto_fonts_serif" "$error_install_font_files_sans" "$success_install_font_files_sans"
					  installandupgrade_fonts "$info_install_noto_fonts_serif" "$noto_fonts_sans" "$error_install_font_files_serif" "$success_install_font_files_serif"
					  cd $CPWD
			 else
				  
				  if [ "$param_name" == "tesseract" ]
				  then
					  create_folder m4 "$error_creating_m4_folder"
					  build_creation "$info_build_creation$display_name$info_please_wait" "$success_build_creation$display_name." "$error_build_creation$display_name."
				  fi

				  if [ "$param_name" == "imagemagick" ] || [ "$param_name" == "graphicsmagick" ]
				  then
				         configure_bindings_imagemagick "$info_build_make_file$display_name$info_please_wait" "$success_make_file_build$display_name." "$error_make_file_build$display_name."
				  else
				         configure "$info_build_make_file$display_name$info_please_wait" "$success_make_file_build$display_name." "$error_make_file_build$display_name."
				  fi
				  
					if [ "$param_name" == "leptonica" ] && [ $operating_system = $redhat ]
					then
						autobuild_leptonica
					fi
					
						build_library "$info_building_library$display_name$info_please_wait" "$success_building_library$display_name." "$error_building_library$display_name."
						package_creation "$info_package_creation$display_name$info_please_wait" "$success_package_creation$display_name." "$error_package_creation$display_name."
					
				  if [ "$param_name" == "imagemagick" ] || [ "$param_name" == "graphicsmagick" ] || [ "$param_name" == "leptonica" ] || [ "$param_name" == "tesseract" ] || [ "$param_name" == "poco" ]
				  then
				      if [ $operating_system = $redhat ]
				      then
					      create_rpm_file "$info_creating_rpm_file$display_name$info_please_wait" "$success_creation_rpm_file$display_name." "$error_creation_rpm_file$display_name."
				      else if [ $operating_system = $ubuntu ]
					   then
					       create_rpm_file "$info_creating_deb_file$display_name$info_please_wait" "$success_creation_deb_file$display_name." "$error_creation_deb_file$display_name."
					   fi
				      fi
				  fi
				  
				  if [ "$param_name" == "leptonica" ] || [ "$param_name" == "tesseract" ] || [ "$param_name" == "poco" ]
				  then
				      configure_run_time_bindings "$info_configure_run_time_bindings$display_name$info_please_wait" "$success_configure_run_time_bindings$display_name." "$error_configure_run_time_bindings$display_name."
				  fi
				  
				  if [ "$param_name" != "imagemagick" ] || [ "$param_name" != "graphicsmagick" ]
				  then
				      configure_bindings "$info_configure_run_time_bindings$display_name$info_please_wait" "$success_configure_run_time_bindings$display_name." "$error_configure_run_time_bindings$display_name."
				  fi
				  
				  if [ "$param_name" == "imagemagick" ]
				  then
						#Renaming convert to convert_backup and copying magick to convert
						if [ -f $user_local_bin_path/magick ] && [ -f $user_local_bin_path/convert ]
						then
							if [ -f $user_local_bin_path/convert_backup ]
							then
								delete_files_and_show_message_if_error_occurred $user_local_bin_path/convert_backup "$error_deleting_convert_backup_file"
							fi
							
							mv -f $user_local_bin_path/convert $user_local_bin_path/convert_backup >> $ephesoft_log_file_name  2>&1
							cp -n $user_local_bin_path/magick $user_local_bin_path/convert >> $ephesoft_log_file_name  2>&1
							chmod 755 $user_local_bin_path/convert >> $ephesoft_log_file_name  2>&1
						fi
				  fi
			fi
			
			cd $installationDirectory/Dependencies

			
			    if [ "$param_name" == "imagemagick" ] || [ "$param_name" == "graphicsmagick" ] || [ "$param_name" == "tesseract" ] || [ "$param_name" == "leptonica" ]
			    then
			      delete_files_and_exit_if_error_occurred $sources_folder/$fileName "$error_deleting_folder$fileName."
			      move_directory "$installationDirectory/Dependencies/$fileName" "$sources_folder" "$error_occurred_moving$display_name."			
				fi
	  		
			delete_files_and_exit_if_error_occurred $fileName "$error_deleting_folder$display_name."
		else
		  show_error_message_and_exit "$fileName$error_folder$display_name$error_installation_failed"
		fi
		replace_conf_parameters $param_name 1
		
		if [[ $upgrade_required == 1 ]]
		then
		    show_message  $info_hiphens$display_name$info_upgraded_successfully
		else if [[ $param_name != notofonts ]]
		        then
		    copy_directory_recursively "$installationDirectory/Application/WEB-INF/web_std.xml" "$installationDirectory/Application/WEB-INF/web.xml" "$error_creating_web_xml"
		    show_message  $info_hiphens$display_name$info_installed_successfully
		         fi
		fi
		
  	  else
  	 
 		show_error_message_and_exit "$tarName$error_tar_not_exist$display_name$error_installation_failed"
	  fi
else if [ $is_upgrade = "n" ] && [ $value != 2 ]
     then
	show_message $display_name$info_already_installed
     fi
fi
done

find $installationDirectory/JavaAppServer -type f | egrep '.sql$|.txt$|.sh$|.xml$|ephesoft$|.properties$|.conf$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
find $installationDirectory/Application/native/encryption -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
find $installationDirectory/Dependencies/license-util/ephesoft-license-installer -type f | egrep '.sql$|.txt$|.sh$|.xml$|.properties$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
find $installationDirectory/Dependencies/licensing -type f | egrep 'license-info$'| xargs dos2unix >> $ephesoft_log_file_name  2>&1 
chmod 755 $installationDirectory/EphesoftReports/WEB-INF/lib/phantomjs >> $ephesoft_log_file_name  2>&1
if [ $? != 0 ] 
then
	show_message "$error_assigning_persmission $installationDirectory/EphesoftReports/WEB-INF/lib/phantomjs"
fi

for i in `cat "$ephesoft_configuration_file" `
do
   var=`echo "$i" | awk -F"=" '{print $1}'`
   if [ $var = tomcat_port_number ]
   then
	   param=${i:`expr ${#var} + 1`:${#i}}
	   eval tomcat_port_number=$param
	   break
   fi
done

if [[ $is_upgrade == "y" ]] || [[ $patch_installer == "y" ]]
then
    move_directory "$upgrade_configuration_file" "$upgrade_configuration_file-$ephesoft_installed" "$error_renaming_update_conf_file"
fi

}

if [[ $tesseract = 0 ]]
then
echo $info_install_tesseract_required
while :
do
	if [ $use_silent_installer == "no" ]
	then
		read -e -i "n" overwrite_character
	else
		overwrite_character="$input_install_tesseract"
		show_message "$overwrite_character"
	fi
	echo "$overwrite_character" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
	if [ $? != 0 ]
	then
		echo $invalid_option
		continue
	else
	  install_tesseract_option=$overwrite_character
	  break
	fi
done
fi

if [ $patch_installer = "n" ] || [ $is_upgrade = "n" ] && ([[ "$user_registration_city" = "" ]] || [[ "$user_registration_company" = "" ]] || [[ "$user_registration_country" = "" ]] || [[ "$user_registration_department" = "" ]] || [[ "$user_registration_name" = "" ]] || [[ "$user_registration_state" = "" ]] || [[ "$user_registration_street" = "" ]] )
then      
            echo "$new_line"
      echo "$registration_information"
      while :
	do
		printf "$print_name"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_name
		else
		    user_registration_name="$input_user_registration_name"
		    echo "$user_registration_name"
		fi
		
		printf "$print_company"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_company
		else
		    user_registration_company="$input_user_registration_company"
		    echo "$user_registration_company"
		fi
		
		printf "$print_department"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_department
		else
		    user_registration_department="$input_user_registration_department"
		    echo "$user_registration_department"
		fi
		
		printf "$print_street"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_street
		else
		    user_registration_street="$input_user_registration_street"
		    echo "$user_registration_street"
		fi
		
		printf "$print_city"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_city
		else
		    user_registration_city="$input_user_registration_city"
		    echo "$user_registration_city"
		fi
		
		printf "$print_state"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_state
		else
		    user_registration_state="$input_user_registration_state"
		    echo "$user_registration_state"
		fi
		
		printf "$print_country"
		if [ $use_silent_installer == "no" ]
		then
		    readinput user_registration_country
		else
		    user_registration_country="$input_user_registration_country"
		    echo "$user_registration_country"
		fi
		
		echo "$change_registration_info"
		while :
		do
		    if [ $use_silent_installer == "no" ]
		    then
			read -e -i "n" change_registration_information
		    else
			change_registration_information=n
			echo "$change_registration_information"
		    fi
		    
		    echo "$change_registration_information" | grep '^[yYnN]$' >> $ephesoft_log_file_name 2>&1
		    if [ $? != 0 ]
		    then
			  echo $invalid_option
			  continue
		    fi
		    if [ $change_registration_information = 'y' -o $change_registration_information = 'Y' ]
		    then
			    break
		    else if [ $change_registration_information = 'n' -o $change_registration_information = 'N' ]
			then
			    break
			fi
		    fi
		done
		
		if [ $change_registration_information = 'y' -o $change_registration_information = 'Y' ]
		then
			continue;
		else
			
			replace_user_conf_parameters user_registration_name "$user_registration_name"
			replace_user_conf_parameters user_registration_company "$user_registration_company"
			replace_user_conf_parameters user_registration_department "$user_registration_department"
			replace_user_conf_parameters user_registration_street "$user_registration_street"
			replace_user_conf_parameters user_registration_city "$user_registration_city"
			replace_user_conf_parameters user_registration_state "$user_registration_state"
			replace_user_conf_parameters user_registration_country "$user_registration_country"
			break;
		fi
	done
fi

if [[ $is_upgrade == "y" ]] #|| [[ $patch_installer == "y" ]]
then
    show_software_installation_message=n
    (install_software) & (spinner $! "$info_upgrading_sources")
else
    show_software_installation_message=y
    install_software
fi

if [ ! -f "$upgrade_configuration_file" ] || [[ $patch_installer == "n" ]]
then
    if [[ $show_software_installation_message == "n" ]]
    then
	echo $success_upgrading_sources
    fi
fi
      
if [ ! -d $user_java_path ]
then
		  echo Creating $user_java_path >> $ephesoft_log_file_name  2>&1
	      create_folder "$user_java_path" "$error_creating_java_path"
fi

if [ ! -d $user_java_system_prefs_path ]
then
		  echo Creating $user_java_system_prefs_path >> $ephesoft_log_file_name  2>&1
	      create_folder "$user_java_system_prefs_path" "$error_creating_java_system_prefs_path"
fi

if [ ! -f $installationDirectory/Dependencies/licensing/details.properties ]
then
	      $installationDirectory/Dependencies/licensing/license-info $installationDirectory/Dependencies/licensing
	      if [ $? != 0 ]
	      then
		      echo $error_generating_license_info_file
	      fi
fi

if [[ $patch_installer = "n" ]]
then
    echo "$info_copying_service_file"
    if [ -f "$ephesoft_service_link" ]
    then
	delete_files_and_exit_if_error_occurred "$ephesoft_service_link" "$error_deleting_existing_service"
    fi

    copy_directory_recursively "$installationDirectory/JavaAppServer/bin/ephesoft" "$ephesoft_service_link"
    if [ $operating_system = redhat ]
    then
	  chkconfig --add $service_name >> $ephesoft_log_file_name  2>&1
	  if [ $? != 0 ]
	  then
		  echo "$error_adding_ephesoft_service"
	  else
	      echo "$success_creating_ephesoft_service"
	  fi
    else if [ $operating_system = ubuntu ]
	then
	  update-rc.d $service_name defaults 97 03 >> $ephesoft_log_file_name  2>&1
	  if [ $? != 0 ]
	  then
		  echo "$error_adding_ephesoft_service"
	  else
	      echo "$success_creating_ephesoft_service"
	  fi
	  
	fi
    fi
fi

#Revert back license information
if [ -d $temp_directory ] && [ -d "$temp_directory/.systemPrefs" ]
then
	echo "License information found in the backup. So reverting back up license information." >> $ephesoft_log_file_name  2>&1
	
	if [ ! -d "$user_java_path" ]
	then
		mkdir -p "$user_java_path" >>$ephesoft_log_file_name  2>&1
	fi
	
	copy_directory_recursively "$temp_directory/.systemPrefs" "$user_java_path" >> $ephesoft_log_file_name  2>&1
else
	echo "License information not found in the temp directory." >> $ephesoft_log_file_name  2>&1
fi

#Delete the temp directory file if it exists and set variable to 0.
if [ $temp_directory != "0" ]
then
	if [ -d $temp_directory ]
	then
		echo Deleting temp file $temp_directory >> $ephesoft_log_file_name  2>&1
		delete_files_and_show_message_if_error_occurred $temp_directory "$error_occurred_while_deleting_temp_directory"
	fi
	temp_directory=0
	replace_conf_parameters temp_directory $temp_directory
fi

# Updating permissions for the new/existing/root user
if [[ $application_user != 0 ]] && [[ $application_user_group != 0 ]]
then
	show_message "Assigning permissions to the user $application_user $application_user_group" >> $ephesoft_log_file_name  2>&1
	chown -R $application_user:$application_user_group $installationDirectory
	chmod -R u+rX $installationDirectory
	chown -R $application_user:$application_user_group $sharedFoldersPath
	chmod -R u+rX $sharedFoldersPath
	chown -R $application_user:$application_user_group $user_java_path
	chmod -R u+r $user_java_path
fi

if [ -f $installationDirectory/JavaAppServer/conf/logrotate.conf ]
then
	chmod -R 0644 $installationDirectory/JavaAppServer/conf/logrotate.conf
fi

echo ""
if [[ $is_upgrade = "y" ]] || [[ $patch_installer = "y" ]]
then
	if [ $webxml_merge == 1 ] && [ $applicationcontext_merge == 1 ]
	then
		echo $info_upgrade_patch_note$last_installed_version$info_upgrade_patch_note_3
	else
		echo $info_upgrade_patch_note$ephesoft_installed$info_upgrade_patch_note_2
	fi
fi

if [[ $is_upgrade = "y" ]] || [[ $patch_installer = "y" ]]
then
	echo $info_ephesoft_final_message_upgrade  >> $ephesoft_log_file_name  2>&1
else
	echo $info_ephesoft_final_message  >> $ephesoft_log_file_name  2>&1
fi

if [[ $is_upgrade = "y" ]] || [[ $patch_installer = "y" ]]
then
	echo $info_upgrade_patch_installed_successful
fi

if [[ $use_silent_installer == "yes" ]]
then
      if [[ -f "$installation_log_file" ]]
      then
		delete_files_and_exit_if_error_occurred "$installation_log_file" "$error_deleting_installation_log_file"
      fi
      echo $status_variable=$success_variable >> "$installation_log_file"
fi	

if [ -f "$installationDirectory/Dependencies/upgrade/XMLMerger.jar" ]
then
	delete_files_and_show_message_if_error_occurred "$installationDirectory/Dependencies/upgrade/XMLMerger.jar" "$error_deleting_mergexml_jar"
fi

echo `date "+%Y-%m-%d %H:%M:%S"` 
if [ $is_upgrade = "y" ] 
then
	echo $success_ephesoft_upgrade
else
	echo $success_ephesoft_install
fi

create_link_and_delete_if_already_exists "/bin/java" "$installationDirectory/Dependencies/jdk/bin/java"

